   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  92               	.global	clock_init
  94               	clock_init:
  95               		.stabd	46,0,0
   1:main.c        **** /*
   2:main.c        **** //Follow the damn line
   3:main.c        **** Char [] Author=Cody Schafer;
   4:main.c        **** */
   5:main.c        **** 
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "usart.h"
   8:main.c        **** #include "adc.h"
   9:main.c        **** #include "motor.h"
  10:main.c        **** #include "timers.h"
  11:main.c        **** #include <avr/power.h>
  12:main.c        **** #include <stdio.h>
  13:main.c        **** #include <avr/io.h>
  14:main.c        **** #include <avr/interrupt.h>
  15:main.c        **** #include <util/delay.h>
  16:main.c        **** 
  17:main.c        **** void clock_init(void) {
  97               	.LM0:
  98               	.LFBB1:
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	.LBB15:
  18:main.c        **** 	
  19:main.c        **** 	#if   F_CPU == 1000000
  20:main.c        **** 		clock_prescale_set(clock_div_8);	
  21:main.c        **** 	#elif F_CPU == 2000000
  22:main.c        **** 		clock_prescale_set(clock_div_4);	
  23:main.c        **** 	#elif F_CPU == 4000000
  24:main.c        **** 		clock_prescale_set(clock_div_2);	
  25:main.c        **** 	#elif F_CPU == 8000000
  26:main.c        **** 		clock_prescale_set(clock_div_1);	
 103               	.LM1:
 104 0000 80E0      		ldi r24,lo8(0)
 105 0002 90E0      		ldi r25,hi8(0)
 106 0004 20E8      		ldi r18,lo8(-128)
 107               	/* #APP */
 108               	 ;  26 "main.c" 1
 109 0006 0FB6      		in __tmp_reg__,__SREG__
 110 0008 F894      		cli
 111 000a 2093 6100 		sts 97, r18
 112 000e 8093 6100 		sts 97, r24
 113 0012 0FBE      		out __SREG__, __tmp_reg__
 114               	 ;  0 "" 2
 115               	/* epilogue start */
 116               	/* #NOAPP */
 117               	.LBE15:
  27:main.c        **** 	#else
  28:main.c        **** 		#error "F_CPU Unrecognized"
  29:main.c        **** 	#endif
  30:main.c        **** 	
  31:main.c        **** 	//OSCAL set by the bootloader.
  32:main.c        **** }
 119               	.LM2:
 120 0014 0895      		ret
 122               	.Lscope1:
 124               		.stabd	78,0,0
 127               	.global	print_bin
 129               	print_bin:
 130               		.stabd	46,0,0
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** void  print_bin(uint8_t inp) {
 132               	.LM3:
 133               	.LFBB2:
 134 0016 EF92      		push r14
 135 0018 FF92      		push r15
 136 001a 0F93      		push r16
 137 001c 1F93      		push r17
 138 001e CF93      		push r28
 139 0020 DF93      		push r29
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 143               	.LM4:
 144 0022 C0E0      		ldi r28,lo8(0)
 145 0024 D0E0      		ldi r29,hi8(0)
 146               	.LBB16:
  36:main.c        **** 	for(uint8_t j=0; j<8; ++j) {
  37:main.c        **** 	    printf("%c",((inp&(1<<j))>>j)+'0');
 148               	.LM5:
 149 0026 91E0      		ldi r25,lo8(1)
 150 0028 E92E      		mov r14,r25
 151 002a F12C      		mov r15,__zero_reg__
 152 002c 082F      		mov r16,r24
 153 002e 10E0      		ldi r17,lo8(0)
 154               	.L4:
 155 0030 C701      		movw r24,r14
 156 0032 0C2E      		mov r0,r28
 157 0034 00C0      		rjmp 2f
 158 0036 880F      	1:	lsl r24
 159 0038 991F      		rol r25
 160 003a 0A94      	2:	dec r0
 161 003c 02F4      		brpl 1b
 162 003e 8023      		and r24,r16
 163 0040 9123      		and r25,r17
 164 0042 0C2E      		mov r0,r28
 165 0044 00C0      		rjmp 2f
 166 0046 9595      	1:	asr r25
 167 0048 8795      		ror r24
 168 004a 0A94      	2:	dec r0
 169 004c 02F4      		brpl 1b
 170 004e C096      		adiw r24,48
 171 0050 0E94 0000 		call putchar
 172 0054 2196      		adiw r28,1
 174               	.LM6:
 175 0056 C830      		cpi r28,8
 176 0058 D105      		cpc r29,__zero_reg__
 177 005a 01F4      		brne .L4
 178               	/* epilogue start */
 179               	.LBE16:
  38:main.c        **** 	}
  39:main.c        **** }
 181               	.LM7:
 182 005c DF91      		pop r29
 183 005e CF91      		pop r28
 184 0060 1F91      		pop r17
 185 0062 0F91      		pop r16
 186 0064 FF90      		pop r15
 187 0066 EF90      		pop r14
 188 0068 0895      		ret
 190               	.Lscope2:
 192               		.stabd	78,0,0
 193               		.data
 194               	.LC0:
 195 0000 696E 6974 		.string	"init: done\n"
 195      3A20 646F 
 195      6E65 0A00 
 196               		.text
 198               	.global	init
 200               	init:
 201               		.stabd	46,0,0
  40:main.c        **** 
  41:main.c        **** void init(void) {
 203               	.LM8:
 204               	.LFBB3:
 205               	/* prologue: function */
 206               	/* frame size = 0 */
  42:main.c        **** 	cli();
 208               	.LM9:
 209               	/* #APP */
 210               	 ;  42 "main.c" 1
 211 006a F894      		cli
 212               	 ;  0 "" 2
  43:main.c        **** 	PCMSK1&=~(1<<PCINT15);
 214               	.LM10:
 215               	/* #NOAPP */
 216 006c ECE6      		ldi r30,lo8(108)
 217 006e F0E0      		ldi r31,hi8(108)
 218 0070 8081      		ld r24,Z
 219 0072 8F77      		andi r24,lo8(127)
 220 0074 8083      		st Z,r24
  44:main.c        **** 	power_lcd_disable();
 222               	.LM11:
 223 0076 E4E6      		ldi r30,lo8(100)
 224 0078 F0E0      		ldi r31,hi8(100)
 225 007a 8081      		ld r24,Z
 226 007c 8061      		ori r24,lo8(16)
 227 007e 8083      		st Z,r24
  45:main.c        **** 	power_spi_disable();
 229               	.LM12:
 230 0080 8081      		ld r24,Z
 231 0082 8460      		ori r24,lo8(4)
 232 0084 8083      		st Z,r24
 233               	.LBB17:
 234               	.LBB18:
 235               	.LBB19:
 237               	.LM13:
 238 0086 80E0      		ldi r24,lo8(0)
 239 0088 90E0      		ldi r25,hi8(0)
 240 008a 20E8      		ldi r18,lo8(-128)
 241               	/* #APP */
 242               	 ;  26 "main.c" 1
 243 008c 0FB6      		in __tmp_reg__,__SREG__
 244 008e F894      		cli
 245 0090 2093 6100 		sts 97, r18
 246 0094 8093 6100 		sts 97, r24
 247 0098 0FBE      		out __SREG__, __tmp_reg__
 248               	 ;  0 "" 2
 249               	/* #NOAPP */
 250               	.LBE19:
 251               	.LBE18:
 252               	.LBE17:
  46:main.c        **** 	clock_init();
  47:main.c        **** 	usart_init();
 254               	.LM14:
 255 009a 0E94 0000 		call usart_init
  48:main.c        **** 	timers_init();
 257               	.LM15:
 258 009e 0E94 0000 		call timers_init
  49:main.c        **** 	adc_init();
 260               	.LM16:
 261 00a2 0E94 0000 		call adc_init
  50:main.c        **** 	//Motor Control Lines, set to outputs
  51:main.c        **** 	DDRD|=(uint8_t)((1<<M_AIN1)|(1<<M_AIN2)|(1<<M_BIN1)|(1<<M_BIN2));
 263               	.LM17:
 264 00a6 8AB1      		in r24,42-0x20
 265 00a8 8A6A      		ori r24,lo8(-86)
 266 00aa 8AB9      		out 42-0x20,r24
  52:main.c        **** 
  53:main.c        **** 	sei(); //We use interupts, so enable them.
 268               	.LM18:
 269               	/* #APP */
 270               	 ;  53 "main.c" 1
 271 00ac 7894      		sei
 272               	 ;  0 "" 2
  54:main.c        **** 	printf("init: done\n\n");
 274               	.LM19:
 275               	/* #NOAPP */
 276 00ae 80E0      		ldi r24,lo8(.LC0)
 277 00b0 90E0      		ldi r25,hi8(.LC0)
 278 00b2 0E94 0000 		call puts
 279               	/* epilogue start */
  55:main.c        **** }
 281               	.LM20:
 282 00b6 0895      		ret
 284               	.Lscope3:
 286               		.stabd	78,0,0
 287               		.data
 288               	.LC1:
 289 000c 2020 2020 		.string	"       76543210"
 289      2020 2037 
 289      3635 3433 
 289      3231 3000 
 290               	.LC2:
 291 001c 504F 5254 		.string	"PORTB: "
 291      423A 2000 
 292               	.LC3:
 293 0024 504F 5254 		.string	"PORTD: "
 293      443A 2000 
 294               		.text
 296               	.global	main
 298               	main:
 299               		.stabd	46,0,0
  56:main.c        **** 
  57:main.c        **** int main(void) {
 301               	.LM21:
 302               	.LFBB4:
 303 00b8 DF92      		push r13
 304 00ba EF92      		push r14
 305 00bc FF92      		push r15
 306 00be 0F93      		push r16
 307 00c0 1F93      		push r17
 308 00c2 CF93      		push r28
 309 00c4 DF93      		push r29
 310               	/* prologue: function */
 311               	/* frame size = 0 */
  58:main.c        **** 	init();
 313               	.LM22:
 314 00c6 0E94 0000 		call init
  59:main.c        **** //	set_motor_L(0);
  60:main.c        **** //	set_motor_R(0);
  61:main.c        **** 	DDRB|=(1<<2)|(1<<3);
 316               	.LM23:
 317 00ca 84B1      		in r24,36-0x20
 318 00cc 8C60      		ori r24,lo8(12)
 319 00ce 84B9      		out 36-0x20,r24
  62:main.c        **** 	motor_mode_L(MOTOR_L_FWD);
 321               	.LM24:
 322 00d0 81E0      		ldi r24,lo8(1)
 323 00d2 0E94 0000 		call motor_mode_L
  63:main.c        **** 	motor_mode_R(MOTOR_R_FWD);
 325               	.LM25:
 326 00d6 81E0      		ldi r24,lo8(1)
 327 00d8 0E94 0000 		call motor_mode_R
  64:main.c        **** 	PORTB|=(1<<2)|(1<<3);
 329               	.LM26:
 330 00dc 85B1      		in r24,37-0x20
 331 00de 8C60      		ori r24,lo8(12)
 332 00e0 85B9      		out 37-0x20,r24
  65:main.c        **** 	static unsigned int ct;
  66:main.c        **** 	for (;;) {
  67:main.c        **** 		++ct;
  68:main.c        **** 		//ct = 1 for first iter
  69:main.c        **** 		if (ct%2){	// 1st
  70:main.c        **** 			PORTB^=(1<<2)|(1<<3);
 334               	.LM27:
 335 00e2 3CE0      		ldi r19,lo8(12)
 336 00e4 D32E      		mov r13,r19
  71:main.c        **** 		}
  72:main.c        **** 		
  73:main.c        **** 
  74:main.c        **** 	//	printf("ML: %X\n",get_motor_L());
  75:main.c        **** 	//	printf("MR: %X\n",get_motor_R());
  76:main.c        **** 		printf("       76543210\n");
  77:main.c        **** 		printf("PORTB: ");print_bin(PORTB);printf("\n");
 338               	.LM28:
 339 00e6 20E0      		ldi r18,lo8(.LC2)
 340 00e8 E22E      		mov r14,r18
 341 00ea 20E0      		ldi r18,hi8(.LC2)
 342 00ec F22E      		mov r15,r18
  78:main.c        **** 		printf("PORTD: ");print_bin(PORTD);printf("\n");
 344               	.LM29:
 345 00ee 00E0      		ldi r16,lo8(.LC3)
 346 00f0 10E0      		ldi r17,hi8(.LC3)
 347               	.LBB20:
 348               	.LBB21:
 349               	.LBB22:
 350               	.LBB23:
 352               	.Ltext1:
   1:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** /** \file */
  40:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     \code
  42:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     \endcode
  44:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  45:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  53:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  60:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  62:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** */
  63:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  64:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** #endif
  68:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 	);
  89:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** }
  90:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  91:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  93:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 
  99:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h ****  */
 102:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** void
 103:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** {
 105:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 354               	.LM30:
 355 00f2 C8EC      		ldi r28,lo8(200)
 356 00f4 D0E0      		ldi r29,hi8(200)
 357               	.L12:
 358               	.LBE23:
 359               	.LBE22:
 360               	.LBE21:
 361               	.LBE20:
 363               	.Ltext2:
 365               	.LM31:
 366 00f6 8091 0000 		lds r24,ct.1473
 367 00fa 9091 0000 		lds r25,(ct.1473)+1
 368 00fe 0196      		adiw r24,1
 369 0100 9093 0000 		sts (ct.1473)+1,r25
 370 0104 8093 0000 		sts ct.1473,r24
 372               	.LM32:
 373 0108 80FF      		sbrs r24,0
 374 010a 00C0      		rjmp .L10
 376               	.LM33:
 377 010c 85B1      		in r24,37-0x20
 378 010e 8D25      		eor r24,r13
 379 0110 85B9      		out 37-0x20,r24
 380               	.L10:
 382               	.LM34:
 383 0112 80E0      		ldi r24,lo8(.LC1)
 384 0114 90E0      		ldi r25,hi8(.LC1)
 385 0116 0E94 0000 		call puts
 387               	.LM35:
 388 011a FF92      		push r15
 389 011c EF92      		push r14
 390 011e 0E94 0000 		call printf
 391 0122 85B1      		in r24,37-0x20
 392 0124 0E94 0000 		call print_bin
 393 0128 8AE0      		ldi r24,lo8(10)
 394 012a 90E0      		ldi r25,hi8(10)
 395 012c 0E94 0000 		call putchar
 397               	.LM36:
 398 0130 1F93      		push r17
 399 0132 0F93      		push r16
 400 0134 0E94 0000 		call printf
 401 0138 8BB1      		in r24,43-0x20
 402 013a 0E94 0000 		call print_bin
 403 013e 8AE0      		ldi r24,lo8(10)
 404 0140 90E0      		ldi r25,hi8(10)
 405 0142 0E94 0000 		call putchar
 406 0146 88E5      		ldi r24,lo8(7000)
 407 0148 9BE1      		ldi r25,hi8(7000)
 408 014a 0F90      		pop __tmp_reg__
 409 014c 0F90      		pop __tmp_reg__
 410 014e 0F90      		pop __tmp_reg__
 411 0150 0F90      		pop __tmp_reg__
 412               	.L11:
 413               	.LBB27:
 414               	.LBB26:
 415               	.LBB25:
 416               	.LBB24:
 418               	.Ltext3:
 420               	.LM37:
 421 0152 FE01      		movw r30,r28
 422               	/* #APP */
 423               	 ;  105 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay_basic.h" 1
 424 0154 3197      		1: sbiw r30,1
 425 0156 01F4      		brne 1b
 426               	 ;  0 "" 2
 427               	/* #NOAPP */
 428               	.LBE24:
 429               	.LBE25:
 431               	.Ltext4:
   1:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** /* $Id: delay.h,v 1.5 2007/10/28 23:25:56 joerg_wunsch Exp $ */
  34:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  39:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  40:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  41:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** /** \file */
  42:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  43:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     \code
  44:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  45:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  46:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  47:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     \endcode
  48:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  49:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  50:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  51:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  52:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     used.
  53:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  55:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  56:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  57:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  58:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  59:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  60:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  61:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  62:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  63:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  64:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  65:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  66:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  67:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  68:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  69:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  70:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     routines linked into the application.
  71:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  72:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  73:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  74:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  75:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  76:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** */
  77:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  78:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  79:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  80:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  81:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #endif
  82:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  84:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  85:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  86:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  87:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #endif
  88:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  89:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  90:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  91:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** #endif
  92:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  93:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** /**
  94:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    \ingroup util_delay
  95:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  96:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
  97:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
  99:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 100:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 101:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 102:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 103:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 104:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 105:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    will not be informed about this case.
 106:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****  */
 107:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** void
 108:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** _delay_us(double __us)
 109:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** {
 110:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	uint8_t __ticks;
 111:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 3e6) * __us;
 112:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 113:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		__ticks = 1;
 114:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	else if (__tmp > 255)
 115:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	{
 116:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		_delay_ms(__us / 1000.0);
 117:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		return;
 118:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	}
 119:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	else
 120:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		__ticks = (uint8_t)__tmp;
 121:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	_delay_loop_1(__ticks);
 122:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** }
 123:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 124:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** /**
 126:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 127:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 128:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 129:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 130:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 131:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 132:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 133:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 134:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 
 135:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 136:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 137:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 138:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 139:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 140:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	double __tmp = ((F_CPU) / 4e3) * __ms;
 146:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	if (__tmp < 1.0)
 147:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		__ticks = 1;
 148:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	else if (__tmp > 65535)
 149:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 	{
 150:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 151:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 152:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		while(__ticks)
 153:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 		{
 154:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 			// wait 1/10 ms
 155:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 156:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/delay.h **** 			__ticks --;
 433               	.LM38:
 434 0158 0197      		sbiw r24,1
 436               	.LM39:
 437 015a 01F4      		brne .L11
 438 015c 00C0      		rjmp .L12
 439               	.LBE26:
 440               	.LBE27:
 457               	.Lscope4:
 459               		.stabd	78,0,0
 460               		.lcomm ct.1473,2
 461               		.comm adc_val,8,1
 462               		.comm adc_amt,8,1
 463               		.comm curr_ch,1,1
 469               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/cclLS07d.s:2      *ABS*:0000003f __SREG__
     /tmp/cclLS07d.s:3      *ABS*:0000003e __SP_H__
     /tmp/cclLS07d.s:4      *ABS*:0000003d __SP_L__
     /tmp/cclLS07d.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/cclLS07d.s:6      *ABS*:00000001 __zero_reg__
     /tmp/cclLS07d.s:94     .text:00000000 clock_init
     /tmp/cclLS07d.s:129    .text:00000016 print_bin
     /tmp/cclLS07d.s:200    .text:0000006a init
     /tmp/cclLS07d.s:298    .text:000000b8 main
                             .bss:00000000 ct.1473
                            *COM*:00000008 adc_val
                            *COM*:00000008 adc_amt
                            *COM*:00000001 curr_ch

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
putchar
usart_init
timers_init
adc_init
puts
motor_mode_L
motor_mode_R
printf
