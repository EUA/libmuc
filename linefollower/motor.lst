   1               		.file	"motor.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  87               	.global	get_motor_L
  89               	get_motor_L:
  90               		.stabd	46,0,0
   1:motor.c       **** #include "defines.h"
   2:motor.c       **** #include "motor.h"
   3:motor.c       **** #include "timers.h"
   4:motor.c       **** #include <stdio.h>
   5:motor.c       **** #include <inttypes.h>
   6:motor.c       **** #include <util/atomic.h>
   7:motor.c       **** 
   8:motor.c       **** 
   9:motor.c       **** uint16_t get_motor_L(void) {
  92               	.LM0:
  93               	.LFBB1:
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	.LBB71:
  97               	.LBB72:
  98               	.LBB73:
 100               	.Ltext1:
   1:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****    All rights reserved.
   3:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
   4:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
   7:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****    * Redistributions of source code must retain the above copyright
   8:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  10:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****      the documentation and/or other materials provided with the
  13:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****      distribution.
  14:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  15:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****      contributors may be used to endorse or promote products derived
  17:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****      from this software without specific prior written permission.
  18:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  19:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** */
  31:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  32:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** /* $Id: atomic.h,v 1.3 2007/12/20 14:17:56 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  34:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  37:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** #include <avr/io.h>
  38:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** #include <avr/interrupt.h>
  39:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  40:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** #if !defined(__DOXYGEN__)
  41:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** /* Internal helper functions. */
  42:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** {
  44:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****     sei();
  45:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****     return 1;
  46:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** }
  47:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  48:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** {
  50:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****     cli();
 102               	.LM1:
 103               	/* #APP */
 104               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 105 0000 F894      		cli
 106               	 ;  0 "" 2
 107               	/* #NOAPP */
 108               	.LBE73:
 109               	.LBE72:
 111               	.Ltext2:
  10:motor.c       **** 	uint16_t temp;
  11:motor.c       **** 	ATOMIC_BLOCK(ATOMIC_FORCEON){
  12:motor.c       **** 		temp=MOTOR_LEFT;
 113               	.LM2:
 114 0002 2091 8800 		lds r18,136
 115 0006 3091 8900 		lds r19,(136)+1
 116               	.LBB74:
 117               	.LBB75:
 119               	.Ltext3:
  51:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****     return 1;
  52:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** }
  53:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** 
  54:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h **** {
  56:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****     sei();
 121               	.LM3:
 122               	/* #APP */
 123               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 124 000a 7894      		sei
 125               	 ;  0 "" 2
  57:/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h ****     __asm__ volatile ("" ::: "memory");
 127               	.LM4:
 128               	/* #NOAPP */
 129               	.LBE75:
 130               	.LBE74:
 131               	.LBE71:
 133               	.Ltext4:
  13:motor.c       **** 	}
  14:motor.c       **** 	return temp;
  15:motor.c       **** }
 135               	.LM5:
 136 000c C901      		movw r24,r18
 137               	/* epilogue start */
 138 000e 0895      		ret
 143               	.Lscope1:
 145               		.stabd	78,0,0
 147               	.global	get_motor_R
 149               	get_motor_R:
 150               		.stabd	46,0,0
  16:motor.c       **** 
  17:motor.c       **** uint16_t get_motor_R(void) {
 152               	.LM6:
 153               	.LFBB2:
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	.LBB76:
 157               	.LBB77:
 158               	.LBB78:
 160               	.Ltext5:
 162               	.LM7:
 163               	/* #APP */
 164               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 165 0010 F894      		cli
 166               	 ;  0 "" 2
 167               	/* #NOAPP */
 168               	.LBE78:
 169               	.LBE77:
 171               	.Ltext6:
  18:motor.c       **** 	uint16_t temp;
  19:motor.c       **** 	ATOMIC_BLOCK(ATOMIC_FORCEON){
  20:motor.c       **** 		temp=MOTOR_RIGHT;
 173               	.LM8:
 174 0012 2091 8A00 		lds r18,138
 175 0016 3091 8B00 		lds r19,(138)+1
 176               	.LBB79:
 177               	.LBB80:
 179               	.Ltext7:
 181               	.LM9:
 182               	/* #APP */
 183               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 184 001a 7894      		sei
 185               	 ;  0 "" 2
 187               	.LM10:
 188               	/* #NOAPP */
 189               	.LBE80:
 190               	.LBE79:
 191               	.LBE76:
 193               	.Ltext8:
  21:motor.c       **** 	}
  22:motor.c       **** 	return temp;
  23:motor.c       **** }
 195               	.LM11:
 196 001c C901      		movw r24,r18
 197               	/* epilogue start */
 198 001e 0895      		ret
 203               	.Lscope2:
 205               		.stabd	78,0,0
 208               	.global	set_motor_L
 210               	set_motor_L:
 211               		.stabd	46,0,0
  24:motor.c       **** 
  25:motor.c       **** void set_motor_L(uint16_t speed) {
 213               	.LM12:
 214               	.LFBB3:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	.LBB81:
 218               	.LBB82:
 219               	.LBB83:
 221               	.Ltext9:
 223               	.LM13:
 224               	/* #APP */
 225               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 226 0020 F894      		cli
 227               	 ;  0 "" 2
 228               	/* #NOAPP */
 229               	.LBE83:
 230               	.LBE82:
 232               	.Ltext10:
  26:motor.c       **** 	ATOMIC_BLOCK(ATOMIC_FORCEON){
  27:motor.c       **** 		MOTOR_LEFT=speed;
 234               	.LM14:
 235 0022 9093 8900 		sts (136)+1,r25
 236 0026 8093 8800 		sts 136,r24
 237               	.LBB84:
 238               	.LBB85:
 240               	.Ltext11:
 242               	.LM15:
 243               	/* #APP */
 244               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 245 002a 7894      		sei
 246               	 ;  0 "" 2
 248               	.LM16:
 249               	/* epilogue start */
 250               	/* #NOAPP */
 251               	.LBE85:
 252               	.LBE84:
 253               	.LBE81:
 255               	.Ltext12:
  28:motor.c       **** 	}
  29:motor.c       **** }
 257               	.LM17:
 258 002c 0895      		ret
 260               	.Lscope3:
 262               		.stabd	78,0,0
 265               	.global	set_motor_R
 267               	set_motor_R:
 268               		.stabd	46,0,0
  30:motor.c       **** 
  31:motor.c       **** void set_motor_R(uint16_t speed) {
 270               	.LM18:
 271               	.LFBB4:
 272               	/* prologue: function */
 273               	/* frame size = 0 */
 274               	.LBB86:
 275               	.LBB87:
 276               	.LBB88:
 278               	.Ltext13:
 280               	.LM19:
 281               	/* #APP */
 282               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 283 002e F894      		cli
 284               	 ;  0 "" 2
 285               	/* #NOAPP */
 286               	.LBE88:
 287               	.LBE87:
 289               	.Ltext14:
  32:motor.c       **** 	ATOMIC_BLOCK(ATOMIC_FORCEON){
  33:motor.c       **** 		MOTOR_RIGHT=speed;
 291               	.LM20:
 292 0030 9093 8B00 		sts (138)+1,r25
 293 0034 8093 8A00 		sts 138,r24
 294               	.LBB89:
 295               	.LBB90:
 297               	.Ltext15:
 299               	.LM21:
 300               	/* #APP */
 301               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 302 0038 7894      		sei
 303               	 ;  0 "" 2
 305               	.LM22:
 306               	/* epilogue start */
 307               	/* #NOAPP */
 308               	.LBE90:
 309               	.LBE89:
 310               	.LBE86:
 312               	.Ltext16:
  34:motor.c       **** 	}
  35:motor.c       **** }
 314               	.LM23:
 315 003a 0895      		ret
 317               	.Lscope4:
 319               		.stabd	78,0,0
 322               	.global	lf_turn_left_inc
 324               	lf_turn_left_inc:
 325               		.stabd	46,0,0
  36:motor.c       **** 
  37:motor.c       **** uint8_t motor_mode_L(uint8_t mode) {
  38:motor.c       **** 	static uint8_t c_mode; //=0;
  39:motor.c       **** 
  40:motor.c       **** 	if 	(mode == MOTOR_MODE_CCW ) {
  41:motor.c       **** 		MOTOR_CTL_PORT&=~(1<<M_LIN1); // IN1 = L, IN2 = H
  42:motor.c       **** 		MOTOR_CTL_PORT|=(1<<M_LIN2);
  43:motor.c       **** 		c_mode = mode;
  44:motor.c       **** 	}
  45:motor.c       **** 	else if (mode == MOTOR_MODE_CW  ) {
  46:motor.c       **** 		MOTOR_CTL_PORT|=(1<<M_LIN1);
  47:motor.c       **** 		MOTOR_CTL_PORT&=~(1<<M_LIN2); // IN1 = H, IN2 = L
  48:motor.c       **** 		c_mode = mode;
  49:motor.c       **** 	}
  50:motor.c       **** 	else if (mode == MOTOR_MODE_STOP) {
  51:motor.c       **** 		MOTOR_CTL_PORT&=~((1<<M_LIN1)|(1<<M_LIN2)); // IN1 = L, IN2 = L
  52:motor.c       **** 		c_mode = mode;
  53:motor.c       **** 	}
  54:motor.c       **** 	else if (mode == MOTOR_MODE_SB	) {
  55:motor.c       **** 		MOTOR_CTL_PORT|=(1<<M_LIN1)|(1<<M_LIN2); // IN1 = H, IN2 = H
  56:motor.c       **** 		c_mode = mode;
  57:motor.c       **** 	}
  58:motor.c       **** //	if	(mode == MOTOR_MODE_GET )
  59:motor.c       **** //		return c_mode;
  60:motor.c       **** 	printf("motor L mode: %d\n",c_mode);
  61:motor.c       **** 	return c_mode;
  62:motor.c       **** }
  63:motor.c       **** 
  64:motor.c       **** uint8_t motor_mode_R(uint8_t mode) {
  65:motor.c       **** 	static uint8_t c_mode; //=0;
  66:motor.c       **** 
  67:motor.c       **** 	if 	(mode == MOTOR_MODE_CCW ) {
  68:motor.c       **** 		MOTOR_CTL_PORT&=~(1<<M_RIN1); // IN1 = L, IN2 = H
  69:motor.c       **** 		MOTOR_CTL_PORT|=(1<<M_RIN2);
  70:motor.c       **** 		c_mode = mode;
  71:motor.c       **** 	}
  72:motor.c       **** 	else if (mode == MOTOR_MODE_CW  ) {
  73:motor.c       **** 		MOTOR_CTL_PORT|=(1<<M_RIN1);
  74:motor.c       **** 		MOTOR_CTL_PORT&=~(1<<M_RIN2); // IN1 = H, IN2 = L
  75:motor.c       **** 		c_mode = mode;
  76:motor.c       **** 	}
  77:motor.c       **** 	else if (mode == MOTOR_MODE_STOP) {
  78:motor.c       **** 		MOTOR_CTL_PORT&=~((1<<M_RIN1)|(1<<M_RIN2)); // IN1 = L, IN2 = L
  79:motor.c       **** 		c_mode = mode;
  80:motor.c       **** 	}
  81:motor.c       **** 	else if (mode == MOTOR_MODE_SB	) {
  82:motor.c       **** 		MOTOR_CTL_PORT|=(1<<M_RIN1)|(1<<M_RIN2); // IN1 = H, IN2 = H
  83:motor.c       **** 		c_mode = mode;
  84:motor.c       **** 	}
  85:motor.c       **** //	if	(mode == MOTOR_MODE_GET )
  86:motor.c       **** //		return c_mode;
  87:motor.c       **** 	printf("motor r mode: %d\n",c_mode);
  88:motor.c       **** 	return c_mode;
  89:motor.c       **** }
  90:motor.c       **** 
  91:motor.c       **** enum {LEFT,RIGHT};
  92:motor.c       **** void lf_turn_left_inc(uint16_t inc) {
 327               	.LM24:
 328               	.LFBB5:
 329               	/* prologue: function */
 330               	/* frame size = 0 */
 331               	.LBB91:
 332               	.LBB92:
 333               	.LBB93:
 334               	.LBB94:
 335               	.LBB95:
 337               	.Ltext17:
 339               	.LM25:
 340               	/* #APP */
 341               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 342 003c F894      		cli
 343               	 ;  0 "" 2
 344               	/* #NOAPP */
 345               	.LBE95:
 346               	.LBE94:
 348               	.Ltext18:
 350               	.LM26:
 351 003e 2091 8800 		lds r18,136
 352 0042 3091 8900 		lds r19,(136)+1
 353               	.LBB96:
 354               	.LBB97:
 356               	.Ltext19:
 358               	.LM27:
 359               	/* #APP */
 360               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 361 0046 7894      		sei
 362               	 ;  0 "" 2
 364               	.LM28:
 365               	/* #NOAPP */
 366               	.LBE97:
 367               	.LBE96:
 368               	.LBE93:
 369               	.LBE92:
 370               	.LBE91:
 371               	.LBB98:
 372               	.LBB99:
 373               	.LBB100:
 374               	.LBB101:
 375               	.LBB102:
 377               	.LM29:
 378               	/* #APP */
 379               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 380 0048 F894      		cli
 381               	 ;  0 "" 2
 382               	/* #NOAPP */
 383               	.LBE102:
 384               	.LBE101:
 386               	.Ltext20:
 388               	.LM30:
 389 004a 4091 8A00 		lds r20,138
 390 004e 5091 8B00 		lds r21,(138)+1
 391               	.LBB103:
 392               	.LBB104:
 394               	.Ltext21:
 396               	.LM31:
 397               	/* #APP */
 398               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 399 0052 7894      		sei
 400               	 ;  0 "" 2
 402               	.LM32:
 403               	/* #NOAPP */
 404               	.LBE104:
 405               	.LBE103:
 406               	.LBE100:
 407               	.LBE99:
 408               	.LBE98:
 410               	.Ltext22:
  93:motor.c       **** 	uint16_t c_speed [2] = {get_motor_L(),get_motor_R()};
  94:motor.c       **** 	int32_t speed_diff_L = LF_MAX_SPEED - c_speed[LEFT];
  95:motor.c       **** 	int32_t speed_diff_R = LF_MAX_SPEED - c_speed[RIGHT];
  96:motor.c       **** 
  97:motor.c       **** 	if ((c_speed[LEFT] + inc) > LF_MAX_SPEED) {
  98:motor.c       **** 		set_motor_L(c_speed[LEFT]+speed_diff_L);
  99:motor.c       **** 		set_motor_R(c_speed[RIGHT]-(inc-speed_diff_L));
 100:motor.c       **** 	}
 101:motor.c       **** 	else
 102:motor.c       **** 		set_motor_L(c_speed[LEFT]+inc);
 412               	.LM33:
 413 0054 280F      		add r18,r24
 414 0056 391F      		adc r19,r25
 415               	.LBB105:
 416               	.LBB106:
 417               	.LBB107:
 418               	.LBB108:
 419               	.LBB109:
 421               	.Ltext23:
 423               	.LM34:
 424               	/* #APP */
 425               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 426 0058 F894      		cli
 427               	 ;  0 "" 2
 428               	/* #NOAPP */
 429               	.LBE109:
 430               	.LBE108:
 432               	.Ltext24:
 434               	.LM35:
 435 005a 3093 8900 		sts (136)+1,r19
 436 005e 2093 8800 		sts 136,r18
 437               	.LBB110:
 438               	.LBB111:
 440               	.Ltext25:
 442               	.LM36:
 443               	/* #APP */
 444               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 445 0062 7894      		sei
 446               	 ;  0 "" 2
 448               	.LM37:
 449               	/* epilogue start */
 450               	/* #NOAPP */
 451               	.LBE111:
 452               	.LBE110:
 453               	.LBE107:
 454               	.LBE106:
 455               	.LBE105:
 457               	.Ltext26:
 103:motor.c       **** 	//TODO: case when ((c_speed[RIGHT]-inc) < LF_MIN_SPEED)?
 104:motor.c       **** 		
 105:motor.c       **** }
 459               	.LM38:
 460 0064 0895      		ret
 468               	.Lscope5:
 470               		.stabd	78,0,0
 473               	.global	lf_turn_right_inc
 475               	lf_turn_right_inc:
 476               		.stabd	46,0,0
 106:motor.c       **** void lf_turn_right_inc(uint16_t inc) {
 478               	.LM39:
 479               	.LFBB6:
 480               	/* prologue: function */
 481               	/* frame size = 0 */
 482               	.LBB112:
 483               	.LBB113:
 484               	.LBB114:
 485               	.LBB115:
 486               	.LBB116:
 488               	.Ltext27:
 490               	.LM40:
 491               	/* #APP */
 492               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 493 0066 F894      		cli
 494               	 ;  0 "" 2
 495               	/* #NOAPP */
 496               	.LBE116:
 497               	.LBE115:
 499               	.Ltext28:
 501               	.LM41:
 502 0068 8091 8800 		lds r24,136
 503 006c 9091 8900 		lds r25,(136)+1
 504               	.LBB117:
 505               	.LBB118:
 507               	.Ltext29:
 509               	.LM42:
 510               	/* #APP */
 511               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 512 0070 7894      		sei
 513               	 ;  0 "" 2
 515               	.LM43:
 516               	/* #NOAPP */
 517               	.LBE118:
 518               	.LBE117:
 519               	.LBE114:
 520               	.LBE113:
 521               	.LBE112:
 522               	.LBB119:
 523               	.LBB120:
 524               	.LBB121:
 525               	.LBB122:
 526               	.LBB123:
 528               	.LM44:
 529               	/* #APP */
 530               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 531 0072 F894      		cli
 532               	 ;  0 "" 2
 533               	/* #NOAPP */
 534               	.LBE123:
 535               	.LBE122:
 537               	.Ltext30:
 539               	.LM45:
 540 0074 8091 8A00 		lds r24,138
 541 0078 9091 8B00 		lds r25,(138)+1
 542               	.LBB124:
 543               	.LBB125:
 545               	.Ltext31:
 547               	.LM46:
 548               	/* #APP */
 549               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 550 007c 7894      		sei
 551               	 ;  0 "" 2
 553               	.LM47:
 554               	/* epilogue start */
 555               	/* #NOAPP */
 556               	.LBE125:
 557               	.LBE124:
 558               	.LBE121:
 559               	.LBE120:
 560               	.LBE119:
 562               	.Ltext32:
 107:motor.c       **** 	uint16_t c_speed [2] = {get_motor_L(),get_motor_R()};
 108:motor.c       **** 	
 109:motor.c       **** }
 564               	.LM48:
 565 007e 0895      		ret
 567               	.Lscope6:
 569               		.stabd	78,0,0
 571               	.global	lf_full_speed
 573               	lf_full_speed:
 574               		.stabd	46,0,0
 110:motor.c       **** void lf_full_speed(void) {
 576               	.LM49:
 577               	.LFBB7:
 578               	/* prologue: function */
 579               	/* frame size = 0 */
 580               	.LBB126:
 581               	.LBB127:
 582               	.LBB128:
 583               	.LBB129:
 584               	.LBB130:
 586               	.Ltext33:
 588               	.LM50:
 589               	/* #APP */
 590               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 591 0080 F894      		cli
 592               	 ;  0 "" 2
 593               	/* #NOAPP */
 594               	.LBE130:
 595               	.LBE129:
 597               	.Ltext34:
 599               	.LM51:
 600 0082 8FEF      		ldi r24,lo8(-1)
 601 0084 9FEF      		ldi r25,hi8(-1)
 602 0086 9093 8900 		sts (136)+1,r25
 603 008a 8093 8800 		sts 136,r24
 604               	.LBB131:
 605               	.LBB132:
 607               	.Ltext35:
 609               	.LM52:
 610               	/* #APP */
 611               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 612 008e 7894      		sei
 613               	 ;  0 "" 2
 615               	.LM53:
 616               	/* #NOAPP */
 617               	.LBE132:
 618               	.LBE131:
 619               	.LBE128:
 620               	.LBE127:
 621               	.LBE126:
 622               	.LBB133:
 623               	.LBB134:
 624               	.LBB135:
 625               	.LBB136:
 626               	.LBB137:
 628               	.LM54:
 629               	/* #APP */
 630               	 ;  50 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 631 0090 F894      		cli
 632               	 ;  0 "" 2
 633               	/* #NOAPP */
 634               	.LBE137:
 635               	.LBE136:
 637               	.Ltext36:
 639               	.LM55:
 640 0092 8FEF      		ldi r24,lo8(-1)
 641 0094 9FEF      		ldi r25,hi8(-1)
 642 0096 9093 8B00 		sts (138)+1,r25
 643 009a 8093 8A00 		sts 138,r24
 644               	.LBB138:
 645               	.LBB139:
 647               	.Ltext37:
 649               	.LM56:
 650               	/* #APP */
 651               	 ;  56 "/usr/lib/gcc/avr/4.3.0/../../../../avr/include/util/atomic.h" 1
 652 009e 7894      		sei
 653               	 ;  0 "" 2
 655               	.LM57:
 656               	/* epilogue start */
 657               	/* #NOAPP */
 658               	.LBE139:
 659               	.LBE138:
 660               	.LBE135:
 661               	.LBE134:
 662               	.LBE133:
 664               	.Ltext38:
 111:motor.c       **** 	set_motor_L(LF_MAX_SPEED);
 112:motor.c       **** 	set_motor_R(LF_MAX_SPEED);
 113:motor.c       **** }
 666               	.LM58:
 667 00a0 0895      		ret
 669               	.Lscope7:
 671               		.stabd	78,0,0
 672               		.data
 673               	.LC0:
 674 0000 6D6F 746F 		.string	"motor r mode: %d\n"
 674      7220 7220 
 674      6D6F 6465 
 674      3A20 2564 
 674      0A00 
 675               		.text
 678               	.global	motor_mode_R
 680               	motor_mode_R:
 681               		.stabd	46,0,0
 683               	.LM59:
 684               	.LFBB8:
 685               	/* prologue: function */
 686               	/* frame size = 0 */
 687 00a2 982F      		mov r25,r24
 689               	.LM60:
 690 00a4 8230      		cpi r24,lo8(2)
 691 00a6 01F4      		brne .L16
 693               	.LM61:
 694 00a8 5D98      		cbi 43-0x20,5
 696               	.LM62:
 697 00aa 5F9A      		sbi 43-0x20,7
 698 00ac 00C0      		rjmp .L21
 699               	.L16:
 701               	.LM63:
 702 00ae 8130      		cpi r24,lo8(1)
 703 00b0 01F4      		brne .L18
 705               	.LM64:
 706 00b2 5D9A      		sbi 43-0x20,5
 708               	.LM65:
 709 00b4 5F98      		cbi 43-0x20,7
 710 00b6 00C0      		rjmp .L21
 711               	.L18:
 713               	.LM66:
 714 00b8 8330      		cpi r24,lo8(3)
 715 00ba 01F4      		brne .L19
 717               	.LM67:
 718 00bc 8BB1      		in r24,43-0x20
 719 00be 8F75      		andi r24,lo8(95)
 720 00c0 00C0      		rjmp .L22
 721               	.L19:
 723               	.LM68:
 724 00c2 8430      		cpi r24,lo8(4)
 725 00c4 01F4      		brne .L17
 727               	.LM69:
 728 00c6 8BB1      		in r24,43-0x20
 729 00c8 806A      		ori r24,lo8(-96)
 730               	.L22:
 731 00ca 8BB9      		out 43-0x20,r24
 732               	.L21:
 734               	.LM70:
 735 00cc 9093 0000 		sts c_mode.1481,r25
 736               	.L17:
 738               	.LM71:
 739 00d0 8091 0000 		lds r24,c_mode.1481
 740 00d4 90E0      		ldi r25,lo8(0)
 741 00d6 9F93      		push r25
 742 00d8 8F93      		push r24
 743 00da 80E0      		ldi r24,lo8(.LC0)
 744 00dc 90E0      		ldi r25,hi8(.LC0)
 745 00de 9F93      		push r25
 746 00e0 8F93      		push r24
 747 00e2 0E94 0000 		call printf
 748 00e6 0F90      		pop __tmp_reg__
 749 00e8 0F90      		pop __tmp_reg__
 750 00ea 0F90      		pop __tmp_reg__
 751 00ec 0F90      		pop __tmp_reg__
 753               	.LM72:
 754 00ee 8091 0000 		lds r24,c_mode.1481
 755               	/* epilogue start */
 756 00f2 0895      		ret
 761               	.Lscope8:
 763               		.stabd	78,0,0
 764               		.data
 765               	.LC1:
 766 0012 6D6F 746F 		.string	"motor L mode: %d\n"
 766      7220 4C20 
 766      6D6F 6465 
 766      3A20 2564 
 766      0A00 
 767               		.text
 770               	.global	motor_mode_L
 772               	motor_mode_L:
 773               		.stabd	46,0,0
 775               	.LM73:
 776               	.LFBB9:
 777               	/* prologue: function */
 778               	/* frame size = 0 */
 779 00f4 982F      		mov r25,r24
 781               	.LM74:
 782 00f6 8230      		cpi r24,lo8(2)
 783 00f8 01F4      		brne .L24
 785               	.LM75:
 786 00fa 5998      		cbi 43-0x20,1
 788               	.LM76:
 789 00fc 5B9A      		sbi 43-0x20,3
 790 00fe 00C0      		rjmp .L29
 791               	.L24:
 793               	.LM77:
 794 0100 8130      		cpi r24,lo8(1)
 795 0102 01F4      		brne .L26
 797               	.LM78:
 798 0104 599A      		sbi 43-0x20,1
 800               	.LM79:
 801 0106 5B98      		cbi 43-0x20,3
 802 0108 00C0      		rjmp .L29
 803               	.L26:
 805               	.LM80:
 806 010a 8330      		cpi r24,lo8(3)
 807 010c 01F4      		brne .L27
 809               	.LM81:
 810 010e 8BB1      		in r24,43-0x20
 811 0110 857F      		andi r24,lo8(-11)
 812 0112 00C0      		rjmp .L30
 813               	.L27:
 815               	.LM82:
 816 0114 8430      		cpi r24,lo8(4)
 817 0116 01F4      		brne .L25
 819               	.LM83:
 820 0118 8BB1      		in r24,43-0x20
 821 011a 8A60      		ori r24,lo8(10)
 822               	.L30:
 823 011c 8BB9      		out 43-0x20,r24
 824               	.L29:
 826               	.LM84:
 827 011e 9093 0000 		sts c_mode.1461,r25
 828               	.L25:
 830               	.LM85:
 831 0122 8091 0000 		lds r24,c_mode.1461
 832 0126 90E0      		ldi r25,lo8(0)
 833 0128 9F93      		push r25
 834 012a 8F93      		push r24
 835 012c 80E0      		ldi r24,lo8(.LC1)
 836 012e 90E0      		ldi r25,hi8(.LC1)
 837 0130 9F93      		push r25
 838 0132 8F93      		push r24
 839 0134 0E94 0000 		call printf
 840 0138 0F90      		pop __tmp_reg__
 841 013a 0F90      		pop __tmp_reg__
 842 013c 0F90      		pop __tmp_reg__
 843 013e 0F90      		pop __tmp_reg__
 845               	.LM86:
 846 0140 8091 0000 		lds r24,c_mode.1461
 847               	/* epilogue start */
 848 0144 0895      		ret
 853               	.Lscope9:
 855               		.stabd	78,0,0
 856               		.lcomm c_mode.1481,1
 857               		.lcomm c_mode.1461,1
 861               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
     /tmp/ccXve2Q1.s:2      *ABS*:0000003f __SREG__
     /tmp/ccXve2Q1.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccXve2Q1.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccXve2Q1.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccXve2Q1.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccXve2Q1.s:89     .text:00000000 get_motor_L
     /tmp/ccXve2Q1.s:149    .text:00000010 get_motor_R
     /tmp/ccXve2Q1.s:210    .text:00000020 set_motor_L
     /tmp/ccXve2Q1.s:267    .text:0000002e set_motor_R
     /tmp/ccXve2Q1.s:324    .text:0000003c lf_turn_left_inc
     /tmp/ccXve2Q1.s:475    .text:00000066 lf_turn_right_inc
     /tmp/ccXve2Q1.s:573    .text:00000080 lf_full_speed
     /tmp/ccXve2Q1.s:680    .text:000000a2 motor_mode_R
                             .bss:00000000 c_mode.1481
     /tmp/ccXve2Q1.s:772    .text:000000f4 motor_mode_L
     /tmp/ccXve2Q1.s:856    .bss:00000001 c_mode.1461

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
printf
