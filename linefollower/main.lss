
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000179a  0000180e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000179a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800134  000017ce  00001842  2**0
                  ALLOC
  3 .stab         00004ab8  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000232e  00000000  00000000  000062fc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__ctors_end>
       4:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
       8:	0c 94 47 08 	jmp	0x108e	; 0x108e <__vector_2>
       c:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__vector_3>
      10:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      14:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_5>
      18:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_6>
      1c:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__vector_7>
      20:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_8>
      24:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__vector_9>
      28:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      2c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      30:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      34:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      38:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      3c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      40:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      44:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      48:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      4c:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_19>
      50:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      54:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      58:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>

0000005c <__c.1640>:
      5c:	0a 0a 49 6e 76 61 6c 69 64 20 49 6e 74 65 72 75     ..Invalid Interu
      6c:	70 74 20 45 6e 61 62 6c 65 64 0a 00                 pt Enabled..

00000078 <__c.1593>:
      78:	0a 49 6e 69 74 3a 20 44 6f 6e 65 0a 0a 00           .Init: Done...

00000086 <__c.1826>:
      86:	09 5b 64 6f 6e 65 5d 00                             .[done].

0000008e <__c.1824>:
      8e:	0a 61 64 63 3a 20 69 6e 69 74 3a 20 73 65 74 75     .adc: init: setu
      9e:	70 20 63 6f 6e 76 65 72 74 69 6f 6e 73 00           p convertions.

000000ac <__c.1822>:
      ac:	0a 61 64 63 3a 20 69 6e 69 74 00                    .adc: init.

000000b7 <__c.1811>:
      b7:	0a 5b 64 65 62 75 67 5d 20 57 61 72 6e 69 6e 67     .[debug] Warning
      c7:	3a 20 75 6e 69 6d 70 6c 69 6d 65 6e 74 65 64 20     : unimplimented 
      d7:	66 75 6e 63 74 69 6f 6e 20 61 64 63 5f 63 61 6c     function adc_cal
      e7:	69 62 72 61 74 65 5f 73 74 6f 72 65 20 63 61 6c     ibrate_store cal
      f7:	6c 65 64 00                                         led.

000000fb <__c.1755>:
      fb:	0a 5b 64 65 62 75 67 5d 20 41 44 43 20 4f 46 46     .[debug] ADC OFF
     10b:	53 45 54 53 3a 20 00                                SETS: .

00000112 <__c.1743>:
     112:	0a 5b 64 65 62 75 67 5d 20 46 49 58 45 44 20 41     .[debug] FIXED A
     122:	44 43 3a 20 00                                      DC: .

00000127 <__c.1737>:
     127:	0a 5b 64 65 62 75 67 5d 20 20 20 52 41 57 20 41     .[debug]   RAW A
     137:	44 43 3a 20 00                                      DC: .

0000013c <__c.1583>:
     13c:	0a 75 73 61 72 74 3a 20 69 6e 69 74 20 75 73 61     .usart: init usa
     14c:	72 74 30 09 5b 64 6f 6e 65 5d 00                    rt0.[done].

00000157 <__c.1649>:
     157:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 09 5b     .timers: init:.[
     167:	64 6f 6e 65 5d 00                                   done].

0000016d <__c.1647>:
     16d:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 73     .timers: init: s
     17d:	74 61 72 74 2e 00                                   tart..

00000183 <__c.1572>:
     183:	09 5b 64 6f 6e 65 5d 00                             .[done].

0000018b <__c.1565>:
     18b:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 74     .timers: init: t
     19b:	69 6d 65 72 31 00                                   imer1.

000001a1 <__c.1556>:
     1a1:	0a 4d 6f 64 65 3a 20 25 64 00                       .Mode: %d.

000001ab <__c.1518>:
     1ab:	09 5b 64 6f 6e 65 5d 00                             .[done].

000001b3 <__c.1510>:
     1b3:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 74     .timers: init: t
     1c3:	69 6d 65 72 32 00                                   imer2.

000001c9 <__c.1685>:
     1c9:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     1d9:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     1e9:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

000001f7 <__c.1670>:
     1f7:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     207:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     217:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

00000225 <__c.1648>:
     225:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     235:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     245:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

00000253 <__c.1567>:
     253:	0a 5b 64 65 62 75 67 5d 20 50 42 3f 20 52 65 6c     .[debug] PB? Rel
     263:	65 61 73 65 64 00                                   eased.

00000269 <__c.1551>:
     269:	0a 5b 64 65 62 75 67 5d 20 50 45 3f 20 52 65 6c     .[debug] PE? Rel
     279:	65 61 73 65 64 00                                   eased.

0000027f <__c.1549>:
     27f:	0a 43 75 72 72 65 6e 74 20 4d 6f 64 65 20 28 46     .Current Mode (F
     28f:	2f 57 29 3d 20 25 64 00                             /W)= %d.

00000297 <__c.1547>:
     297:	0a 43 75 72 72 65 6e 74 20 4d 6f 64 65 20 28 54     .Current Mode (T
     2a7:	2f 57 29 20 3d 20 25 64 00                          /W) = %d.

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	d4 e0       	ldi	r29, 0x04	; 4
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	cd bf       	out	0x3d, r28	; 61

000002bc <__do_copy_data>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	a0 e0       	ldi	r26, 0x00	; 0
     2c0:	b1 e0       	ldi	r27, 0x01	; 1
     2c2:	ea e9       	ldi	r30, 0x9A	; 154
     2c4:	f7 e1       	ldi	r31, 0x17	; 23
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <.do_copy_data_start>

000002c8 <.do_copy_data_loop>:
     2c8:	05 90       	lpm	r0, Z+
     2ca:	0d 92       	st	X+, r0

000002cc <.do_copy_data_start>:
     2cc:	a4 33       	cpi	r26, 0x34	; 52
     2ce:	b1 07       	cpc	r27, r17
     2d0:	d9 f7       	brne	.-10     	; 0x2c8 <.do_copy_data_loop>

000002d2 <__do_clear_bss>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	a4 e3       	ldi	r26, 0x34	; 52
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <.do_clear_bss_start>

000002da <.do_clear_bss_loop>:
     2da:	1d 92       	st	X+, r1

000002dc <.do_clear_bss_start>:
     2dc:	ad 3d       	cpi	r26, 0xDD	; 221
     2de:	b1 07       	cpc	r27, r17
     2e0:	e1 f7       	brne	.-8      	; 0x2da <.do_clear_bss_loop>
     2e2:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
     2e6:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <_exit>

000002ea <__bad_interrupt>:
     2ea:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_default>

000002ee <clock_init>:
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	20 e8       	ldi	r18, 0x80	; 128
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	20 93 61 00 	sts	0x0061, r18
     2fc:	80 93 61 00 	sts	0x0061, r24
     300:	0f be       	out	0x3f, r0	; 63
	#else
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}
     302:	08 95       	ret

00000304 <__vector_default>:
			++sp;
		}
	}	
} 
		
ISR(BADISR_vect) {
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
	printf_P(PSTR("\n\nInvalid Interupt Enabled\n"));
     312:	8c e5       	ldi	r24, 0x5C	; 92
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9f 93       	push	r25
     318:	8f 93       	push	r24
     31a:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
}
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <init>:
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
	cli();
     330:	f8 94       	cli
	power_lcd_disable();
     332:	e4 e6       	ldi	r30, 0x64	; 100
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	80 61       	ori	r24, 0x10	; 16
     33a:	80 83       	st	Z, r24
	power_spi_disable();
     33c:	80 81       	ld	r24, Z
     33e:	84 60       	ori	r24, 0x04	; 4
     340:	80 83       	st	Z, r24
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	20 e8       	ldi	r18, 0x80	; 128
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	20 93 61 00 	sts	0x0061, r18
     350:	80 93 61 00 	sts	0x0061, r24
     354:	0f be       	out	0x3f, r0	; 63
void init(void) {
	cli();
	power_lcd_disable();
	power_spi_disable();
	clock_init();
	joy_init();
     356:	0e 94 fd 07 	call	0xffa	; 0xffa <joy_init>
	usart_init();
     35a:	0e 94 24 05 	call	0xa48	; 0xa48 <usart_init>
	adc_init();
     35e:	0e 94 87 02 	call	0x50e	; 0x50e <adc_init>
	timers_init();
     362:	0e 94 3f 06 	call	0xc7e	; 0xc7e <timers_init>
	motors_init();
     366:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <motors_init>
	sei();
     36a:	78 94       	sei
	#ifdef debug
	printf_P(PSTR("\nInit: Done\n\n"));
     36c:	88 e7       	ldi	r24, 0x78	; 120
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
	#endif
}
     37c:	08 95       	ret

0000037e <main>:



int main(void) {
	init();
     37e:	0e 94 98 01 	call	0x330	; 0x330 <init>
	c_mode=WAIT;
     382:	10 92 c4 01 	sts	0x01C4, r1
	initial=true;
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	80 93 d6 01 	sts	0x01D6, r24
     38c:	ff cf       	rjmp	.-2      	; 0x38c <main+0xe>

0000038e <print_bin>:
	#endif
	
	//OSCAL set by the bootloader.
}

void  print_bin(uint8_t inp) {
     38e:	ef 92       	push	r14
     390:	ff 92       	push	r15
     392:	0f 93       	push	r16
     394:	1f 93       	push	r17
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	c7 e0       	ldi	r28, 0x07	; 7
     39c:	d0 e0       	ldi	r29, 0x00	; 0
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	e9 2e       	mov	r14, r25
     3a2:	f1 2c       	mov	r15, r1
     3a4:	08 2f       	mov	r16, r24
     3a6:	10 e0       	ldi	r17, 0x00	; 0
     3a8:	c7 01       	movw	r24, r14
     3aa:	0c 2e       	mov	r0, r28
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <print_bin+0x24>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	0a 94       	dec	r0
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <print_bin+0x20>
     3b6:	80 23       	and	r24, r16
     3b8:	91 23       	and	r25, r17
     3ba:	0c 2e       	mov	r0, r28
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <print_bin+0x34>
     3be:	95 95       	asr	r25
     3c0:	87 95       	ror	r24
     3c2:	0a 94       	dec	r0
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <print_bin+0x30>
     3c6:	c0 96       	adiw	r24, 0x30	; 48
     3c8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <putchar>
     3cc:	21 97       	sbiw	r28, 0x01	; 1
	
	//OSCAL set by the bootloader.
}

void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	cf 3f       	cpi	r28, 0xFF	; 255
     3d2:	d8 07       	cpc	r29, r24
     3d4:	49 f7       	brne	.-46     	; 0x3a8 <print_bin+0x1a>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	08 95       	ret

000003e4 <copysign>:
     The copysign() function returns \a __x but with the sign of \a __y.
     They work even if \a __x or \a __y are NaN or zero.
 */
__ATTR_CONST__ extern inline double copysign (double __x, double __y)
{
    __asm__ (
     3e4:	57 fb       	bst	r21, 7
     3e6:	97 f9       	bld	r25, 7
	"bst	%D2, 7	\n\t"
	"bld	%D0, 7	"
	: "=r" (__x)
	: "0" (__x), "r" (__y) );
    return __x;
}
     3e8:	08 95       	ret

000003ea <isfinite>:
     not plus or minus infinity, and not NaN.
  */
__ATTR_CONST__ extern inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
     3ea:	68 2f       	mov	r22, r24
     3ec:	66 0f       	add	r22, r22
     3ee:	69 2f       	mov	r22, r25
     3f0:	66 1f       	adc	r22, r22
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	6f 3f       	cpi	r22, 0xFF	; 255
     3f8:	11 f0       	breq	.+4      	; 0x3fe <isfinite+0x14>
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	30 e0       	ldi	r19, 0x00	; 0
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    return __exp != 0xff;
}
     3fe:	c9 01       	movw	r24, r18
     400:	08 95       	ret

00000402 <max>:
#include "joystick.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
     402:	86 2f       	mov	r24, r22

void clock_init(void) {
	
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
     404:	08 95       	ret

00000406 <adc_get_val>:
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
	cli();
     406:	e8 2f       	mov	r30, r24
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ee 0f       	add	r30, r30
     40c:	ff 1f       	adc	r31, r31
     40e:	df 01       	movw	r26, r30
     410:	a4 54       	subi	r26, 0x44	; 68
     412:	be 4f       	sbci	r27, 0xFE	; 254
     414:	eb 53       	subi	r30, 0x3B	; 59
     416:	fe 4f       	sbci	r31, 0xFE	; 254
     418:	20 81       	ld	r18, Z
     41a:	31 81       	ldd	r19, Z+1	; 0x01
     41c:	8d 91       	ld	r24, X+
     41e:	9c 91       	ld	r25, X
     420:	28 0f       	add	r18, r24
     422:	39 1f       	adc	r19, r25
	power_lcd_disable();
     424:	c9 01       	movw	r24, r18
     426:	08 95       	ret

00000428 <adc_calibrate_clear>:
				adc_vc[i]=adc_get_val(i);
			}
			
			uint8_t  maxi=channel_amt;
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
     428:	10 92 c6 01 	sts	0x01C6, r1
     42c:	10 92 c5 01 	sts	0x01C5, r1
     430:	10 92 c8 01 	sts	0x01C8, r1
     434:	10 92 c7 01 	sts	0x01C7, r1
     438:	10 92 ca 01 	sts	0x01CA, r1
     43c:	10 92 c9 01 	sts	0x01C9, r1
     440:	10 92 cc 01 	sts	0x01CC, r1
     444:	10 92 cb 01 	sts	0x01CB, r1
				if (adc_vc[i]>maxv) {
     448:	10 92 35 01 	sts	0x0135, r1
					maxi=i;
     44c:	08 95       	ret

0000044e <adc_set_channel>:
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
				dir=FWD;
			}
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     44e:	ac e7       	ldi	r26, 0x7C	; 124
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	9c 91       	ld	r25, X
     454:	ee e0       	ldi	r30, 0x0E	; 14
     456:	f1 e0       	ldi	r31, 0x01	; 1
     458:	e8 0f       	add	r30, r24
     45a:	f1 1d       	adc	r31, r1
     45c:	90 7e       	andi	r25, 0xE0	; 224
     45e:	80 81       	ld	r24, Z
     460:	98 2b       	or	r25, r24
     462:	9c 93       	st	X, r25
				//lf_full_speed();
				dir=FWD;
			}
     464:	08 95       	ret

00000466 <__vector_19>:
			*/

			_delay_ms(200);
     466:	1f 92       	push	r1
     468:	0f 92       	push	r0
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	0f 92       	push	r0
     46e:	11 24       	eor	r1, r1
     470:	2f 93       	push	r18
     472:	3f 93       	push	r19
     474:	4f 93       	push	r20
     476:	8f 93       	push	r24
     478:	9f 93       	push	r25
     47a:	af 93       	push	r26
     47c:	bf 93       	push	r27
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
			// do at every adc calc or pwm vector.
		}
		else if	(c_mode==TEST) {
     482:	40 91 78 00 	lds	r20, 0x0078
			if (initial) {
     486:	30 91 79 00 	lds	r19, 0x0079
				motor_mode(MOTOR_L_FWD,LEFT);
				motor_mode(MOTOR_R_FWD,RIGHT);
				initial=false;
     48a:	80 91 34 01 	lds	r24, 0x0134
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	80 93 34 01 	sts	0x0134, r24
			}
			static uint16_t sp;
			
     494:	20 91 cd 01 	lds	r18, 0x01CD
     498:	22 23       	and	r18, r18
     49a:	11 f4       	brne	.+4      	; 0x4a0 <__vector_19+0x3a>
     49c:	e3 e0       	ldi	r30, 0x03	; 3
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__vector_19+0x3e>
			motor_set_speed(sp,LEFT);
     4a0:	e2 2f       	mov	r30, r18
     4a2:	e1 50       	subi	r30, 0x01	; 1
			motor_set_speed(sp,RIGHT);
			_delay_ms(2);
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	df 01       	movw	r26, r30
     4ac:	a4 54       	subi	r26, 0x44	; 68
     4ae:	be 4f       	sbci	r27, 0xFE	; 254
     4b0:	93 2f       	mov	r25, r19
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	84 0f       	add	r24, r20
     4b6:	91 1d       	adc	r25, r1
     4b8:	8d 93       	st	X+, r24
     4ba:	9c 93       	st	X, r25
			//if (!(sp%0x100))
     4bc:	e2 53       	subi	r30, 0x32	; 50
     4be:	fe 4f       	sbci	r31, 0xFE	; 254
     4c0:	80 81       	ld	r24, Z
     4c2:	91 81       	ldd	r25, Z+1	; 0x01
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	91 83       	std	Z+1, r25	; 0x01
     4c8:	80 83       	st	Z, r24
			//	printf("\nsp=%x",sp);
			++sp;
		}
     4ca:	82 2f       	mov	r24, r18
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	80 93 cd 01 	sts	0x01CD, r24
     4d2:	84 30       	cpi	r24, 0x04	; 4
     4d4:	10 f0       	brcs	.+4      	; 0x4da <__vector_19+0x74>
     4d6:	10 92 cd 01 	sts	0x01CD, r1
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
				dir=FWD;
			}
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     4da:	80 91 7c 00 	lds	r24, 0x007C
     4de:	e0 91 cd 01 	lds	r30, 0x01CD
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	e2 5f       	subi	r30, 0xF2	; 242
     4e6:	fe 4f       	sbci	r31, 0xFE	; 254
     4e8:	80 7e       	andi	r24, 0xE0	; 224
     4ea:	90 81       	ld	r25, Z
     4ec:	89 2b       	or	r24, r25
     4ee:	80 93 7c 00 	sts	0x007C, r24
     4f2:	ff 91       	pop	r31
     4f4:	ef 91       	pop	r30
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	0f be       	out	0x3f, r0	; 63
     508:	0f 90       	pop	r0
     50a:	1f 90       	pop	r1
     50c:	18 95       	reti

0000050e <adc_init>:
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
				}
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
			}
     516:	8c ea       	ldi	r24, 0xAC	; 172
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
			
			#ifdef debug
     522:	e4 e6       	ldi	r30, 0x64	; 100
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	80 81       	ld	r24, Z
     528:	8e 7f       	andi	r24, 0xFE	; 254
     52a:	80 83       	st	Z, r24
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif
     52c:	0c e7       	ldi	r16, 0x7C	; 124
     52e:	10 e0       	ldi	r17, 0x00	; 0
     530:	f8 01       	movw	r30, r16
     532:	80 81       	ld	r24, Z
     534:	80 64       	ori	r24, 0x40	; 64
     536:	80 83       	st	Z, r24

     538:	80 81       	ld	r24, Z
     53a:	8f 77       	andi	r24, 0x7F	; 127
     53c:	80 83       	st	Z, r24
			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
			
			// Correction needed for even numbers of sensors.
			#if (!(channel_amt%2))
     53e:	2a e7       	ldi	r18, 0x7A	; 122
     540:	e2 2e       	mov	r14, r18
     542:	f1 2c       	mov	r15, r1
     544:	f7 01       	movw	r30, r14
     546:	80 81       	ld	r24, Z
     548:	88 6a       	ori	r24, 0xA8	; 168
     54a:	80 83       	st	Z, r24
			if (turn_i>0)
     54c:	80 81       	ld	r24, Z
     54e:	88 7f       	andi	r24, 0xF8	; 248
     550:	86 60       	ori	r24, 0x06	; 6
     552:	80 83       	st	Z, r24
				++turn_i;	
			#endif

     554:	eb e7       	ldi	r30, 0x7B	; 123
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	80 68       	ori	r24, 0x80	; 128
     55c:	80 83       	st	Z, r24
			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     55e:	80 81       	ld	r24, Z
     560:	88 7f       	andi	r24, 0xF8	; 248
     562:	80 83       	st	Z, r24
			
			
			//0=LEFT, 3=RIGHT
     564:	ee e7       	ldi	r30, 0x7E	; 126
     566:	f0 e0       	ldi	r31, 0x00	; 0
     568:	80 81       	ld	r24, Z
     56a:	80 6f       	ori	r24, 0xF0	; 240
     56c:	80 83       	st	Z, r24
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
     56e:	83 b7       	in	r24, 0x33	; 51
     570:	81 7f       	andi	r24, 0xF1	; 241
     572:	82 60       	ori	r24, 0x02	; 2
     574:	83 bf       	out	0x33, r24	; 51
				lf_turn_inc(LF_INC_LARGE,NEG);
     576:	8e e8       	ldi	r24, 0x8E	; 142
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	9f 93       	push	r25
     57c:	8f 93       	push	r24
     57e:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
				dir=LEFT;
     582:	20 91 cd 01 	lds	r18, 0x01CD
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
				dir=FWD;
			}
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     586:	f8 01       	movw	r30, r16
     588:	80 81       	ld	r24, Z
     58a:	ae e0       	ldi	r26, 0x0E	; 14
     58c:	b1 e0       	ldi	r27, 0x01	; 1
     58e:	fd 01       	movw	r30, r26
     590:	e2 0f       	add	r30, r18
     592:	f1 1d       	adc	r31, r1
     594:	80 7e       	andi	r24, 0xE0	; 224
     596:	90 81       	ld	r25, Z
     598:	89 2b       	or	r24, r25
     59a:	f8 01       	movw	r30, r16
     59c:	80 83       	st	Z, r24
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
     59e:	f7 01       	movw	r30, r14
     5a0:	80 81       	ld	r24, Z
     5a2:	80 64       	ori	r24, 0x40	; 64
     5a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <adc_init+0x9c>
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
     5ae:	2f 5f       	subi	r18, 0xFF	; 255
     5b0:	20 93 cd 01 	sts	0x01CD, r18
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
				dir=FWD;
			}
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     5b4:	f8 01       	movw	r30, r16
     5b6:	80 81       	ld	r24, Z
     5b8:	a2 0f       	add	r26, r18
     5ba:	b1 1d       	adc	r27, r1
     5bc:	80 7e       	andi	r24, 0xE0	; 224
     5be:	9c 91       	ld	r25, X
     5c0:	89 2b       	or	r24, r25
     5c2:	80 83       	st	Z, r24
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
			}
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,POS);
     5c4:	86 e8       	ldi	r24, 0x86	; 134
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     5d0:	8d b7       	in	r24, 0x3d	; 61
     5d2:	9e b7       	in	r25, 0x3e	; 62
     5d4:	06 96       	adiw	r24, 0x06	; 6
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	9e bf       	out	0x3e, r25	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	8d bf       	out	0x3d, r24	; 61
				dir=RIGHT;
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	ff 90       	pop	r15
     5e6:	ef 90       	pop	r14
     5e8:	08 95       	ret

000005ea <adc_calibrate_store>:
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};

			uint16_t adc_vc[channel_amt];
			for (uint8_t i=0;i<channel_amt;++i) {
				adc_vc[i]=adc_get_val(i);
     5ea:	87 eb       	ldi	r24, 0xB7	; 183
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	9f 93       	push	r25
     5f0:	8f 93       	push	r24
     5f2:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
			}
     5fa:	08 95       	ret

000005fc <adc_calibrate_update>:
void init(void) {
	cli();
	power_lcd_disable();
	power_spi_disable();
	clock_init();
	joy_init();
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	ff 92       	push	r15
     604:	0f 93       	push	r16
     606:	1f 93       	push	r17
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	60 97       	sbiw	r28, 0x10	; 16
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
	usart_init();
	adc_init();
	timers_init();
     61c:	de 01       	movw	r26, r28
     61e:	19 96       	adiw	r26, 0x09	; 9
     620:	ec eb       	ldi	r30, 0xBC	; 188
     622:	f1 e0       	ldi	r31, 0x01	; 1
     624:	88 e0       	ldi	r24, 0x08	; 8
     626:	01 90       	ld	r0, Z+
     628:	0d 92       	st	X+, r0
     62a:	81 50       	subi	r24, 0x01	; 1
     62c:	e1 f7       	brne	.-8      	; 0x626 <adc_calibrate_update+0x2a>



int main(void) {
	init();
	c_mode=WAIT;
     62e:	49 85       	ldd	r20, Y+9	; 0x09
     630:	5a 85       	ldd	r21, Y+10	; 0x0a
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	8e 01       	movw	r16, r28
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	be 01       	movw	r22, r28
     63e:	67 5f       	subi	r22, 0xF7	; 247
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	d8 01       	movw	r26, r16
     644:	a2 0f       	add	r26, r18
     646:	b3 1f       	adc	r27, r19
     648:	fb 01       	movw	r30, r22
     64a:	e2 0f       	add	r30, r18
     64c:	f3 1f       	adc	r31, r19
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
     652:	fa 01       	movw	r30, r20
     654:	e8 1b       	sub	r30, r24
     656:	f9 0b       	sbc	r31, r25
     658:	ed 93       	st	X+, r30
     65a:	fc 93       	st	X, r31
     65c:	2e 5f       	subi	r18, 0xFE	; 254
     65e:	3f 4f       	sbci	r19, 0xFF	; 255
}



int main(void) {
	init();
     660:	28 30       	cpi	r18, 0x08	; 8
     662:	31 05       	cpc	r19, r1
     664:	71 f7       	brne	.-36     	; 0x642 <adc_calibrate_update+0x46>
	c_mode=WAIT;
	initial=true;
	
		
     666:	80 91 35 01 	lds	r24, 0x0135
     66a:	9e 01       	movw	r18, r28
     66c:	2f 5f       	subi	r18, 0xFF	; 255
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	88 23       	and	r24, r24
     672:	49 f4       	brne	.+18     	; 0x686 <adc_calibrate_update+0x8a>
	for(;;) {
     674:	a5 ec       	ldi	r26, 0xC5	; 197
     676:	b1 e0       	ldi	r27, 0x01	; 1
     678:	f9 01       	movw	r30, r18
     67a:	88 e0       	ldi	r24, 0x08	; 8
     67c:	01 90       	ld	r0, Z+
     67e:	0d 92       	st	X+, r0
     680:	81 50       	subi	r24, 0x01	; 1
     682:	e1 f7       	brne	.-8      	; 0x67c <adc_calibrate_update+0x80>
     684:	22 c0       	rjmp	.+68     	; 0x6ca <adc_calibrate_update+0xce>
     686:	e5 ec       	ldi	r30, 0xC5	; 197
     688:	f1 e0       	ldi	r31, 0x01	; 1
     68a:	79 01       	movw	r14, r18
		if	(c_mode==FOLLOW) {	
			if (initial) {
				lf_full_speed();
     68c:	08 2f       	mov	r16, r24
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	68 01       	movw	r12, r16
     692:	08 94       	sec
     694:	c1 1c       	adc	r12, r1
     696:	d1 1c       	adc	r13, r1
     698:	80 81       	ld	r24, Z
     69a:	91 81       	ldd	r25, Z+1	; 0x01
     69c:	9c 01       	movw	r18, r24
     69e:	02 9f       	mul	r16, r18
     6a0:	c0 01       	movw	r24, r0
     6a2:	03 9f       	mul	r16, r19
     6a4:	90 0d       	add	r25, r0
     6a6:	12 9f       	mul	r17, r18
     6a8:	90 0d       	add	r25, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	d7 01       	movw	r26, r14
     6ae:	2d 91       	ld	r18, X+
     6b0:	3d 91       	ld	r19, X+
     6b2:	7d 01       	movw	r14, r26
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	b6 01       	movw	r22, r12
     6ba:	0e 94 6d 0b 	call	0x16da	; 0x16da <__divmodhi4>
     6be:	61 93       	st	Z+, r22
     6c0:	71 93       	st	Z+, r23
	initial=true;
	
		
	for(;;) {
		if	(c_mode==FOLLOW) {	
			if (initial) {
     6c2:	b1 e0       	ldi	r27, 0x01	; 1
     6c4:	ed 3c       	cpi	r30, 0xCD	; 205
     6c6:	fb 07       	cpc	r31, r27
     6c8:	39 f7       	brne	.-50     	; 0x698 <adc_calibrate_update+0x9c>
				lf_full_speed();
				initial=false;
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};
     6ca:	80 91 35 01 	lds	r24, 0x0135
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	80 93 35 01 	sts	0x0135, r24

     6d4:	60 96       	adiw	r28, 0x10	; 16
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	08 95       	ret

000006f2 <print_adc_calibration>:
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}

     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
void  print_bin(uint8_t inp) {
     6f6:	8b ef       	ldi	r24, 0xFB	; 251
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	9f 93       	push	r25
     6fc:	8f 93       	push	r24
     6fe:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     702:	80 91 c5 01 	lds	r24, 0x01C5
     706:	90 91 c6 01 	lds	r25, 0x01C6
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	1f 92       	push	r1
     710:	1f 92       	push	r1
     712:	00 e0       	ldi	r16, 0x00	; 0
     714:	11 e0       	ldi	r17, 0x01	; 1
     716:	1f 93       	push	r17
     718:	0f 93       	push	r16
     71a:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     71e:	80 91 c7 01 	lds	r24, 0x01C7
     722:	90 91 c8 01 	lds	r25, 0x01C8
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	1f 93       	push	r17
     734:	0f 93       	push	r16
     736:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     73a:	80 91 c9 01 	lds	r24, 0x01C9
     73e:	90 91 ca 01 	lds	r25, 0x01CA
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	1f 93       	push	r17
     750:	0f 93       	push	r16
     752:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     756:	80 91 cb 01 	lds	r24, 0x01CB
     75a:	90 91 cc 01 	lds	r25, 0x01CC
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	1f 93       	push	r17
     76c:	0f 93       	push	r16
     76e:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     772:	8d b7       	in	r24, 0x3d	; 61
     774:	9e b7       	in	r25, 0x3e	; 62
     776:	4a 96       	adiw	r24, 0x1a	; 26
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	9e bf       	out	0x3e, r25	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	8d bf       	out	0x3d, r24	; 61
	}
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <print_adc_values>:
	
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
		clock_prescale_set(clock_div_2);	
     798:	87 e2       	ldi	r24, 0x27	; 39
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     7a4:	80 91 bc 01 	lds	r24, 0x01BC
     7a8:	90 91 bd 01 	lds	r25, 0x01BD
     7ac:	9f 93       	push	r25
     7ae:	8f 93       	push	r24
     7b0:	1f 92       	push	r1
     7b2:	1f 92       	push	r1
     7b4:	00 e0       	ldi	r16, 0x00	; 0
     7b6:	11 e0       	ldi	r17, 0x01	; 1
     7b8:	1f 93       	push	r17
     7ba:	0f 93       	push	r16
     7bc:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     7c0:	80 91 be 01 	lds	r24, 0x01BE
     7c4:	90 91 bf 01 	lds	r25, 0x01BF
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	1f 93       	push	r17
     7d6:	0f 93       	push	r16
     7d8:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     7dc:	80 91 c0 01 	lds	r24, 0x01C0
     7e0:	90 91 c1 01 	lds	r25, 0x01C1
     7e4:	9f 93       	push	r25
     7e6:	8f 93       	push	r24
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9f 93       	push	r25
     7ee:	8f 93       	push	r24
     7f0:	1f 93       	push	r17
     7f2:	0f 93       	push	r16
     7f4:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     7f8:	80 91 c2 01 	lds	r24, 0x01C2
     7fc:	90 91 c3 01 	lds	r25, 0x01C3
     800:	9f 93       	push	r25
     802:	8f 93       	push	r24
     804:	83 e0       	ldi	r24, 0x03	; 3
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	1f 93       	push	r17
     80e:	0f 93       	push	r16
     810:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
	#else
		#error "F_CPU Unrecognized"
     814:	82 e1       	ldi	r24, 0x12	; 18
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	9f 93       	push	r25
     81a:	8f 93       	push	r24
     81c:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     820:	4c eb       	ldi	r20, 0xBC	; 188
     822:	c4 2e       	mov	r12, r20
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	d4 2e       	mov	r13, r20
     828:	35 ec       	ldi	r19, 0xC5	; 197
     82a:	e3 2e       	mov	r14, r19
     82c:	31 e0       	ldi	r19, 0x01	; 1
     82e:	f3 2e       	mov	r15, r19
     830:	c0 e0       	ldi	r28, 0x00	; 0
     832:	d0 e0       	ldi	r29, 0x00	; 0
     834:	8d b7       	in	r24, 0x3d	; 61
     836:	9e b7       	in	r25, 0x3e	; 62
     838:	4c 96       	adiw	r24, 0x1c	; 28
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	9e bf       	out	0x3e, r25	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	8d bf       	out	0x3d, r24	; 61
	#endif
	
     844:	f7 01       	movw	r30, r14
     846:	81 91       	ld	r24, Z+
     848:	91 91       	ld	r25, Z+
     84a:	7f 01       	movw	r14, r30
     84c:	f6 01       	movw	r30, r12
     84e:	21 91       	ld	r18, Z+
     850:	31 91       	ld	r19, Z+
     852:	6f 01       	movw	r12, r30
     854:	82 0f       	add	r24, r18
     856:	93 1f       	adc	r25, r19
     858:	9f 93       	push	r25
     85a:	8f 93       	push	r24
     85c:	df 93       	push	r29
     85e:	cf 93       	push	r28
     860:	1f 93       	push	r17
     862:	0f 93       	push	r16
     864:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
     868:	21 96       	adiw	r28, 0x01	; 1
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
	#endif
     86a:	8d b7       	in	r24, 0x3d	; 61
     86c:	9e b7       	in	r25, 0x3e	; 62
     86e:	06 96       	adiw	r24, 0x06	; 6
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	9e bf       	out	0x3e, r25	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	8d bf       	out	0x3d, r24	; 61
     87a:	c4 30       	cpi	r28, 0x04	; 4
     87c:	d1 05       	cpc	r29, r1
     87e:	11 f7       	brne	.-60     	; 0x844 <print_adc_values+0xbc>
	
	//OSCAL set by the bootloader.
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	08 95       	ret

00000892 <usart0_putchar>:
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
			
			// Correction needed for even numbers of sensors.
			#if (!(channel_amt%2))
			if (turn_i>0)
				++turn_i;	
     892:	1f 93       	push	r17
     894:	18 2f       	mov	r17, r24
			#endif

     896:	8a 30       	cpi	r24, 0x0A	; 10
     898:	19 f4       	brne	.+6      	; 0x8a0 <usart0_putchar+0xe>
			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     89a:	8d e0       	ldi	r24, 0x0D	; 13
     89c:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
			
     8a0:	80 91 c0 00 	lds	r24, 0x00C0
     8a4:	85 ff       	sbrs	r24, 5
     8a6:	fc cf       	rjmp	.-8      	; 0x8a0 <usart0_putchar+0xe>
			
     8a8:	10 93 c6 00 	sts	0x00C6, r17
			//0=LEFT, 3=RIGHT
			/*
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <usart0_getchar>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/pgmspace.h>


     8b4:	ef 92       	push	r14
     8b6:	ff 92       	push	r15
     8b8:	0f 93       	push	r16
     8ba:	1f 93       	push	r17
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	7c 01       	movw	r14, r24
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
     8c2:	80 91 36 01 	lds	r24, 0x0136
     8c6:	90 91 37 01 	lds	r25, 0x0137
     8ca:	89 2b       	or	r24, r25
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <usart0_getchar+0x1c>
     8ce:	a0 c0       	rjmp	.+320    	; 0xa10 <usart0_getchar+0x15c>
     8d0:	08 e3       	ldi	r16, 0x38	; 56
     8d2:	11 e0       	ldi	r17, 0x01	; 1
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     8d4:	80 91 c0 00 	lds	r24, 0x00C0
     8d8:	87 ff       	sbrs	r24, 7
     8da:	fc cf       	rjmp	.-8      	; 0x8d4 <usart0_getchar+0x20>
	#else
     8dc:	80 91 c0 00 	lds	r24, 0x00C0
     8e0:	84 ff       	sbrs	r24, 4
     8e2:	03 c0       	rjmp	.+6      	; 0x8ea <usart0_getchar+0x36>
     8e4:	2e ef       	ldi	r18, 0xFE	; 254
     8e6:	3f ef       	ldi	r19, 0xFF	; 255
     8e8:	a7 c0       	rjmp	.+334    	; 0xa38 <usart0_getchar+0x184>
		#error "F_CPU Unrecognized"
     8ea:	80 91 c0 00 	lds	r24, 0x00C0
     8ee:	83 fd       	sbrc	r24, 3
     8f0:	a1 c0       	rjmp	.+322    	; 0xa34 <usart0_getchar+0x180>
	#endif
     8f2:	90 91 c6 00 	lds	r25, 0x00C6
	
	//OSCAL set by the bootloader.
     8f6:	9d 30       	cpi	r25, 0x0D	; 13
     8f8:	11 f0       	breq	.+4      	; 0x8fe <usart0_getchar+0x4a>
}
     8fa:	9a 30       	cpi	r25, 0x0A	; 10
     8fc:	69 f4       	brne	.+26     	; 0x918 <usart0_getchar+0x64>

     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	f8 01       	movw	r30, r16
     902:	80 83       	st	Z, r24
void  print_bin(uint8_t inp) {
     904:	b7 01       	movw	r22, r14
     906:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
	for(int8_t j=7; j>=0; --j) {
     90a:	88 e3       	ldi	r24, 0x38	; 56
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	90 93 37 01 	sts	0x0137, r25
     912:	80 93 36 01 	sts	0x0136, r24
     916:	7c c0       	rjmp	.+248    	; 0xa10 <usart0_getchar+0x15c>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

     918:	99 30       	cpi	r25, 0x09	; 9
     91a:	09 f4       	brne	.+2      	; 0x91e <usart0_getchar+0x6a>
     91c:	90 e2       	ldi	r25, 0x20	; 32
void init(void) {
	cli();
     91e:	89 2f       	mov	r24, r25
     920:	80 52       	subi	r24, 0x20	; 32
     922:	8f 35       	cpi	r24, 0x5F	; 95
     924:	10 f0       	brcs	.+4      	; 0x92a <usart0_getchar+0x76>
     926:	90 3a       	cpi	r25, 0xA0	; 160
     928:	78 f0       	brcs	.+30     	; 0x948 <usart0_getchar+0x94>
	power_lcd_disable();
     92a:	f1 e0       	ldi	r31, 0x01	; 1
     92c:	06 3b       	cpi	r16, 0xB6	; 182
     92e:	1f 07       	cpc	r17, r31
     930:	19 f4       	brne	.+6      	; 0x938 <usart0_getchar+0x84>
	power_spi_disable();
     932:	b7 01       	movw	r22, r14
     934:	87 e0       	ldi	r24, 0x07	; 7
     936:	05 c0       	rjmp	.+10     	; 0x942 <usart0_getchar+0x8e>
	clock_init();
	joy_init();
     938:	f8 01       	movw	r30, r16
     93a:	91 93       	st	Z+, r25
     93c:	8f 01       	movw	r16, r30
	usart_init();
     93e:	b7 01       	movw	r22, r14
     940:	89 2f       	mov	r24, r25
     942:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
     946:	c6 cf       	rjmp	.-116    	; 0x8d4 <usart0_getchar+0x20>
	adc_init();
	timers_init();
	motors_init();
	sei();
	#ifdef debug
     948:	92 31       	cpi	r25, 0x12	; 18
     94a:	39 f1       	breq	.+78     	; 0x99a <usart0_getchar+0xe6>
     94c:	93 31       	cpi	r25, 0x13	; 19
     94e:	38 f4       	brcc	.+14     	; 0x95e <usart0_getchar+0xaa>
     950:	93 30       	cpi	r25, 0x03	; 3
     952:	09 f4       	brne	.+2      	; 0x956 <usart0_getchar+0xa2>
     954:	6f c0       	rjmp	.+222    	; 0xa34 <usart0_getchar+0x180>
     956:	98 30       	cpi	r25, 0x08	; 8
     958:	09 f0       	breq	.+2      	; 0x95c <usart0_getchar+0xa8>
     95a:	bc cf       	rjmp	.-136    	; 0x8d4 <usart0_getchar+0x20>
     95c:	09 c0       	rjmp	.+18     	; 0x970 <usart0_getchar+0xbc>
     95e:	97 31       	cpi	r25, 0x17	; 23
     960:	09 f4       	brne	.+2      	; 0x964 <usart0_getchar+0xb0>
     962:	4b c0       	rjmp	.+150    	; 0x9fa <usart0_getchar+0x146>
     964:	9f 37       	cpi	r25, 0x7F	; 127
     966:	21 f0       	breq	.+8      	; 0x970 <usart0_getchar+0xbc>
     968:	95 31       	cpi	r25, 0x15	; 21
     96a:	09 f0       	breq	.+2      	; 0x96e <usart0_getchar+0xba>
     96c:	b3 cf       	rjmp	.-154    	; 0x8d4 <usart0_getchar+0x20>
     96e:	32 c0       	rjmp	.+100    	; 0x9d4 <usart0_getchar+0x120>
	printf_P(PSTR("\nInit: Done\n\n"));
	#endif
}



     970:	f1 e0       	ldi	r31, 0x01	; 1
     972:	08 33       	cpi	r16, 0x38	; 56
     974:	1f 07       	cpc	r17, r31
     976:	09 f0       	breq	.+2      	; 0x97a <usart0_getchar+0xc6>
     978:	08 f4       	brcc	.+2      	; 0x97c <usart0_getchar+0xc8>
     97a:	ac cf       	rjmp	.-168    	; 0x8d4 <usart0_getchar+0x20>
int main(void) {
     97c:	b7 01       	movw	r22, r14
     97e:	88 e0       	ldi	r24, 0x08	; 8
     980:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
	init();
     984:	b7 01       	movw	r22, r14
     986:	80 e2       	ldi	r24, 0x20	; 32
     988:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
	c_mode=WAIT;
     98c:	b7 01       	movw	r22, r14
     98e:	88 e0       	ldi	r24, 0x08	; 8
     990:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
	initial=true;
     994:	01 50       	subi	r16, 0x01	; 1
     996:	10 40       	sbci	r17, 0x00	; 0
     998:	9d cf       	rjmp	.-198    	; 0x8d4 <usart0_getchar+0x20>
	
		
	for(;;) {
		if	(c_mode==FOLLOW) {	
			if (initial) {
     99a:	b7 01       	movw	r22, r14
     99c:	8d e0       	ldi	r24, 0x0D	; 13
     99e:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
     9a2:	c8 e3       	ldi	r28, 0x38	; 56
     9a4:	d1 e0       	ldi	r29, 0x01	; 1
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <usart0_getchar+0xfc>
				lf_full_speed();
				initial=false;
     9a8:	b7 01       	movw	r22, r14
     9aa:	89 91       	ld	r24, Y+
     9ac:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
	
		
	for(;;) {
		if	(c_mode==FOLLOW) {	
			if (initial) {
				lf_full_speed();
     9b0:	c0 17       	cp	r28, r16
     9b2:	d1 07       	cpc	r29, r17
     9b4:	c8 f3       	brcs	.-14     	; 0x9a8 <usart0_getchar+0xf4>
     9b6:	8e cf       	rjmp	.-228    	; 0x8d4 <usart0_getchar+0x20>
				initial=false;
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};

			uint16_t adc_vc[channel_amt];
			for (uint8_t i=0;i<channel_amt;++i) {
     9b8:	b7 01       	movw	r22, r14
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
				adc_vc[i]=adc_get_val(i);
     9c0:	b7 01       	movw	r22, r14
     9c2:	80 e2       	ldi	r24, 0x20	; 32
     9c4:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
			}
     9c8:	b7 01       	movw	r22, r14
     9ca:	88 e0       	ldi	r24, 0x08	; 8
     9cc:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
			
     9d0:	01 50       	subi	r16, 0x01	; 1
     9d2:	10 40       	sbci	r17, 0x00	; 0
				lf_full_speed();
				initial=false;
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};

			uint16_t adc_vc[channel_amt];
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	08 33       	cpi	r16, 0x38	; 56
     9d8:	18 07       	cpc	r17, r24
     9da:	09 f0       	breq	.+2      	; 0x9de <usart0_getchar+0x12a>
     9dc:	68 f7       	brcc	.-38     	; 0x9b8 <usart0_getchar+0x104>
     9de:	7a cf       	rjmp	.-268    	; 0x8d4 <usart0_getchar+0x20>
			uint8_t  maxi=channel_amt;
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
     9e0:	b7 01       	movw	r22, r14
     9e2:	88 e0       	ldi	r24, 0x08	; 8
     9e4:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
				}
     9e8:	b7 01       	movw	r22, r14
     9ea:	80 e2       	ldi	r24, 0x20	; 32
     9ec:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
			}
     9f0:	b7 01       	movw	r22, r14
     9f2:	88 e0       	ldi	r24, 0x08	; 8
     9f4:	0e 94 49 04 	call	0x892	; 0x892 <usart0_putchar>
     9f8:	8e 01       	movw	r16, r28
			
			uint8_t  maxi=channel_amt;
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
     9fa:	e1 e0       	ldi	r30, 0x01	; 1
     9fc:	08 33       	cpi	r16, 0x38	; 56
     9fe:	1e 07       	cpc	r17, r30
     a00:	09 f0       	breq	.+2      	; 0xa04 <usart0_getchar+0x150>
     a02:	08 f4       	brcc	.+2      	; 0xa06 <usart0_getchar+0x152>
     a04:	67 cf       	rjmp	.-306    	; 0x8d4 <usart0_getchar+0x20>
     a06:	e8 01       	movw	r28, r16
     a08:	8a 91       	ld	r24, -Y
     a0a:	80 32       	cpi	r24, 0x20	; 32
     a0c:	49 f7       	brne	.-46     	; 0x9e0 <usart0_getchar+0x12c>
     a0e:	62 cf       	rjmp	.-316    	; 0x8d4 <usart0_getchar+0x20>
			#ifdef debug
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
     a10:	e0 91 36 01 	lds	r30, 0x0136
     a14:	f0 91 37 01 	lds	r31, 0x0137
     a18:	81 91       	ld	r24, Z+
     a1a:	f0 93 37 01 	sts	0x0137, r31
     a1e:	e0 93 36 01 	sts	0x0136, r30
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
     a22:	8a 30       	cpi	r24, 0x0A	; 10
     a24:	21 f4       	brne	.+8      	; 0xa2e <usart0_getchar+0x17a>
     a26:	10 92 37 01 	sts	0x0137, r1
     a2a:	10 92 36 01 	sts	0x0136, r1
			
     a2e:	28 2f       	mov	r18, r24
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <usart0_getchar+0x184>
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	3f ef       	ldi	r19, 0xFF	; 255
			// Correction needed for even numbers of sensors.
     a38:	c9 01       	movw	r24, r18
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	ff 90       	pop	r15
     a44:	ef 90       	pop	r14
     a46:	08 95       	ret

00000a48 <usart_init>:
			*/

			_delay_ms(200);
			// do at every adc calc or pwm vector.
		}
		else if	(c_mode==TEST) {
     a48:	e4 e6       	ldi	r30, 0x64	; 100
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	8d 7f       	andi	r24, 0xFD	; 253
     a50:	80 83       	st	Z, r24
			if (initial) {
				motor_mode(MOTOR_L_FWD,LEFT);
				motor_mode(MOTOR_R_FWD,RIGHT);
     a52:	89 e1       	ldi	r24, 0x19	; 25
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	90 93 c5 00 	sts	0x00C5, r25
     a5a:	80 93 c4 00 	sts	0x00C4, r24
				initial=false;
			}
			static uint16_t sp;
			
     a5e:	e0 ec       	ldi	r30, 0xC0	; 192
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	8d 7f       	andi	r24, 0xFD	; 253
     a66:	80 83       	st	Z, r24
			motor_set_speed(sp,LEFT);
			motor_set_speed(sp,RIGHT);
			_delay_ms(2);
			//if (!(sp%0x100))
			//	printf("\nsp=%x",sp);
     a68:	88 e1       	ldi	r24, 0x18	; 24
     a6a:	80 93 c1 00 	sts	0x00C1, r24
			++sp;
		}
	}	
} 
		
     a6e:	86 e0       	ldi	r24, 0x06	; 6
     a70:	80 93 c2 00 	sts	0x00C2, r24
ISR(BADISR_vect) {
	printf_P(PSTR("\n\nInvalid Interupt Enabled\n"));
     a74:	82 e1       	ldi	r24, 0x12	; 18
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	90 93 d8 01 	sts	0x01D8, r25
     a7c:	80 93 d7 01 	sts	0x01D7, r24
     a80:	90 93 da 01 	sts	0x01DA, r25
     a84:	80 93 d9 01 	sts	0x01D9, r24
}
     a88:	8c e3       	ldi	r24, 0x3C	; 60
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0

     a98:	08 95       	ret

00000a9a <__vector_9>:
     a9a:	1f 92       	push	r1
     a9c:	0f 92       	push	r0
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	0f 92       	push	r0
     aa2:	11 24       	eor	r1, r1
     aa4:	8f 93       	push	r24
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 93 b9 01 	sts	0x01B9, r24
     aac:	8f 91       	pop	r24
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti

00000ab8 <__vector_6>:
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	10 92 b9 01 	sts	0x01B9, r1
     ac6:	0f 90       	pop	r0
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	0f 90       	pop	r0
     acc:	1f 90       	pop	r1
     ace:	18 95       	reti

00000ad0 <__vector_7>:
     ad0:	1f 92       	push	r1
     ad2:	0f 92       	push	r0
     ad4:	0f b6       	in	r0, 0x3f	; 63
     ad6:	0f 92       	push	r0
     ad8:	11 24       	eor	r1, r1
     ada:	8f 93       	push	r24
     adc:	80 91 b9 01 	lds	r24, 0x01B9
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	11 f4       	brne	.+4      	; 0xae8 <__vector_7+0x18>
     ae4:	2a 98       	cbi	0x05, 2	; 5
     ae6:	01 c0       	rjmp	.+2      	; 0xaea <__vector_7+0x1a>
     ae8:	2a 9a       	sbi	0x05, 2	; 5
     aea:	8f 91       	pop	r24
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	0f 90       	pop	r0
     af2:	1f 90       	pop	r1
     af4:	18 95       	reti

00000af6 <__vector_8>:
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	0f 92       	push	r0
     afe:	11 24       	eor	r1, r1
     b00:	8f 93       	push	r24
     b02:	80 91 b9 01 	lds	r24, 0x01B9
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	11 f4       	brne	.+4      	; 0xb0e <__vector_8+0x18>
     b0a:	2b 98       	cbi	0x05, 3	; 5
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <__vector_8+0x1a>
     b0e:	2b 9a       	sbi	0x05, 3	; 5
     b10:	8f 91       	pop	r24
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <timer1_init>:

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
			
			
			//0=LEFT, 3=RIGHT
			/*
     b1c:	8b e8       	ldi	r24, 0x8B	; 139
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	9f 93       	push	r25
     b22:	8f 93       	push	r24
     b24:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
     b28:	e0 e8       	ldi	r30, 0x80	; 128
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	8f 70       	andi	r24, 0x0F	; 15
     b30:	80 83       	st	Z, r24
			}
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
			}
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
     b32:	80 81       	ld	r24, Z
     b34:	82 60       	ori	r24, 0x02	; 2
     b36:	80 83       	st	Z, r24
				lf_turn_inc(LF_INC_LARGE,POS);
     b38:	80 81       	ld	r24, Z
     b3a:	8d 7f       	andi	r24, 0xFD	; 253
     b3c:	80 83       	st	Z, r24
				dir=RIGHT;
			}
     b3e:	e1 e8       	ldi	r30, 0x81	; 129
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	80 62       	ori	r24, 0x20	; 32
     b46:	80 83       	st	Z, r24
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
     b48:	80 81       	ld	r24, Z
     b4a:	80 61       	ori	r24, 0x10	; 16
     b4c:	80 83       	st	Z, r24
				//lf_full_speed();
     b4e:	80 81       	ld	r24, Z
     b50:	87 7f       	andi	r24, 0xF7	; 247
     b52:	80 83       	st	Z, r24
				dir=FWD;
			}
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     b54:	80 81       	ld	r24, Z
     b56:	80 68       	ori	r24, 0x80	; 128
     b58:	80 83       	st	Z, r24
				//lf_full_speed();
				dir=FWD;
			}
     b5a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     b5c:	f8 94       	cli
			*/
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	90 93 87 00 	sts	0x0087, r25
     b66:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     b6a:	2f bf       	out	0x3f, r18	; 63
			if (initial) {
				motor_mode(MOTOR_L_FWD,LEFT);
				motor_mode(MOTOR_R_FWD,RIGHT);
				initial=false;
			}
			static uint16_t sp;
     b6c:	e1 e8       	ldi	r30, 0x81	; 129
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	89 7f       	andi	r24, 0xF9	; 249
     b74:	80 83       	st	Z, r24
			
     b76:	80 81       	ld	r24, Z
     b78:	81 60       	ori	r24, 0x01	; 1
     b7a:	80 83       	st	Z, r24
			motor_set_speed(sp,LEFT);
			motor_set_speed(sp,RIGHT);
			_delay_ms(2);
			//if (!(sp%0x100))
			//	printf("\nsp=%x",sp);
			++sp;
     b7c:	ef e6       	ldi	r30, 0x6F	; 111
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	87 62       	ori	r24, 0x27	; 39
     b84:	80 83       	st	Z, r24
		}
	}	
     b86:	84 b1       	in	r24, 0x04	; 4
     b88:	8c 60       	ori	r24, 0x0C	; 12
     b8a:	84 b9       	out	0x04, r24	; 4
} 
		
     b8c:	83 e8       	ldi	r24, 0x83	; 131
     b8e:	91 e0       	ldi	r25, 0x01	; 1
     b90:	9f 93       	push	r25
     b92:	8f 93       	push	r24
     b94:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
ISR(BADISR_vect) {
	printf_P(PSTR("\n\nInvalid Interupt Enabled\n"));
     ba0:	08 95       	ret

00000ba2 <__vector_5>:
			
			#ifdef debug
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	8f 93       	push	r24
     bae:	9f 93       	push	r25
			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
     bb0:	80 91 b7 01 	lds	r24, 0x01B7
     bb4:	90 91 b8 01 	lds	r25, 0x01B8
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	90 93 b8 01 	sts	0x01B8, r25
     bbe:	80 93 b7 01 	sts	0x01B7, r24
			
     bc2:	80 91 c4 01 	lds	r24, 0x01C4
     bc6:	88 23       	and	r24, r24
     bc8:	61 f4       	brne	.+24     	; 0xbe2 <__vector_5+0x40>
			// Correction needed for even numbers of sensors.
			#if (!(channel_amt%2))
			if (turn_i>0)
     bca:	1f 92       	push	r1
     bcc:	1f 92       	push	r1
     bce:	81 ea       	ldi	r24, 0xA1	; 161
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	9f 93       	push	r25
     bd4:	8f 93       	push	r24
     bd6:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
				++turn_i;	
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <timer2_init>:
#include "joystick.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
     bf0:	83 eb       	ldi	r24, 0xB3	; 179
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     bfc:	80 91 70 00 	lds	r24, 0x0070
     c00:	8c 7f       	andi	r24, 0xFC	; 252
     c02:	80 93 70 00 	sts	0x0070, r24
	#else
		#error "F_CPU Unrecognized"
	#endif
     c06:	80 91 b6 00 	lds	r24, 0x00B6
     c0a:	8f 7e       	andi	r24, 0xEF	; 239
     c0c:	80 93 b6 00 	sts	0x00B6, r24
	
     c10:	80 91 b6 00 	lds	r24, 0x00B6
     c14:	88 60       	ori	r24, 0x08	; 8
     c16:	80 93 b6 00 	sts	0x00B6, r24
	//OSCAL set by the bootloader.
}

     c1a:	10 92 b2 00 	sts	0x00B2, r1
void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     c1e:	80 91 b0 00 	lds	r24, 0x00B0
     c22:	8f 77       	andi	r24, 0x7F	; 127
     c24:	80 93 b0 00 	sts	0x00B0, r24
	power_lcd_disable();
	power_spi_disable();
	clock_init();
	joy_init();
	usart_init();
	adc_init();
     c28:	80 91 b0 00 	lds	r24, 0x00B0
     c2c:	87 7b       	andi	r24, 0xB7	; 183
     c2e:	80 93 b0 00 	sts	0x00B0, r24
	printf_P(PSTR("\nInit: Done\n\n"));
	#endif
}



     c32:	80 91 b0 00 	lds	r24, 0x00B0
     c36:	8f 7c       	andi	r24, 0xCF	; 207
     c38:	80 93 b0 00 	sts	0x00B0, r24
		if	(c_mode==FOLLOW) {	
			if (initial) {
				lf_full_speed();
				initial=false;
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};
     c3c:	80 91 b0 00 	lds	r24, 0x00B0
     c40:	85 60       	ori	r24, 0x05	; 5
     c42:	80 93 b0 00 	sts	0x00B0, r24

     c46:	80 91 b0 00 	lds	r24, 0x00B0
     c4a:	8d 7f       	andi	r24, 0xFD	; 253
     c4c:	80 93 b0 00 	sts	0x00B0, r24
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
			uint16_t adc_vc[channel_amt];
			for (uint8_t i=0;i<channel_amt;++i) {
				adc_vc[i]=adc_get_val(i);
			}
			
     c54:	80 91 b6 00 	lds	r24, 0x00B6
     c58:	82 fd       	sbrc	r24, 2
     c5a:	fc cf       	rjmp	.-8      	; 0xc54 <timer2_init+0x64>
			uint8_t  maxi=channel_amt;
     c5c:	80 91 b6 00 	lds	r24, 0x00B6
     c60:	81 fd       	sbrc	r24, 1
     c62:	fc cf       	rjmp	.-8      	; 0xc5c <timer2_init+0x6c>
			uint16_t maxv=0;
     c64:	80 91 b6 00 	lds	r24, 0x00B6
     c68:	80 fd       	sbrc	r24, 0
     c6a:	fc cf       	rjmp	.-8      	; 0xc64 <timer2_init+0x74>
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
				}
			}
     c6c:	8b ea       	ldi	r24, 0xAB	; 171
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	9f 93       	push	r25
     c72:	8f 93       	push	r24
     c74:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
			
			#ifdef debug
     c7c:	08 95       	ret

00000c7e <timers_init>:
     c7e:	8d e6       	ldi	r24, 0x6D	; 109
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     c8a:	0e 94 8e 05 	call	0xb1c	; 0xb1c <timer1_init>
     c8e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <timer2_init>
     c92:	87 e5       	ldi	r24, 0x57	; 87
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	9f 93       	push	r25
     c98:	8f 93       	push	r24
     c9a:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	08 95       	ret

00000ca8 <inc_limit>:
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
     ca8:	fc 01       	movw	r30, r24
			
     caa:	20 81       	ld	r18, Z
     cac:	31 81       	ldd	r19, Z+1	; 0x01
     cae:	42 1b       	sub	r20, r18
     cb0:	53 0b       	sbc	r21, r19
			// Correction needed for even numbers of sensors.
     cb2:	46 17       	cp	r20, r22
     cb4:	57 07       	cpc	r21, r23
     cb6:	48 f4       	brcc	.+18     	; 0xcca <inc_limit+0x22>
			#if (!(channel_amt%2))
     cb8:	24 0f       	add	r18, r20
     cba:	35 1f       	adc	r19, r21
     cbc:	31 83       	std	Z+1, r19	; 0x01
     cbe:	20 83       	st	Z, r18
			if (turn_i>0)
				++turn_i;	
     cc0:	cb 01       	movw	r24, r22
     cc2:	84 1b       	sub	r24, r20
     cc4:	95 0b       	sbc	r25, r21
     cc6:	ac 01       	movw	r20, r24
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <inc_limit+0x2e>
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     cca:	26 0f       	add	r18, r22
     ccc:	37 1f       	adc	r19, r23
     cce:	31 83       	std	Z+1, r19	; 0x01
     cd0:	20 83       	st	Z, r18
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
			
			
			//0=LEFT, 3=RIGHT
     cd6:	ca 01       	movw	r24, r20
     cd8:	08 95       	ret

00000cda <dec_limit>:
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
     cda:	fc 01       	movw	r30, r24
     cdc:	cb 01       	movw	r24, r22
				lf_turn_inc(LF_INC_LARGE,NEG);
     cde:	20 81       	ld	r18, Z
     ce0:	31 81       	ldd	r19, Z+1	; 0x01
     ce2:	b9 01       	movw	r22, r18
     ce4:	64 1b       	sub	r22, r20
     ce6:	75 0b       	sbc	r23, r21
				dir=LEFT;
     ce8:	68 17       	cp	r22, r24
     cea:	79 07       	cpc	r23, r25
     cec:	48 f4       	brcc	.+18     	; 0xd00 <dec_limit+0x26>
			}
     cee:	26 1b       	sub	r18, r22
     cf0:	37 0b       	sbc	r19, r23
     cf2:	31 83       	std	Z+1, r19	; 0x01
     cf4:	20 83       	st	Z, r18
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
     cf6:	9c 01       	movw	r18, r24
     cf8:	26 1b       	sub	r18, r22
     cfa:	37 0b       	sbc	r19, r23
     cfc:	b9 01       	movw	r22, r18
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <dec_limit+0x32>
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
     d00:	28 1b       	sub	r18, r24
     d02:	39 0b       	sbc	r19, r25
     d04:	31 83       	std	Z+1, r19	; 0x01
     d06:	20 83       	st	Z, r18
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	70 e0       	ldi	r23, 0x00	; 0
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
     d0c:	cb 01       	movw	r24, r22
     d0e:	08 95       	ret

00000d10 <motor_set_speed>:
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
	#endif
	
     d10:	66 23       	and	r22, r22
     d12:	31 f4       	brne	.+12     	; 0xd20 <motor_set_speed+0x10>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d14:	f8 94       	cli
	//OSCAL set by the bootloader.
}
     d16:	90 93 89 00 	sts	0x0089, r25
     d1a:	80 93 88 00 	sts	0x0088, r24
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <motor_set_speed+0x1e>

void  print_bin(uint8_t inp) {
     d20:	61 30       	cpi	r22, 0x01	; 1
     d22:	39 f4       	brne	.+14     	; 0xd32 <motor_set_speed+0x22>
     d24:	f8 94       	cli
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     d26:	90 93 8b 00 	sts	0x008B, r25
     d2a:	80 93 8a 00 	sts	0x008A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     d2e:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     d30:	08 95       	ret
	}
}

     d32:	8b e2       	ldi	r24, 0x2B	; 43
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	86 2f       	mov	r24, r22
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	87 ef       	ldi	r24, 0xF7	; 247
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	9f 93       	push	r25
     d48:	8f 93       	push	r24
     d4a:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     d4e:	8d b7       	in	r24, 0x3d	; 61
     d50:	9e b7       	in	r25, 0x3e	; 62
     d52:	06 96       	adiw	r24, 0x06	; 6
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	9e bf       	out	0x3e, r25	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	8d bf       	out	0x3d, r24	; 61
     d5e:	08 95       	ret

00000d60 <motor_get_speed>:
#include "timers.h"
#include "joystick.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
     d60:	28 2f       	mov	r18, r24
#include <util/delay.h>
#include <avr/pgmspace.h>
     d62:	88 23       	and	r24, r24
     d64:	31 f4       	brne	.+12     	; 0xd72 <motor_get_speed+0x12>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     d66:	f8 94       	cli


     d68:	20 91 88 00 	lds	r18, 0x0088
     d6c:	30 91 89 00 	lds	r19, 0x0089
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <motor_get_speed+0x20>
void clock_init(void) {
	
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	39 f4       	brne	.+14     	; 0xd84 <motor_get_speed+0x24>
     d76:	f8 94       	cli
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
     d78:	20 91 8a 00 	lds	r18, 0x008A
     d7c:	30 91 8b 00 	lds	r19, 0x008B
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     d80:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     d82:	18 c0       	rjmp	.+48     	; 0xdb4 <motor_get_speed+0x54>
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
     d84:	8b e1       	ldi	r24, 0x1B	; 27
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	9f 93       	push	r25
     d8a:	8f 93       	push	r24
     d8c:	82 2f       	mov	r24, r18
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9f 93       	push	r25
     d92:	8f 93       	push	r24
     d94:	85 e2       	ldi	r24, 0x25	; 37
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	9f 93       	push	r25
     d9a:	8f 93       	push	r24
     d9c:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	8d b7       	in	r24, 0x3d	; 61
     da6:	9e b7       	in	r25, 0x3e	; 62
     da8:	06 96       	adiw	r24, 0x06	; 6
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	9e bf       	out	0x3e, r25	; 62
     db0:	0f be       	out	0x3f, r0	; 63
     db2:	8d bf       	out	0x3d, r24	; 61
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
     db4:	c9 01       	movw	r24, r18
     db6:	08 95       	ret

00000db8 <lf_turn_inc>:
			}
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
			}
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	7c 01       	movw	r14, r24
     dc8:	d6 2e       	mov	r13, r22
				lf_turn_inc(LF_INC_LARGE,POS);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	0e 94 b0 06 	call	0xd60	; 0xd60 <motor_get_speed>
     dd0:	8c 01       	movw	r16, r24
				dir=RIGHT;
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0e 94 b0 06 	call	0xd60	; 0xd60 <motor_get_speed>
     dd8:	ec 01       	movw	r28, r24
			}
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	d8 16       	cp	r13, r24
     dde:	e9 f4       	brne	.+58     	; 0xe1a <lf_turn_inc+0x62>
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
			
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 ec       	ldi	r25, 0xC0	; 192
     de4:	8c 1b       	sub	r24, r28
     de6:	9d 0b       	sbc	r25, r29
			// Correction needed for even numbers of sensors.
     de8:	8e 15       	cp	r24, r14
     dea:	9f 05       	cpc	r25, r15
     dec:	30 f4       	brcc	.+12     	; 0xdfa <lf_turn_inc+0x42>
			#if (!(channel_amt%2))
			if (turn_i>0)
				++turn_i;	
     dee:	97 01       	movw	r18, r14
     df0:	28 1b       	sub	r18, r24
     df2:	39 0b       	sbc	r19, r25
     df4:	c0 e0       	ldi	r28, 0x00	; 0
     df6:	d0 ec       	ldi	r29, 0xC0	; 192
     df8:	04 c0       	rjmp	.+8      	; 0xe02 <lf_turn_inc+0x4a>
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     dfa:	ce 0d       	add	r28, r14
     dfc:	df 1d       	adc	r29, r15
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
			
			//0=LEFT, 3=RIGHT
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
     e02:	c8 01       	movw	r24, r16
     e04:	80 50       	subi	r24, 0x00	; 0
     e06:	95 40       	sbci	r25, 0x05	; 5
     e08:	82 17       	cp	r24, r18
     e0a:	93 07       	cpc	r25, r19
     e0c:	18 f4       	brcc	.+6      	; 0xe14 <lf_turn_inc+0x5c>
     e0e:	00 e0       	ldi	r16, 0x00	; 0
     e10:	15 e0       	ldi	r17, 0x05	; 5
     e12:	21 c0       	rjmp	.+66     	; 0xe56 <lf_turn_inc+0x9e>
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
     e14:	02 1b       	sub	r16, r18
     e16:	13 0b       	sbc	r17, r19
     e18:	1e c0       	rjmp	.+60     	; 0xe56 <lf_turn_inc+0x9e>
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
     e1a:	dd 20       	and	r13, r13
     e1c:	e1 f4       	brne	.+56     	; 0xe56 <lf_turn_inc+0x9e>
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
			
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 ec       	ldi	r25, 0xC0	; 192
     e22:	80 1b       	sub	r24, r16
     e24:	91 0b       	sbc	r25, r17
			// Correction needed for even numbers of sensors.
     e26:	8e 15       	cp	r24, r14
     e28:	9f 05       	cpc	r25, r15
     e2a:	30 f4       	brcc	.+12     	; 0xe38 <lf_turn_inc+0x80>
			#if (!(channel_amt%2))
			if (turn_i>0)
				++turn_i;	
     e2c:	97 01       	movw	r18, r14
     e2e:	28 1b       	sub	r18, r24
     e30:	39 0b       	sbc	r19, r25
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	10 ec       	ldi	r17, 0xC0	; 192
     e36:	04 c0       	rjmp	.+8      	; 0xe40 <lf_turn_inc+0x88>
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     e38:	0e 0d       	add	r16, r14
     e3a:	1f 1d       	adc	r17, r15
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
			
			//0=LEFT, 3=RIGHT
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
     e40:	ce 01       	movw	r24, r28
     e42:	80 50       	subi	r24, 0x00	; 0
     e44:	95 40       	sbci	r25, 0x05	; 5
     e46:	82 17       	cp	r24, r18
     e48:	93 07       	cpc	r25, r19
     e4a:	18 f4       	brcc	.+6      	; 0xe52 <lf_turn_inc+0x9a>
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
     e4e:	d5 e0       	ldi	r29, 0x05	; 5
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <lf_turn_inc+0x9e>
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
     e52:	c2 1b       	sub	r28, r18
     e54:	d3 0b       	sbc	r29, r19
				dir=RIGHT;
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
				dir=FWD;
			}
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	c8 01       	movw	r24, r16
     e5a:	0e 94 88 06 	call	0xd10	; 0xd10 <motor_set_speed>
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	ce 01       	movw	r24, r28
     e62:	0e 94 88 06 	call	0xd10	; 0xd10 <motor_set_speed>
				//lf_full_speed();
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	08 95       	ret

00000e76 <motor_mode>:
	}
}

void init(void) {
	cli();
	power_lcd_disable();
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	78 2f       	mov	r23, r24
	power_spi_disable();
	clock_init();
	joy_init();
	usart_init();
     e7c:	66 23       	and	r22, r22
     e7e:	b9 f0       	breq	.+46     	; 0xeae <motor_mode+0x38>
	adc_init();
	timers_init();
	motors_init();
	sei();
	#ifdef debug
     e80:	61 30       	cpi	r22, 0x01	; 1
     e82:	29 f4       	brne	.+10     	; 0xe8e <motor_mode+0x18>
     e84:	55 e0       	ldi	r21, 0x05	; 5
     e86:	e7 e0       	ldi	r30, 0x07	; 7
     e88:	cb eb       	ldi	r28, 0xBB	; 187
     e8a:	d1 e0       	ldi	r29, 0x01	; 1
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <motor_mode+0x40>
	printf_P(PSTR("\nInit: Done\n\n"));
	#endif
}



     e8e:	8d e3       	ldi	r24, 0x3D	; 61
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9f 93       	push	r25
     e94:	8f 93       	push	r24
     e96:	86 2f       	mov	r24, r22
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9f 93       	push	r25
     e9c:	8f 93       	push	r24
     e9e:	89 ec       	ldi	r24, 0xC9	; 201
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	9f 93       	push	r25
     ea4:	8f 93       	push	r24
     ea6:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
     eaa:	87 e0       	ldi	r24, 0x07	; 7
     eac:	6e c0       	rjmp	.+220    	; 0xf8a <motor_mode+0x114>
int main(void) {
     eae:	51 e0       	ldi	r21, 0x01	; 1
     eb0:	e3 e0       	ldi	r30, 0x03	; 3
     eb2:	ca eb       	ldi	r28, 0xBA	; 186
     eb4:	d1 e0       	ldi	r29, 0x01	; 1
	init();
	c_mode=WAIT;
	initial=true;
     eb6:	72 30       	cpi	r23, 0x02	; 2
     eb8:	a1 f4       	brne	.+40     	; 0xee2 <motor_mode+0x6c>
	
     eba:	4b b1       	in	r20, 0x0b	; 11
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	c9 01       	movw	r24, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <motor_mode+0x52>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	5a 95       	dec	r21
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <motor_mode+0x4e>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8b b9       	out	0x0b, r24	; 11
		
     ed2:	8b b1       	in	r24, 0x0b	; 11
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <motor_mode+0x64>
     ed6:	22 0f       	add	r18, r18
     ed8:	33 1f       	adc	r19, r19
     eda:	ea 95       	dec	r30
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <motor_mode+0x60>
     ede:	82 2b       	or	r24, r18
     ee0:	29 c0       	rjmp	.+82     	; 0xf34 <motor_mode+0xbe>
	for(;;) {
		if	(c_mode==FOLLOW) {	
			if (initial) {
     ee2:	71 30       	cpi	r23, 0x01	; 1
     ee4:	a1 f4       	brne	.+40     	; 0xf0e <motor_mode+0x98>
				lf_full_speed();
     ee6:	4b b1       	in	r20, 0x0b	; 11
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	9c 01       	movw	r18, r24
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <motor_mode+0x7e>
     ef0:	22 0f       	add	r18, r18
     ef2:	33 1f       	adc	r19, r19
     ef4:	5a 95       	dec	r21
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <motor_mode+0x7a>
     ef8:	42 2b       	or	r20, r18
     efa:	4b b9       	out	0x0b, r20	; 11
				initial=false;
     efc:	2b b1       	in	r18, 0x0b	; 11
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <motor_mode+0x8e>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	ea 95       	dec	r30
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <motor_mode+0x8a>
     f08:	80 95       	com	r24
     f0a:	82 23       	and	r24, r18
     f0c:	13 c0       	rjmp	.+38     	; 0xf34 <motor_mode+0xbe>
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};

     f0e:	73 30       	cpi	r23, 0x03	; 3
     f10:	99 f4       	brne	.+38     	; 0xf38 <motor_mode+0xc2>
			uint16_t adc_vc[channel_amt];
     f12:	4b b1       	in	r20, 0x0b	; 11
     f14:	21 e0       	ldi	r18, 0x01	; 1
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	c9 01       	movw	r24, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <motor_mode+0xaa>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	ea 95       	dec	r30
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <motor_mode+0xa6>
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <motor_mode+0xb4>
     f26:	22 0f       	add	r18, r18
     f28:	33 1f       	adc	r19, r19
     f2a:	5a 95       	dec	r21
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <motor_mode+0xb0>
     f2e:	82 2b       	or	r24, r18
     f30:	80 95       	com	r24
     f32:	84 23       	and	r24, r20
     f34:	8b b9       	out	0x0b, r24	; 11
     f36:	14 c0       	rjmp	.+40     	; 0xf60 <motor_mode+0xea>
			for (uint8_t i=0;i<channel_amt;++i) {
				adc_vc[i]=adc_get_val(i);
			}
     f38:	74 30       	cpi	r23, 0x04	; 4
     f3a:	99 f4       	brne	.+38     	; 0xf62 <motor_mode+0xec>
			
     f3c:	8b b1       	in	r24, 0x0b	; 11
     f3e:	21 e0       	ldi	r18, 0x01	; 1
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	d9 01       	movw	r26, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <motor_mode+0xd4>
     f46:	aa 0f       	add	r26, r26
     f48:	bb 1f       	adc	r27, r27
     f4a:	5a 95       	dec	r21
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <motor_mode+0xd0>
     f4e:	ad 01       	movw	r20, r26
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <motor_mode+0xe0>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	ea 95       	dec	r30
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <motor_mode+0xdc>
     f5a:	42 2b       	or	r20, r18
     f5c:	48 2b       	or	r20, r24
     f5e:	4b b9       	out	0x0b, r20	; 11
			uint8_t  maxi=channel_amt;
     f60:	78 83       	st	Y, r23
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
     f62:	66 23       	and	r22, r22
     f64:	11 f0       	breq	.+4      	; 0xf6a <motor_mode+0xf4>
     f66:	22 e5       	ldi	r18, 0x52	; 82
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <motor_mode+0xf6>
     f6a:	2c e4       	ldi	r18, 0x4C	; 76
				}
			}
			
			#ifdef debug
     f6c:	88 81       	ld	r24, Y
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	82 2f       	mov	r24, r18
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	9f 93       	push	r25
     f7a:	8f 93       	push	r24
     f7c:	80 e2       	ldi	r24, 0x20	; 32
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	9f 93       	push	r25
     f82:	8f 93       	push	r24
     f84:	0e 94 ab 08 	call	0x1156	; 0x1156 <printf>
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif
     f88:	88 81       	ld	r24, Y
     f8a:	2d b7       	in	r18, 0x3d	; 61
     f8c:	3e b7       	in	r19, 0x3e	; 62
     f8e:	2a 5f       	subi	r18, 0xFA	; 250
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	3e bf       	out	0x3e, r19	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	2d bf       	out	0x3d, r18	; 61

     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <lf_stop_speed>:
			_delay_ms(200);
			// do at every adc calc or pwm vector.
		}
		else if	(c_mode==TEST) {
			if (initial) {
				motor_mode(MOTOR_L_FWD,LEFT);
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	0e 94 3b 07 	call	0xe76	; 0xe76 <motor_mode>
				motor_mode(MOTOR_R_FWD,RIGHT);
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	0e 94 3b 07 	call	0xe76	; 0xe76 <motor_mode>
				initial=false;
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	95 e0       	ldi	r25, 0x05	; 5
     fb8:	0e 94 88 06 	call	0xd10	; 0xd10 <motor_set_speed>
			}
     fbc:	61 e0       	ldi	r22, 0x01	; 1
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	95 e0       	ldi	r25, 0x05	; 5
     fc2:	0e 94 88 06 	call	0xd10	; 0xd10 <motor_set_speed>
			static uint16_t sp;
     fc6:	08 95       	ret

00000fc8 <motors_init>:
			
			motor_set_speed(sp,LEFT);
			motor_set_speed(sp,RIGHT);
     fc8:	8a b1       	in	r24, 0x0a	; 10
     fca:	8a 6a       	ori	r24, 0xAA	; 170
     fcc:	8a b9       	out	0x0a, r24	; 10
			_delay_ms(2);
     fce:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lf_stop_speed>
			//if (!(sp%0x100))
     fd2:	08 95       	ret

00000fd4 <lf_full_speed>:
			}
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
				//lf_full_speed();
				dir=FWD;
			}
			*/
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	90 ec       	ldi	r25, 0xC0	; 192
     fda:	0e 94 88 06 	call	0xd10	; 0xd10 <motor_set_speed>

     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 ec       	ldi	r25, 0xC0	; 192
     fe4:	0e 94 88 06 	call	0xd10	; 0xd10 <motor_set_speed>
			_delay_ms(200);
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	0e 94 3b 07 	call	0xe76	; 0xe76 <motor_mode>
			// do at every adc calc or pwm vector.
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	0e 94 3b 07 	call	0xe76	; 0xe76 <motor_mode>
		}
     ff8:	08 95       	ret

00000ffa <joy_init>:
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

void joy_init(void) {
	// Set pins as inputs.
	DDRB&=(uint8_t)~((1<<4)|(1<<6)|(1<<7));
     ffa:	84 b1       	in	r24, 0x04	; 4
     ffc:	8f 72       	andi	r24, 0x2F	; 47
     ffe:	84 b9       	out	0x04, r24	; 4
	DDRE&=(uint8_t)~((1<<2)|(1<<3));
    1000:	8d b1       	in	r24, 0x0d	; 13
    1002:	83 7f       	andi	r24, 0xF3	; 243
    1004:	8d b9       	out	0x0d, r24	; 13
	// Enable pullup resistors.
	PORTB|=((1<<4)|(1<<6)|(1<<7));
    1006:	85 b1       	in	r24, 0x05	; 5
    1008:	80 6d       	ori	r24, 0xD0	; 208
    100a:	85 b9       	out	0x05, r24	; 5
	PORTE|=((1<<2)|(1<<3));
    100c:	8e b1       	in	r24, 0x0e	; 14
    100e:	8c 60       	ori	r24, 0x0C	; 12
    1010:	8e b9       	out	0x0e, r24	; 14
	//IN	= PINB&(1<<4)
	
	// Enable Pin Change interupts. Disable INT0
	//EIMSK|=((1<<PCIE1)|(1<<PCIE0));
	//EIMSK&=(uint8_t)~(1<<INT0);
	EIMSK=(1<<PCIE1)|(1<<PCIE0);
    1012:	80 ec       	ldi	r24, 0xC0	; 192
    1014:	8d bb       	out	0x1d, r24	; 29
	PCMSK1=(1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
    1016:	80 ed       	ldi	r24, 0xD0	; 208
    1018:	80 93 6c 00 	sts	0x006C, r24
	PCMSK0=(1<<PCINT3)|(1<<PCINT2);	
    101c:	8c e0       	ldi	r24, 0x0C	; 12
    101e:	80 93 6b 00 	sts	0x006B, r24
	
}
    1022:	08 95       	ret

00001024 <__vector_3>:
	else
		printf_P(PSTR("\n[debug] PE? Released"));
	#endif
}

ISR(PCINT1_vect) {
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	1f 93       	push	r17
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
	//PB7,4,6
	uint8_t iPINB = (uint8_t)~PINB;
    1034:	93 b1       	in	r25, 0x03	; 3
    1036:	90 95       	com	r25
	if (iPINB&((1<<7)|(1<<6)|(1<<4))) {
    1038:	19 2f       	mov	r17, r25
    103a:	89 2f       	mov	r24, r25
    103c:	80 7d       	andi	r24, 0xD0	; 208
    103e:	b9 f0       	breq	.+46     	; 0x106e <__vector_3+0x4a>
		if (iPINB&(1<<7)) {// Down
    1040:	97 ff       	sbrs	r25, 7
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <__vector_3+0x2c>
			adc_calibrate_update();
    1044:	0e 94 fe 02 	call	0x5fc	; 0x5fc <adc_calibrate_update>
			#ifdef debug
			print_adc_calibration();
    1048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <print_adc_calibration>
			print_adc_values();
    104c:	0e 94 c4 03 	call	0x788	; 0x788 <print_adc_values>
			#endif
		}
		if (iPINB&(1<<4)) {// In
    1050:	14 ff       	sbrs	r17, 4
    1052:	04 c0       	rjmp	.+8      	; 0x105c <__vector_3+0x38>
			#ifdef debug
			print_adc_calibration();
    1054:	0e 94 79 03 	call	0x6f2	; 0x6f2 <print_adc_calibration>
			print_adc_values();
    1058:	0e 94 c4 03 	call	0x788	; 0x788 <print_adc_values>
			#endif
		}
		if (iPINB&(1<<6)) {// Up
    105c:	16 ff       	sbrs	r17, 6
    105e:	0f c0       	rjmp	.+30     	; 0x107e <__vector_3+0x5a>
			adc_calibrate_clear();
    1060:	0e 94 14 02 	call	0x428	; 0x428 <adc_calibrate_clear>
			#ifdef debug
			print_adc_calibration();
    1064:	0e 94 79 03 	call	0x6f2	; 0x6f2 <print_adc_calibration>
			print_adc_values();
    1068:	0e 94 c4 03 	call	0x788	; 0x788 <print_adc_values>
    106c:	08 c0       	rjmp	.+16     	; 0x107e <__vector_3+0x5a>
			#endif
		}
	}
	#ifdef debug
	else
		printf_P(PSTR("\n[debug] PB? Released"));
    106e:	83 e5       	ldi	r24, 0x53	; 83
    1070:	92 e0       	ldi	r25, 0x02	; 2
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
	#endif
}
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	1f 91       	pop	r17
    1084:	0f 90       	pop	r0
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	0f 90       	pop	r0
    108a:	1f 90       	pop	r1
    108c:	18 95       	reti

0000108e <__vector_2>:
	PCMSK1=(1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
	PCMSK0=(1<<PCINT3)|(1<<PCINT2);	
	
}

ISR(PCINT0_vect) {
    108e:	1f 92       	push	r1
    1090:	0f 92       	push	r0
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	0f 92       	push	r0
    1096:	11 24       	eor	r1, r1
    1098:	8f 93       	push	r24
    109a:	9f 93       	push	r25
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
	//PE2,3
	uint8_t iPINE = (uint8_t)~PINE;
    10a0:	8c b1       	in	r24, 0x0c	; 12
	if (iPINE&((1<<2)|(1<<3))) {
    10a2:	80 95       	com	r24
    10a4:	c8 2f       	mov	r28, r24
    10a6:	d0 e0       	ldi	r29, 0x00	; 0
    10a8:	ce 01       	movw	r24, r28
    10aa:	8c 70       	andi	r24, 0x0C	; 12
    10ac:	90 70       	andi	r25, 0x00	; 0
    10ae:	89 2b       	or	r24, r25
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <__vector_2+0x26>
    10b2:	40 c0       	rjmp	.+128    	; 0x1134 <__vector_2+0xa6>
		if (iPINE&(1<<2)) {// Left
    10b4:	c2 ff       	sbrs	r28, 2
    10b6:	1d c0       	rjmp	.+58     	; 0x10f2 <__vector_2+0x64>
			if (c_mode!=WAIT) {
    10b8:	80 91 c4 01 	lds	r24, 0x01C4
    10bc:	88 23       	and	r24, r24
    10be:	29 f0       	breq	.+10     	; 0x10ca <__vector_2+0x3c>
				c_mode=WAIT;
    10c0:	10 92 c4 01 	sts	0x01C4, r1
				lf_stop_speed();
    10c4:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lf_stop_speed>
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <__vector_2+0x46>
			}
			else {
				initial=true;
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	80 93 d6 01 	sts	0x01D6, r24
				c_mode=TEST;
    10d0:	80 93 c4 01 	sts	0x01C4, r24
			}
			#ifdef debug
			printf_P(PSTR("\nCurrent Mode (T/W) = %d"),c_mode);
    10d4:	80 91 c4 01 	lds	r24, 0x01C4
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	9f 93       	push	r25
    10dc:	8f 93       	push	r24
    10de:	87 e9       	ldi	r24, 0x97	; 151
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	9f 93       	push	r25
    10e4:	8f 93       	push	r24
    10e6:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
			#endif
		}
		if (iPINE&(1<<3)) {// Right
    10f2:	c3 ff       	sbrs	r28, 3
    10f4:	27 c0       	rjmp	.+78     	; 0x1144 <__vector_2+0xb6>
			if (c_mode!=WAIT) {
    10f6:	80 91 c4 01 	lds	r24, 0x01C4
    10fa:	88 23       	and	r24, r24
    10fc:	29 f0       	breq	.+10     	; 0x1108 <__vector_2+0x7a>
				c_mode=WAIT;
    10fe:	10 92 c4 01 	sts	0x01C4, r1
				lf_stop_speed();
    1102:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <lf_stop_speed>
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <__vector_2+0x86>
			}
			else {
				initial=true;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	80 93 d6 01 	sts	0x01D6, r24
				c_mode=FOLLOW;
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	80 93 c4 01 	sts	0x01C4, r24
			}
			#ifdef debug	
			printf_P(PSTR("\nCurrent Mode (F/W)= %d"),c_mode);
    1114:	80 91 c4 01 	lds	r24, 0x01C4
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9f 93       	push	r25
    111c:	8f 93       	push	r24
    111e:	8f e7       	ldi	r24, 0x7F	; 127
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <__vector_2+0xb6>
			#endif
		}
	}
	#ifdef debug
	else
		printf_P(PSTR("\n[debug] PE? Released"));
    1134:	89 e6       	ldi	r24, 0x69	; 105
    1136:	92 e0       	ldi	r25, 0x02	; 2
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	0e 94 c0 08 	call	0x1180	; 0x1180 <printf_P>
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
	#endif
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	9f 91       	pop	r25
    114a:	8f 91       	pop	r24
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <printf>:
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e1 eb       	ldi	r30, 0xB1	; 177
    115c:	f8 e0       	ldi	r31, 0x08	; 8
    115e:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x20>
    1162:	fe 01       	movw	r30, r28
    1164:	35 96       	adiw	r30, 0x05	; 5
    1166:	61 91       	ld	r22, Z+
    1168:	71 91       	ld	r23, Z+
    116a:	af 01       	movw	r20, r30
    116c:	80 91 d9 01 	lds	r24, 0x01D9
    1170:	90 91 da 01 	lds	r25, 0x01DA
    1174:	0e 94 ee 08 	call	0x11dc	; 0x11dc <vfprintf>
    1178:	20 96       	adiw	r28, 0x00	; 0
    117a:	e2 e0       	ldi	r30, 0x02	; 2
    117c:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x20>

00001180 <printf_P>:
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e6 ec       	ldi	r30, 0xC6	; 198
    1186:	f8 e0       	ldi	r31, 0x08	; 8
    1188:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__prologue_saves__+0x20>
    118c:	9e 01       	movw	r18, r28
    118e:	2b 5f       	subi	r18, 0xFB	; 251
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	f9 01       	movw	r30, r18
    1194:	61 91       	ld	r22, Z+
    1196:	71 91       	ld	r23, Z+
    1198:	9f 01       	movw	r18, r30
    119a:	a0 91 d9 01 	lds	r26, 0x01D9
    119e:	b0 91 da 01 	lds	r27, 0x01DA
    11a2:	fd 01       	movw	r30, r26
    11a4:	83 81       	ldd	r24, Z+3	; 0x03
    11a6:	88 60       	ori	r24, 0x08	; 8
    11a8:	83 83       	std	Z+3, r24	; 0x03
    11aa:	a9 01       	movw	r20, r18
    11ac:	80 91 d9 01 	lds	r24, 0x01D9
    11b0:	90 91 da 01 	lds	r25, 0x01DA
    11b4:	0e 94 ee 08 	call	0x11dc	; 0x11dc <vfprintf>
    11b8:	e0 91 d9 01 	lds	r30, 0x01D9
    11bc:	f0 91 da 01 	lds	r31, 0x01DA
    11c0:	23 81       	ldd	r18, Z+3	; 0x03
    11c2:	27 7f       	andi	r18, 0xF7	; 247
    11c4:	23 83       	std	Z+3, r18	; 0x03
    11c6:	20 96       	adiw	r28, 0x00	; 0
    11c8:	e2 e0       	ldi	r30, 0x02	; 2
    11ca:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__epilogue_restores__+0x20>

000011ce <putchar>:
    11ce:	60 91 d9 01 	lds	r22, 0x01D9
    11d2:	70 91 da 01 	lds	r23, 0x01DA
    11d6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    11da:	08 95       	ret

000011dc <vfprintf>:
    11dc:	ab e0       	ldi	r26, 0x0B	; 11
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	e4 ef       	ldi	r30, 0xF4	; 244
    11e2:	f8 e0       	ldi	r31, 0x08	; 8
    11e4:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__prologue_saves__>
    11e8:	3c 01       	movw	r6, r24
    11ea:	2b 01       	movw	r4, r22
    11ec:	5a 01       	movw	r10, r20
    11ee:	fc 01       	movw	r30, r24
    11f0:	17 82       	std	Z+7, r1	; 0x07
    11f2:	16 82       	std	Z+6, r1	; 0x06
    11f4:	83 81       	ldd	r24, Z+3	; 0x03
    11f6:	81 fd       	sbrc	r24, 1
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <vfprintf+0x24>
    11fa:	6f ef       	ldi	r22, 0xFF	; 255
    11fc:	7f ef       	ldi	r23, 0xFF	; 255
    11fe:	c8 c1       	rjmp	.+912    	; 0x1590 <vfprintf+0x3b4>
    1200:	9a e0       	ldi	r25, 0x0A	; 10
    1202:	89 2e       	mov	r8, r25
    1204:	1e 01       	movw	r2, r28
    1206:	08 94       	sec
    1208:	21 1c       	adc	r2, r1
    120a:	31 1c       	adc	r3, r1
    120c:	f3 01       	movw	r30, r6
    120e:	23 81       	ldd	r18, Z+3	; 0x03
    1210:	f2 01       	movw	r30, r4
    1212:	23 fd       	sbrc	r18, 3
    1214:	85 91       	lpm	r24, Z+
    1216:	23 ff       	sbrs	r18, 3
    1218:	81 91       	ld	r24, Z+
    121a:	2f 01       	movw	r4, r30
    121c:	88 23       	and	r24, r24
    121e:	09 f4       	brne	.+2      	; 0x1222 <vfprintf+0x46>
    1220:	b4 c1       	rjmp	.+872    	; 0x158a <vfprintf+0x3ae>
    1222:	85 32       	cpi	r24, 0x25	; 37
    1224:	39 f4       	brne	.+14     	; 0x1234 <vfprintf+0x58>
    1226:	23 fd       	sbrc	r18, 3
    1228:	85 91       	lpm	r24, Z+
    122a:	23 ff       	sbrs	r18, 3
    122c:	81 91       	ld	r24, Z+
    122e:	2f 01       	movw	r4, r30
    1230:	85 32       	cpi	r24, 0x25	; 37
    1232:	29 f4       	brne	.+10     	; 0x123e <vfprintf+0x62>
    1234:	b3 01       	movw	r22, r6
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    123c:	e7 cf       	rjmp	.-50     	; 0x120c <vfprintf+0x30>
    123e:	98 2f       	mov	r25, r24
    1240:	dd 24       	eor	r13, r13
    1242:	cc 24       	eor	r12, r12
    1244:	99 24       	eor	r9, r9
    1246:	ff e1       	ldi	r31, 0x1F	; 31
    1248:	fd 15       	cp	r31, r13
    124a:	d0 f0       	brcs	.+52     	; 0x1280 <vfprintf+0xa4>
    124c:	9b 32       	cpi	r25, 0x2B	; 43
    124e:	69 f0       	breq	.+26     	; 0x126a <vfprintf+0x8e>
    1250:	9c 32       	cpi	r25, 0x2C	; 44
    1252:	28 f4       	brcc	.+10     	; 0x125e <vfprintf+0x82>
    1254:	90 32       	cpi	r25, 0x20	; 32
    1256:	59 f0       	breq	.+22     	; 0x126e <vfprintf+0x92>
    1258:	93 32       	cpi	r25, 0x23	; 35
    125a:	91 f4       	brne	.+36     	; 0x1280 <vfprintf+0xa4>
    125c:	0e c0       	rjmp	.+28     	; 0x127a <vfprintf+0x9e>
    125e:	9d 32       	cpi	r25, 0x2D	; 45
    1260:	49 f0       	breq	.+18     	; 0x1274 <vfprintf+0x98>
    1262:	90 33       	cpi	r25, 0x30	; 48
    1264:	69 f4       	brne	.+26     	; 0x1280 <vfprintf+0xa4>
    1266:	41 e0       	ldi	r20, 0x01	; 1
    1268:	24 c0       	rjmp	.+72     	; 0x12b2 <vfprintf+0xd6>
    126a:	52 e0       	ldi	r21, 0x02	; 2
    126c:	d5 2a       	or	r13, r21
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	d8 2a       	or	r13, r24
    1272:	28 c0       	rjmp	.+80     	; 0x12c4 <vfprintf+0xe8>
    1274:	98 e0       	ldi	r25, 0x08	; 8
    1276:	d9 2a       	or	r13, r25
    1278:	25 c0       	rjmp	.+74     	; 0x12c4 <vfprintf+0xe8>
    127a:	e0 e1       	ldi	r30, 0x10	; 16
    127c:	de 2a       	or	r13, r30
    127e:	22 c0       	rjmp	.+68     	; 0x12c4 <vfprintf+0xe8>
    1280:	d7 fc       	sbrc	r13, 7
    1282:	29 c0       	rjmp	.+82     	; 0x12d6 <vfprintf+0xfa>
    1284:	89 2f       	mov	r24, r25
    1286:	80 53       	subi	r24, 0x30	; 48
    1288:	8a 30       	cpi	r24, 0x0A	; 10
    128a:	70 f4       	brcc	.+28     	; 0x12a8 <vfprintf+0xcc>
    128c:	d6 fe       	sbrs	r13, 6
    128e:	05 c0       	rjmp	.+10     	; 0x129a <vfprintf+0xbe>
    1290:	98 9c       	mul	r9, r8
    1292:	90 2c       	mov	r9, r0
    1294:	11 24       	eor	r1, r1
    1296:	98 0e       	add	r9, r24
    1298:	15 c0       	rjmp	.+42     	; 0x12c4 <vfprintf+0xe8>
    129a:	c8 9c       	mul	r12, r8
    129c:	c0 2c       	mov	r12, r0
    129e:	11 24       	eor	r1, r1
    12a0:	c8 0e       	add	r12, r24
    12a2:	f0 e2       	ldi	r31, 0x20	; 32
    12a4:	df 2a       	or	r13, r31
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <vfprintf+0xe8>
    12a8:	9e 32       	cpi	r25, 0x2E	; 46
    12aa:	29 f4       	brne	.+10     	; 0x12b6 <vfprintf+0xda>
    12ac:	d6 fc       	sbrc	r13, 6
    12ae:	6d c1       	rjmp	.+730    	; 0x158a <vfprintf+0x3ae>
    12b0:	40 e4       	ldi	r20, 0x40	; 64
    12b2:	d4 2a       	or	r13, r20
    12b4:	07 c0       	rjmp	.+14     	; 0x12c4 <vfprintf+0xe8>
    12b6:	9c 36       	cpi	r25, 0x6C	; 108
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <vfprintf+0xe4>
    12ba:	50 e8       	ldi	r21, 0x80	; 128
    12bc:	d5 2a       	or	r13, r21
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <vfprintf+0xe8>
    12c0:	98 36       	cpi	r25, 0x68	; 104
    12c2:	49 f4       	brne	.+18     	; 0x12d6 <vfprintf+0xfa>
    12c4:	f2 01       	movw	r30, r4
    12c6:	23 fd       	sbrc	r18, 3
    12c8:	95 91       	lpm	r25, Z+
    12ca:	23 ff       	sbrs	r18, 3
    12cc:	91 91       	ld	r25, Z+
    12ce:	2f 01       	movw	r4, r30
    12d0:	99 23       	and	r25, r25
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <vfprintf+0xfa>
    12d4:	b8 cf       	rjmp	.-144    	; 0x1246 <vfprintf+0x6a>
    12d6:	89 2f       	mov	r24, r25
    12d8:	85 54       	subi	r24, 0x45	; 69
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	18 f0       	brcs	.+6      	; 0x12e4 <vfprintf+0x108>
    12de:	80 52       	subi	r24, 0x20	; 32
    12e0:	83 30       	cpi	r24, 0x03	; 3
    12e2:	38 f4       	brcc	.+14     	; 0x12f2 <vfprintf+0x116>
    12e4:	44 e0       	ldi	r20, 0x04	; 4
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	a4 0e       	add	r10, r20
    12ea:	b5 1e       	adc	r11, r21
    12ec:	5f e3       	ldi	r21, 0x3F	; 63
    12ee:	59 83       	std	Y+1, r21	; 0x01
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <vfprintf+0x134>
    12f2:	93 36       	cpi	r25, 0x63	; 99
    12f4:	31 f0       	breq	.+12     	; 0x1302 <vfprintf+0x126>
    12f6:	93 37       	cpi	r25, 0x73	; 115
    12f8:	79 f0       	breq	.+30     	; 0x1318 <vfprintf+0x13c>
    12fa:	93 35       	cpi	r25, 0x53	; 83
    12fc:	09 f0       	breq	.+2      	; 0x1300 <vfprintf+0x124>
    12fe:	56 c0       	rjmp	.+172    	; 0x13ac <vfprintf+0x1d0>
    1300:	20 c0       	rjmp	.+64     	; 0x1342 <vfprintf+0x166>
    1302:	f5 01       	movw	r30, r10
    1304:	80 81       	ld	r24, Z
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	42 e0       	ldi	r20, 0x02	; 2
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	a4 0e       	add	r10, r20
    130e:	b5 1e       	adc	r11, r21
    1310:	71 01       	movw	r14, r2
    1312:	01 e0       	ldi	r16, 0x01	; 1
    1314:	10 e0       	ldi	r17, 0x00	; 0
    1316:	12 c0       	rjmp	.+36     	; 0x133c <vfprintf+0x160>
    1318:	f5 01       	movw	r30, r10
    131a:	e0 80       	ld	r14, Z
    131c:	f1 80       	ldd	r15, Z+1	; 0x01
    131e:	d6 fc       	sbrc	r13, 6
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <vfprintf+0x14c>
    1322:	6f ef       	ldi	r22, 0xFF	; 255
    1324:	7f ef       	ldi	r23, 0xFF	; 255
    1326:	02 c0       	rjmp	.+4      	; 0x132c <vfprintf+0x150>
    1328:	69 2d       	mov	r22, r9
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	42 e0       	ldi	r20, 0x02	; 2
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	a4 0e       	add	r10, r20
    1332:	b5 1e       	adc	r11, r21
    1334:	c7 01       	movw	r24, r14
    1336:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <strnlen>
    133a:	8c 01       	movw	r16, r24
    133c:	5f e7       	ldi	r21, 0x7F	; 127
    133e:	d5 22       	and	r13, r21
    1340:	14 c0       	rjmp	.+40     	; 0x136a <vfprintf+0x18e>
    1342:	f5 01       	movw	r30, r10
    1344:	e0 80       	ld	r14, Z
    1346:	f1 80       	ldd	r15, Z+1	; 0x01
    1348:	d6 fc       	sbrc	r13, 6
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <vfprintf+0x176>
    134c:	6f ef       	ldi	r22, 0xFF	; 255
    134e:	7f ef       	ldi	r23, 0xFF	; 255
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <vfprintf+0x17a>
    1352:	69 2d       	mov	r22, r9
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	42 e0       	ldi	r20, 0x02	; 2
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	a4 0e       	add	r10, r20
    135c:	b5 1e       	adc	r11, r21
    135e:	c7 01       	movw	r24, r14
    1360:	0e 94 cd 0a 	call	0x159a	; 0x159a <strnlen_P>
    1364:	8c 01       	movw	r16, r24
    1366:	50 e8       	ldi	r21, 0x80	; 128
    1368:	d5 2a       	or	r13, r21
    136a:	d3 fe       	sbrs	r13, 3
    136c:	07 c0       	rjmp	.+14     	; 0x137c <vfprintf+0x1a0>
    136e:	1a c0       	rjmp	.+52     	; 0x13a4 <vfprintf+0x1c8>
    1370:	b3 01       	movw	r22, r6
    1372:	80 e2       	ldi	r24, 0x20	; 32
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    137a:	ca 94       	dec	r12
    137c:	8c 2d       	mov	r24, r12
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	08 17       	cp	r16, r24
    1382:	19 07       	cpc	r17, r25
    1384:	a8 f3       	brcs	.-22     	; 0x1370 <vfprintf+0x194>
    1386:	0e c0       	rjmp	.+28     	; 0x13a4 <vfprintf+0x1c8>
    1388:	f7 01       	movw	r30, r14
    138a:	d7 fc       	sbrc	r13, 7
    138c:	85 91       	lpm	r24, Z+
    138e:	d7 fe       	sbrs	r13, 7
    1390:	81 91       	ld	r24, Z+
    1392:	7f 01       	movw	r14, r30
    1394:	b3 01       	movw	r22, r6
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    139c:	c1 10       	cpse	r12, r1
    139e:	ca 94       	dec	r12
    13a0:	01 50       	subi	r16, 0x01	; 1
    13a2:	10 40       	sbci	r17, 0x00	; 0
    13a4:	01 15       	cp	r16, r1
    13a6:	11 05       	cpc	r17, r1
    13a8:	79 f7       	brne	.-34     	; 0x1388 <vfprintf+0x1ac>
    13aa:	ec c0       	rjmp	.+472    	; 0x1584 <vfprintf+0x3a8>
    13ac:	94 36       	cpi	r25, 0x64	; 100
    13ae:	11 f0       	breq	.+4      	; 0x13b4 <vfprintf+0x1d8>
    13b0:	99 36       	cpi	r25, 0x69	; 105
    13b2:	71 f5       	brne	.+92     	; 0x1410 <vfprintf+0x234>
    13b4:	d7 fe       	sbrs	r13, 7
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <vfprintf+0x1ec>
    13b8:	f5 01       	movw	r30, r10
    13ba:	e0 80       	ld	r14, Z
    13bc:	f1 80       	ldd	r15, Z+1	; 0x01
    13be:	02 81       	ldd	r16, Z+2	; 0x02
    13c0:	13 81       	ldd	r17, Z+3	; 0x03
    13c2:	44 e0       	ldi	r20, 0x04	; 4
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	0a c0       	rjmp	.+20     	; 0x13dc <vfprintf+0x200>
    13c8:	f5 01       	movw	r30, r10
    13ca:	80 81       	ld	r24, Z
    13cc:	91 81       	ldd	r25, Z+1	; 0x01
    13ce:	7c 01       	movw	r14, r24
    13d0:	00 27       	eor	r16, r16
    13d2:	f7 fc       	sbrc	r15, 7
    13d4:	00 95       	com	r16
    13d6:	10 2f       	mov	r17, r16
    13d8:	42 e0       	ldi	r20, 0x02	; 2
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	a4 0e       	add	r10, r20
    13de:	b5 1e       	adc	r11, r21
    13e0:	5f e6       	ldi	r21, 0x6F	; 111
    13e2:	d5 22       	and	r13, r21
    13e4:	17 ff       	sbrs	r17, 7
    13e6:	0a c0       	rjmp	.+20     	; 0x13fc <vfprintf+0x220>
    13e8:	10 95       	com	r17
    13ea:	00 95       	com	r16
    13ec:	f0 94       	com	r15
    13ee:	e0 94       	com	r14
    13f0:	e1 1c       	adc	r14, r1
    13f2:	f1 1c       	adc	r15, r1
    13f4:	01 1d       	adc	r16, r1
    13f6:	11 1d       	adc	r17, r1
    13f8:	80 e8       	ldi	r24, 0x80	; 128
    13fa:	d8 2a       	or	r13, r24
    13fc:	2a e0       	ldi	r18, 0x0A	; 10
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	a1 01       	movw	r20, r2
    1402:	c8 01       	movw	r24, r16
    1404:	b7 01       	movw	r22, r14
    1406:	0e 94 0f 0b 	call	0x161e	; 0x161e <__ultoa_invert>
    140a:	f8 2e       	mov	r15, r24
    140c:	f2 18       	sub	r15, r2
    140e:	40 c0       	rjmp	.+128    	; 0x1490 <vfprintf+0x2b4>
    1410:	95 37       	cpi	r25, 0x75	; 117
    1412:	29 f4       	brne	.+10     	; 0x141e <vfprintf+0x242>
    1414:	1d 2d       	mov	r17, r13
    1416:	1f 7e       	andi	r17, 0xEF	; 239
    1418:	2a e0       	ldi	r18, 0x0A	; 10
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	1d c0       	rjmp	.+58     	; 0x1458 <vfprintf+0x27c>
    141e:	1d 2d       	mov	r17, r13
    1420:	19 7f       	andi	r17, 0xF9	; 249
    1422:	9f 36       	cpi	r25, 0x6F	; 111
    1424:	61 f0       	breq	.+24     	; 0x143e <vfprintf+0x262>
    1426:	90 37       	cpi	r25, 0x70	; 112
    1428:	20 f4       	brcc	.+8      	; 0x1432 <vfprintf+0x256>
    142a:	98 35       	cpi	r25, 0x58	; 88
    142c:	09 f0       	breq	.+2      	; 0x1430 <vfprintf+0x254>
    142e:	ad c0       	rjmp	.+346    	; 0x158a <vfprintf+0x3ae>
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <vfprintf+0x274>
    1432:	90 37       	cpi	r25, 0x70	; 112
    1434:	39 f0       	breq	.+14     	; 0x1444 <vfprintf+0x268>
    1436:	98 37       	cpi	r25, 0x78	; 120
    1438:	09 f0       	breq	.+2      	; 0x143c <vfprintf+0x260>
    143a:	a7 c0       	rjmp	.+334    	; 0x158a <vfprintf+0x3ae>
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <vfprintf+0x26a>
    143e:	28 e0       	ldi	r18, 0x08	; 8
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	0a c0       	rjmp	.+20     	; 0x1458 <vfprintf+0x27c>
    1444:	10 61       	ori	r17, 0x10	; 16
    1446:	14 fd       	sbrc	r17, 4
    1448:	14 60       	ori	r17, 0x04	; 4
    144a:	20 e1       	ldi	r18, 0x10	; 16
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	04 c0       	rjmp	.+8      	; 0x1458 <vfprintf+0x27c>
    1450:	14 fd       	sbrc	r17, 4
    1452:	16 60       	ori	r17, 0x06	; 6
    1454:	20 e1       	ldi	r18, 0x10	; 16
    1456:	32 e0       	ldi	r19, 0x02	; 2
    1458:	17 ff       	sbrs	r17, 7
    145a:	08 c0       	rjmp	.+16     	; 0x146c <vfprintf+0x290>
    145c:	f5 01       	movw	r30, r10
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	44 e0       	ldi	r20, 0x04	; 4
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	08 c0       	rjmp	.+16     	; 0x147c <vfprintf+0x2a0>
    146c:	f5 01       	movw	r30, r10
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	bc 01       	movw	r22, r24
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	42 e0       	ldi	r20, 0x02	; 2
    147a:	50 e0       	ldi	r21, 0x00	; 0
    147c:	a4 0e       	add	r10, r20
    147e:	b5 1e       	adc	r11, r21
    1480:	a1 01       	movw	r20, r2
    1482:	0e 94 0f 0b 	call	0x161e	; 0x161e <__ultoa_invert>
    1486:	f8 2e       	mov	r15, r24
    1488:	f2 18       	sub	r15, r2
    148a:	8f e7       	ldi	r24, 0x7F	; 127
    148c:	d8 2e       	mov	r13, r24
    148e:	d1 22       	and	r13, r17
    1490:	d6 fe       	sbrs	r13, 6
    1492:	0b c0       	rjmp	.+22     	; 0x14aa <vfprintf+0x2ce>
    1494:	5e ef       	ldi	r21, 0xFE	; 254
    1496:	d5 22       	and	r13, r21
    1498:	f9 14       	cp	r15, r9
    149a:	38 f4       	brcc	.+14     	; 0x14aa <vfprintf+0x2ce>
    149c:	d4 fe       	sbrs	r13, 4
    149e:	07 c0       	rjmp	.+14     	; 0x14ae <vfprintf+0x2d2>
    14a0:	d2 fc       	sbrc	r13, 2
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <vfprintf+0x2d2>
    14a4:	8f ee       	ldi	r24, 0xEF	; 239
    14a6:	d8 22       	and	r13, r24
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x2d2>
    14aa:	1f 2d       	mov	r17, r15
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <vfprintf+0x2d4>
    14ae:	19 2d       	mov	r17, r9
    14b0:	d4 fe       	sbrs	r13, 4
    14b2:	0d c0       	rjmp	.+26     	; 0x14ce <vfprintf+0x2f2>
    14b4:	fe 01       	movw	r30, r28
    14b6:	ef 0d       	add	r30, r15
    14b8:	f1 1d       	adc	r31, r1
    14ba:	80 81       	ld	r24, Z
    14bc:	80 33       	cpi	r24, 0x30	; 48
    14be:	19 f4       	brne	.+6      	; 0x14c6 <vfprintf+0x2ea>
    14c0:	99 ee       	ldi	r25, 0xE9	; 233
    14c2:	d9 22       	and	r13, r25
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <vfprintf+0x2fa>
    14c6:	1f 5f       	subi	r17, 0xFF	; 255
    14c8:	d2 fe       	sbrs	r13, 2
    14ca:	05 c0       	rjmp	.+10     	; 0x14d6 <vfprintf+0x2fa>
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <vfprintf+0x2f8>
    14ce:	8d 2d       	mov	r24, r13
    14d0:	86 78       	andi	r24, 0x86	; 134
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <vfprintf+0x2fa>
    14d4:	1f 5f       	subi	r17, 0xFF	; 255
    14d6:	0d 2d       	mov	r16, r13
    14d8:	d3 fc       	sbrc	r13, 3
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <vfprintf+0x328>
    14dc:	d0 fe       	sbrs	r13, 0
    14de:	0f c0       	rjmp	.+30     	; 0x14fe <vfprintf+0x322>
    14e0:	1c 15       	cp	r17, r12
    14e2:	10 f0       	brcs	.+4      	; 0x14e8 <vfprintf+0x30c>
    14e4:	9f 2c       	mov	r9, r15
    14e6:	0b c0       	rjmp	.+22     	; 0x14fe <vfprintf+0x322>
    14e8:	9f 2c       	mov	r9, r15
    14ea:	9c 0c       	add	r9, r12
    14ec:	91 1a       	sub	r9, r17
    14ee:	1c 2d       	mov	r17, r12
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <vfprintf+0x322>
    14f2:	b3 01       	movw	r22, r6
    14f4:	80 e2       	ldi	r24, 0x20	; 32
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    14fc:	1f 5f       	subi	r17, 0xFF	; 255
    14fe:	1c 15       	cp	r17, r12
    1500:	c0 f3       	brcs	.-16     	; 0x14f2 <vfprintf+0x316>
    1502:	04 c0       	rjmp	.+8      	; 0x150c <vfprintf+0x330>
    1504:	1c 15       	cp	r17, r12
    1506:	10 f4       	brcc	.+4      	; 0x150c <vfprintf+0x330>
    1508:	c1 1a       	sub	r12, r17
    150a:	01 c0       	rjmp	.+2      	; 0x150e <vfprintf+0x332>
    150c:	cc 24       	eor	r12, r12
    150e:	04 ff       	sbrs	r16, 4
    1510:	10 c0       	rjmp	.+32     	; 0x1532 <vfprintf+0x356>
    1512:	b3 01       	movw	r22, r6
    1514:	80 e3       	ldi	r24, 0x30	; 48
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    151c:	02 ff       	sbrs	r16, 2
    151e:	1e c0       	rjmp	.+60     	; 0x155c <vfprintf+0x380>
    1520:	01 fd       	sbrc	r16, 1
    1522:	03 c0       	rjmp	.+6      	; 0x152a <vfprintf+0x34e>
    1524:	88 e7       	ldi	r24, 0x78	; 120
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <vfprintf+0x352>
    152a:	88 e5       	ldi	r24, 0x58	; 88
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	b3 01       	movw	r22, r6
    1530:	0c c0       	rjmp	.+24     	; 0x154a <vfprintf+0x36e>
    1532:	80 2f       	mov	r24, r16
    1534:	86 78       	andi	r24, 0x86	; 134
    1536:	91 f0       	breq	.+36     	; 0x155c <vfprintf+0x380>
    1538:	01 ff       	sbrs	r16, 1
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <vfprintf+0x364>
    153c:	8b e2       	ldi	r24, 0x2B	; 43
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <vfprintf+0x366>
    1540:	80 e2       	ldi	r24, 0x20	; 32
    1542:	d7 fc       	sbrc	r13, 7
    1544:	8d e2       	ldi	r24, 0x2D	; 45
    1546:	b3 01       	movw	r22, r6
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    154e:	06 c0       	rjmp	.+12     	; 0x155c <vfprintf+0x380>
    1550:	b3 01       	movw	r22, r6
    1552:	80 e3       	ldi	r24, 0x30	; 48
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    155a:	9a 94       	dec	r9
    155c:	f9 14       	cp	r15, r9
    155e:	c0 f3       	brcs	.-16     	; 0x1550 <vfprintf+0x374>
    1560:	fa 94       	dec	r15
    1562:	f1 01       	movw	r30, r2
    1564:	ef 0d       	add	r30, r15
    1566:	f1 1d       	adc	r31, r1
    1568:	b3 01       	movw	r22, r6
    156a:	80 81       	ld	r24, Z
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    1572:	ff 20       	and	r15, r15
    1574:	a9 f7       	brne	.-22     	; 0x1560 <vfprintf+0x384>
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <vfprintf+0x3a8>
    1578:	b3 01       	movw	r22, r6
    157a:	80 e2       	ldi	r24, 0x20	; 32
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <fputc>
    1582:	ca 94       	dec	r12
    1584:	cc 20       	and	r12, r12
    1586:	c1 f7       	brne	.-16     	; 0x1578 <vfprintf+0x39c>
    1588:	41 ce       	rjmp	.-894    	; 0x120c <vfprintf+0x30>
    158a:	f3 01       	movw	r30, r6
    158c:	66 81       	ldd	r22, Z+6	; 0x06
    158e:	77 81       	ldd	r23, Z+7	; 0x07
    1590:	cb 01       	movw	r24, r22
    1592:	2b 96       	adiw	r28, 0x0b	; 11
    1594:	e2 e1       	ldi	r30, 0x12	; 18
    1596:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__epilogue_restores__>

0000159a <strnlen_P>:
    159a:	fc 01       	movw	r30, r24
    159c:	05 90       	lpm	r0, Z+
    159e:	61 50       	subi	r22, 0x01	; 1
    15a0:	70 40       	sbci	r23, 0x00	; 0
    15a2:	01 10       	cpse	r0, r1
    15a4:	d8 f7       	brcc	.-10     	; 0x159c <strnlen_P+0x2>
    15a6:	80 95       	com	r24
    15a8:	90 95       	com	r25
    15aa:	8e 0f       	add	r24, r30
    15ac:	9f 1f       	adc	r25, r31
    15ae:	08 95       	ret

000015b0 <strnlen>:
    15b0:	fc 01       	movw	r30, r24
    15b2:	61 50       	subi	r22, 0x01	; 1
    15b4:	70 40       	sbci	r23, 0x00	; 0
    15b6:	01 90       	ld	r0, Z+
    15b8:	01 10       	cpse	r0, r1
    15ba:	d8 f7       	brcc	.-10     	; 0x15b2 <strnlen+0x2>
    15bc:	80 95       	com	r24
    15be:	90 95       	com	r25
    15c0:	8e 0f       	add	r24, r30
    15c2:	9f 1f       	adc	r25, r31
    15c4:	08 95       	ret

000015c6 <fputc>:
    15c6:	0f 93       	push	r16
    15c8:	1f 93       	push	r17
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	8c 01       	movw	r16, r24
    15d0:	eb 01       	movw	r28, r22
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 ff       	sbrs	r24, 1
    15d6:	1b c0       	rjmp	.+54     	; 0x160e <fputc+0x48>
    15d8:	82 ff       	sbrs	r24, 2
    15da:	0d c0       	rjmp	.+26     	; 0x15f6 <fputc+0x30>
    15dc:	2e 81       	ldd	r18, Y+6	; 0x06
    15de:	3f 81       	ldd	r19, Y+7	; 0x07
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	64 f4       	brge	.+24     	; 0x1602 <fputc+0x3c>
    15ea:	e8 81       	ld	r30, Y
    15ec:	f9 81       	ldd	r31, Y+1	; 0x01
    15ee:	01 93       	st	Z+, r16
    15f0:	f9 83       	std	Y+1, r31	; 0x01
    15f2:	e8 83       	st	Y, r30
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <fputc+0x3c>
    15f6:	e8 85       	ldd	r30, Y+8	; 0x08
    15f8:	f9 85       	ldd	r31, Y+9	; 0x09
    15fa:	80 2f       	mov	r24, r16
    15fc:	09 95       	icall
    15fe:	89 2b       	or	r24, r25
    1600:	31 f4       	brne	.+12     	; 0x160e <fputc+0x48>
    1602:	8e 81       	ldd	r24, Y+6	; 0x06
    1604:	9f 81       	ldd	r25, Y+7	; 0x07
    1606:	01 96       	adiw	r24, 0x01	; 1
    1608:	9f 83       	std	Y+7, r25	; 0x07
    160a:	8e 83       	std	Y+6, r24	; 0x06
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <fputc+0x4c>
    160e:	0f ef       	ldi	r16, 0xFF	; 255
    1610:	1f ef       	ldi	r17, 0xFF	; 255
    1612:	c8 01       	movw	r24, r16
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	08 95       	ret

0000161e <__ultoa_invert>:
    161e:	fa 01       	movw	r30, r20
    1620:	aa 27       	eor	r26, r26
    1622:	28 30       	cpi	r18, 0x08	; 8
    1624:	51 f1       	breq	.+84     	; 0x167a <__ultoa_invert+0x5c>
    1626:	20 31       	cpi	r18, 0x10	; 16
    1628:	81 f1       	breq	.+96     	; 0x168a <__ultoa_invert+0x6c>
    162a:	e8 94       	clt
    162c:	6f 93       	push	r22
    162e:	6e 7f       	andi	r22, 0xFE	; 254
    1630:	6e 5f       	subi	r22, 0xFE	; 254
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	8f 4f       	sbci	r24, 0xFF	; 255
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	af 4f       	sbci	r26, 0xFF	; 255
    163a:	b1 e0       	ldi	r27, 0x01	; 1
    163c:	3e d0       	rcall	.+124    	; 0x16ba <__ultoa_invert+0x9c>
    163e:	b4 e0       	ldi	r27, 0x04	; 4
    1640:	3c d0       	rcall	.+120    	; 0x16ba <__ultoa_invert+0x9c>
    1642:	67 0f       	add	r22, r23
    1644:	78 1f       	adc	r23, r24
    1646:	89 1f       	adc	r24, r25
    1648:	9a 1f       	adc	r25, r26
    164a:	a1 1d       	adc	r26, r1
    164c:	68 0f       	add	r22, r24
    164e:	79 1f       	adc	r23, r25
    1650:	8a 1f       	adc	r24, r26
    1652:	91 1d       	adc	r25, r1
    1654:	a1 1d       	adc	r26, r1
    1656:	6a 0f       	add	r22, r26
    1658:	71 1d       	adc	r23, r1
    165a:	81 1d       	adc	r24, r1
    165c:	91 1d       	adc	r25, r1
    165e:	a1 1d       	adc	r26, r1
    1660:	20 d0       	rcall	.+64     	; 0x16a2 <__ultoa_invert+0x84>
    1662:	09 f4       	brne	.+2      	; 0x1666 <__ultoa_invert+0x48>
    1664:	68 94       	set
    1666:	3f 91       	pop	r19
    1668:	2a e0       	ldi	r18, 0x0A	; 10
    166a:	26 9f       	mul	r18, r22
    166c:	11 24       	eor	r1, r1
    166e:	30 19       	sub	r19, r0
    1670:	30 5d       	subi	r19, 0xD0	; 208
    1672:	31 93       	st	Z+, r19
    1674:	de f6       	brtc	.-74     	; 0x162c <__ultoa_invert+0xe>
    1676:	cf 01       	movw	r24, r30
    1678:	08 95       	ret
    167a:	46 2f       	mov	r20, r22
    167c:	47 70       	andi	r20, 0x07	; 7
    167e:	40 5d       	subi	r20, 0xD0	; 208
    1680:	41 93       	st	Z+, r20
    1682:	b3 e0       	ldi	r27, 0x03	; 3
    1684:	0f d0       	rcall	.+30     	; 0x16a4 <__ultoa_invert+0x86>
    1686:	c9 f7       	brne	.-14     	; 0x167a <__ultoa_invert+0x5c>
    1688:	f6 cf       	rjmp	.-20     	; 0x1676 <__ultoa_invert+0x58>
    168a:	46 2f       	mov	r20, r22
    168c:	4f 70       	andi	r20, 0x0F	; 15
    168e:	40 5d       	subi	r20, 0xD0	; 208
    1690:	4a 33       	cpi	r20, 0x3A	; 58
    1692:	18 f0       	brcs	.+6      	; 0x169a <__ultoa_invert+0x7c>
    1694:	49 5d       	subi	r20, 0xD9	; 217
    1696:	31 fd       	sbrc	r19, 1
    1698:	40 52       	subi	r20, 0x20	; 32
    169a:	41 93       	st	Z+, r20
    169c:	02 d0       	rcall	.+4      	; 0x16a2 <__ultoa_invert+0x84>
    169e:	a9 f7       	brne	.-22     	; 0x168a <__ultoa_invert+0x6c>
    16a0:	ea cf       	rjmp	.-44     	; 0x1676 <__ultoa_invert+0x58>
    16a2:	b4 e0       	ldi	r27, 0x04	; 4
    16a4:	a6 95       	lsr	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	77 95       	ror	r23
    16ac:	67 95       	ror	r22
    16ae:	ba 95       	dec	r27
    16b0:	c9 f7       	brne	.-14     	; 0x16a4 <__ultoa_invert+0x86>
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	61 05       	cpc	r22, r1
    16b6:	71 05       	cpc	r23, r1
    16b8:	08 95       	ret
    16ba:	9b 01       	movw	r18, r22
    16bc:	ac 01       	movw	r20, r24
    16be:	0a 2e       	mov	r0, r26
    16c0:	06 94       	lsr	r0
    16c2:	57 95       	ror	r21
    16c4:	47 95       	ror	r20
    16c6:	37 95       	ror	r19
    16c8:	27 95       	ror	r18
    16ca:	ba 95       	dec	r27
    16cc:	c9 f7       	brne	.-14     	; 0x16c0 <__ultoa_invert+0xa2>
    16ce:	62 0f       	add	r22, r18
    16d0:	73 1f       	adc	r23, r19
    16d2:	84 1f       	adc	r24, r20
    16d4:	95 1f       	adc	r25, r21
    16d6:	a0 1d       	adc	r26, r0
    16d8:	08 95       	ret

000016da <__divmodhi4>:
    16da:	97 fb       	bst	r25, 7
    16dc:	09 2e       	mov	r0, r25
    16de:	07 26       	eor	r0, r23
    16e0:	0a d0       	rcall	.+20     	; 0x16f6 <__divmodhi4_neg1>
    16e2:	77 fd       	sbrc	r23, 7
    16e4:	04 d0       	rcall	.+8      	; 0x16ee <__divmodhi4_neg2>
    16e6:	0c d0       	rcall	.+24     	; 0x1700 <__udivmodhi4>
    16e8:	06 d0       	rcall	.+12     	; 0x16f6 <__divmodhi4_neg1>
    16ea:	00 20       	and	r0, r0
    16ec:	1a f4       	brpl	.+6      	; 0x16f4 <__divmodhi4_exit>

000016ee <__divmodhi4_neg2>:
    16ee:	70 95       	com	r23
    16f0:	61 95       	neg	r22
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255

000016f4 <__divmodhi4_exit>:
    16f4:	08 95       	ret

000016f6 <__divmodhi4_neg1>:
    16f6:	f6 f7       	brtc	.-4      	; 0x16f4 <__divmodhi4_exit>
    16f8:	90 95       	com	r25
    16fa:	81 95       	neg	r24
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	08 95       	ret

00001700 <__udivmodhi4>:
    1700:	aa 1b       	sub	r26, r26
    1702:	bb 1b       	sub	r27, r27
    1704:	51 e1       	ldi	r21, 0x11	; 17
    1706:	07 c0       	rjmp	.+14     	; 0x1716 <__udivmodhi4_ep>

00001708 <__udivmodhi4_loop>:
    1708:	aa 1f       	adc	r26, r26
    170a:	bb 1f       	adc	r27, r27
    170c:	a6 17       	cp	r26, r22
    170e:	b7 07       	cpc	r27, r23
    1710:	10 f0       	brcs	.+4      	; 0x1716 <__udivmodhi4_ep>
    1712:	a6 1b       	sub	r26, r22
    1714:	b7 0b       	sbc	r27, r23

00001716 <__udivmodhi4_ep>:
    1716:	88 1f       	adc	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	5a 95       	dec	r21
    171c:	a9 f7       	brne	.-22     	; 0x1708 <__udivmodhi4_loop>
    171e:	80 95       	com	r24
    1720:	90 95       	com	r25
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	08 95       	ret

00001728 <__prologue_saves__>:
    1728:	2f 92       	push	r2
    172a:	3f 92       	push	r3
    172c:	4f 92       	push	r4
    172e:	5f 92       	push	r5
    1730:	6f 92       	push	r6
    1732:	7f 92       	push	r7
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	ca 1b       	sub	r28, r26
    1752:	db 0b       	sbc	r29, r27
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	09 94       	ijmp

00001760 <__epilogue_restores__>:
    1760:	2a 88       	ldd	r2, Y+18	; 0x12
    1762:	39 88       	ldd	r3, Y+17	; 0x11
    1764:	48 88       	ldd	r4, Y+16	; 0x10
    1766:	5f 84       	ldd	r5, Y+15	; 0x0f
    1768:	6e 84       	ldd	r6, Y+14	; 0x0e
    176a:	7d 84       	ldd	r7, Y+13	; 0x0d
    176c:	8c 84       	ldd	r8, Y+12	; 0x0c
    176e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1770:	aa 84       	ldd	r10, Y+10	; 0x0a
    1772:	b9 84       	ldd	r11, Y+9	; 0x09
    1774:	c8 84       	ldd	r12, Y+8	; 0x08
    1776:	df 80       	ldd	r13, Y+7	; 0x07
    1778:	ee 80       	ldd	r14, Y+6	; 0x06
    177a:	fd 80       	ldd	r15, Y+5	; 0x05
    177c:	0c 81       	ldd	r16, Y+4	; 0x04
    177e:	1b 81       	ldd	r17, Y+3	; 0x03
    1780:	aa 81       	ldd	r26, Y+2	; 0x02
    1782:	b9 81       	ldd	r27, Y+1	; 0x01
    1784:	ce 0f       	add	r28, r30
    1786:	d1 1d       	adc	r29, r1
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	ed 01       	movw	r28, r26
    1794:	08 95       	ret

00001796 <_exit>:
    1796:	f8 94       	cli

00001798 <__stop_program>:
    1798:	ff cf       	rjmp	.-2      	; 0x1798 <__stop_program>
