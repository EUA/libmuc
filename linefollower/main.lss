
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00001676  000016ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001676  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  008001b4  0000172a  0000179e  2**0
                  ALLOC
  3 .stab         000056b8  00000000  00000000  000017a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002038  00000000  00000000  00006e58  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 48 04 	jmp	0x890	; 0x890 <__vector_5>
      18:	0c 94 11 04 	jmp	0x822	; 0x822 <__vector_6>
      1c:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_7>
      20:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_8>
      24:	0c 94 02 04 	jmp	0x804	; 0x804 <__vector_9>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_19>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000005c <__c.1598>:
      5c:	50 4f 52 54 44 3a 20 00                             PORTD: .

00000064 <__c.1596>:
      64:	50 4f 52 54 42 3a 20 00                             PORTB: .

0000006c <__c.1589>:
      6c:	57 68 61 74 20 28 5b 54 5d 65 73 74 2f 5b 46 5d     What ([T]est/[F]
      7c:	6f 6c 6c 6f 77 29 3a 20 00                          ollow): .

00000085 <__c.1957>:
      85:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d4 e0       	ldi	r29, 0x04	; 4
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e6 e7       	ldi	r30, 0x76	; 118
      a6:	f6 e1       	ldi	r31, 0x16	; 22
      a8:	02 c0       	rjmp	.+4      	; 0xae <.do_copy_data_start>

000000aa <.do_copy_data_loop>:
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0

000000ae <.do_copy_data_start>:
      ae:	a4 3b       	cpi	r26, 0xB4	; 180
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <.do_copy_data_loop>

000000b4 <__do_clear_bss>:
      b4:	12 e0       	ldi	r17, 0x02	; 2
      b6:	a4 eb       	ldi	r26, 0xB4	; 180
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a2 32       	cpi	r26, 0x22	; 34
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 cb 00 	call	0x196	; 0x196 <main>
      c8:	0c 94 39 0b 	jmp	0x1672	; 0x1672 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000000d0 <clock_init>:
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	20 e8       	ldi	r18, 0x80	; 128
      d6:	0f b6       	in	r0, 0x3f	; 63
      d8:	f8 94       	cli
      da:	20 93 61 00 	sts	0x0061, r18
      de:	80 93 61 00 	sts	0x0061, r24
      e2:	0f be       	out	0x3f, r0	; 63
	#else
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}
      e4:	08 95       	ret

000000e6 <print_bin>:


void  print_bin(uint8_t inp) {
      e6:	ef 92       	push	r14
      e8:	ff 92       	push	r15
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
      f2:	c7 e0       	ldi	r28, 0x07	; 7
      f4:	d0 e0       	ldi	r29, 0x00	; 0
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
      f6:	91 e0       	ldi	r25, 0x01	; 1
      f8:	e9 2e       	mov	r14, r25
      fa:	f1 2c       	mov	r15, r1
      fc:	08 2f       	mov	r16, r24
      fe:	10 e0       	ldi	r17, 0x00	; 0
     100:	c7 01       	movw	r24, r14
     102:	0c 2e       	mov	r0, r28
     104:	02 c0       	rjmp	.+4      	; 0x10a <print_bin+0x24>
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	0a 94       	dec	r0
     10c:	e2 f7       	brpl	.-8      	; 0x106 <print_bin+0x20>
     10e:	80 23       	and	r24, r16
     110:	91 23       	and	r25, r17
     112:	0c 2e       	mov	r0, r28
     114:	02 c0       	rjmp	.+4      	; 0x11a <print_bin+0x34>
     116:	95 95       	asr	r25
     118:	87 95       	ror	r24
     11a:	0a 94       	dec	r0
     11c:	e2 f7       	brpl	.-8      	; 0x116 <print_bin+0x30>
     11e:	c0 96       	adiw	r24, 0x30	; 48
     120:	0e 94 2b 05 	call	0xa56	; 0xa56 <putchar>
     124:	21 97       	sbiw	r28, 0x01	; 1
	//OSCAL set by the bootloader.
}


void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     126:	8f ef       	ldi	r24, 0xFF	; 255
     128:	cf 3f       	cpi	r28, 0xFF	; 255
     12a:	d8 07       	cpc	r29, r24
     12c:	49 f7       	brne	.-46     	; 0x100 <print_bin+0x1a>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}
     12e:	df 91       	pop	r29
     130:	cf 91       	pop	r28
     132:	1f 91       	pop	r17
     134:	0f 91       	pop	r16
     136:	ff 90       	pop	r15
     138:	ef 90       	pop	r14
     13a:	08 95       	ret

0000013c <init>:

void init(void) {
	cli();
     13c:	f8 94       	cli
	PCMSK1&=~(1<<PCINT15);
     13e:	ec e6       	ldi	r30, 0x6C	; 108
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	8f 77       	andi	r24, 0x7F	; 127
     146:	80 83       	st	Z, r24
	power_lcd_disable();
     148:	e4 e6       	ldi	r30, 0x64	; 100
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	80 81       	ld	r24, Z
     14e:	80 61       	ori	r24, 0x10	; 16
     150:	80 83       	st	Z, r24
	power_spi_disable();
     152:	80 81       	ld	r24, Z
     154:	84 60       	ori	r24, 0x04	; 4
     156:	80 83       	st	Z, r24
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	20 e8       	ldi	r18, 0x80	; 128
     15e:	0f b6       	in	r0, 0x3f	; 63
     160:	f8 94       	cli
     162:	20 93 61 00 	sts	0x0061, r18
     166:	80 93 61 00 	sts	0x0061, r24
     16a:	0f be       	out	0x3f, r0	; 63
	cli();
	PCMSK1&=~(1<<PCINT15);
	power_lcd_disable();
	power_spi_disable();
	clock_init();
	usart_init();
     16c:	0e 94 75 03 	call	0x6ea	; 0x6ea <usart_init>
	timers_init();
     170:	0e 94 43 04 	call	0x886	; 0x886 <timers_init>
	adc_init();
     174:	0e 94 05 02 	call	0x40a	; 0x40a <adc_init>
	MOTOR_CTL_DDR|=(uint8_t)((1<<M_AIN1)|(1<<M_AIN2)|(1<<M_BIN1)|(1<<M_BIN2));
     178:	8a b1       	in	r24, 0x0a	; 10
     17a:	8a 6a       	ori	r24, 0xAA	; 170
     17c:	8a b9       	out	0x0a, r24	; 10
	motor_mode_L(MOTOR_L_FWD);
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	0e 94 ed 04 	call	0x9da	; 0x9da <motor_mode_L>
	motor_mode_R(MOTOR_R_FWD);
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	0e 94 c4 04 	call	0x988	; 0x988 <motor_mode_R>
	sei(); //We use interupts, so enable them.
     18a:	78 94       	sei
	printf(PSTR(": Init: Done\n\n"));
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 32 05 	call	0xa64	; 0xa64 <puts>
}
     194:	08 95       	ret

00000196 <main>:

int main(void) {
     196:	8f 92       	push	r8
     198:	9f 92       	push	r9
     19a:	af 92       	push	r10
     19c:	bf 92       	push	r11
     19e:	cf 92       	push	r12
     1a0:	df 92       	push	r13
     1a2:	ef 92       	push	r14
     1a4:	ff 92       	push	r15
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	df 93       	push	r29
     1ac:	cf 93       	push	r28
     1ae:	0f 92       	push	r0
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
	init();
     1b4:	0e 94 9e 00 	call	0x13c	; 0x13c <init>
	set_motor_L(0);
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <set_motor_L>
	set_motor_R(0);
     1c0:	80 e0       	ldi	r24, 0x00	; 0
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 82 04 	call	0x904	; 0x904 <set_motor_R>
		
	char input;
	for(;;) {
		printf(PSTR("What ([T]est/[F]ollow): "));
     1c8:	bc e6       	ldi	r27, 0x6C	; 108
     1ca:	cb 2e       	mov	r12, r27
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	db 2e       	mov	r13, r27
		scanf("%c",&input);
     1d0:	7e 01       	movw	r14, r28
     1d2:	08 94       	sec
     1d4:	e1 1c       	adc	r14, r1
     1d6:	f1 1c       	adc	r15, r1
     1d8:	0e e0       	ldi	r16, 0x0E	; 14
     1da:	11 e0       	ldi	r17, 0x01	; 1
	set_motor_L(0);
	set_motor_R(0);
		
	char input;
	for(;;) {
		printf(PSTR("What ([T]est/[F]ollow): "));
     1dc:	df 92       	push	r13
     1de:	cf 92       	push	r12
     1e0:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
		scanf("%c",&input);
     1e4:	ff 92       	push	r15
     1e6:	ef 92       	push	r14
     1e8:	1f 93       	push	r17
     1ea:	0f 93       	push	r16
     1ec:	0e 94 67 05 	call	0xace	; 0xace <scanf>
		if (input=='F') {
     1f0:	89 81       	ldd	r24, Y+1	; 0x01
     1f2:	2d b7       	in	r18, 0x3d	; 61
     1f4:	3e b7       	in	r19, 0x3e	; 62
     1f6:	2a 5f       	subi	r18, 0xFA	; 250
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	3e bf       	out	0x3e, r19	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	2d bf       	out	0x3d, r18	; 61
     204:	86 34       	cpi	r24, 0x46	; 70
     206:	09 f0       	breq	.+2      	; 0x20a <main+0x74>
     208:	64 c0       	rjmp	.+200    	; 0x2d2 <main+0x13c>
			for (;;) {
				uint16_t c_speed [2] = {get_motor_L(),get_motor_R()};
				printf("ML: %X\n",c_speed[0]);
     20a:	a1 e1       	ldi	r26, 0x11	; 17
     20c:	8a 2e       	mov	r8, r26
     20e:	a1 e0       	ldi	r26, 0x01	; 1
     210:	9a 2e       	mov	r9, r26
				printf("MR: %X\n",c_speed[1]);
     212:	f9 e1       	ldi	r31, 0x19	; 25
     214:	af 2e       	mov	r10, r31
     216:	f1 e0       	ldi	r31, 0x01	; 1
     218:	bf 2e       	mov	r11, r31
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21a:	e8 ec       	ldi	r30, 0xC8	; 200
     21c:	ce 2e       	mov	r12, r30
     21e:	d1 2c       	mov	r13, r1
	for(;;) {
		printf(PSTR("What ([T]est/[F]ollow): "));
		scanf("%c",&input);
		if (input=='F') {
			for (;;) {
				uint16_t c_speed [2] = {get_motor_L(),get_motor_R()};
     220:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <get_motor_L>
     224:	8c 01       	movw	r16, r24
     226:	0e 94 73 04 	call	0x8e6	; 0x8e6 <get_motor_R>
     22a:	7c 01       	movw	r14, r24
				printf("ML: %X\n",c_speed[0]);
     22c:	1f 93       	push	r17
     22e:	0f 93       	push	r16
     230:	9f 92       	push	r9
     232:	8f 92       	push	r8
     234:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
				printf("MR: %X\n",c_speed[1]);
     238:	ff 92       	push	r15
     23a:	ef 92       	push	r14
     23c:	bf 92       	push	r11
     23e:	af 92       	push	r10
     240:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
				print_adc_values();
     244:	0e 94 51 02 	call	0x4a2	; 0x4a2 <print_adc_values>
		
				uint16_t adc_val_mixed [2] = {	adc_val[0] + adc_val[1] * LF_ADC_MIX_WIEGHT,	\
     248:	80 91 0d 02 	lds	r24, 0x020D
     24c:	90 91 0e 02 	lds	r25, 0x020E
     250:	ac 01       	movw	r20, r24
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	44 0f       	add	r20, r20
     258:	55 1f       	adc	r21, r21
     25a:	48 0f       	add	r20, r24
     25c:	59 1f       	adc	r21, r25
     25e:	80 91 0b 02 	lds	r24, 0x020B
     262:	90 91 0c 02 	lds	r25, 0x020C
     266:	48 0f       	add	r20, r24
     268:	59 1f       	adc	r21, r25
     26a:	80 91 0f 02 	lds	r24, 0x020F
     26e:	90 91 10 02 	lds	r25, 0x0210
     272:	9c 01       	movw	r18, r24
     274:	22 0f       	add	r18, r18
     276:	33 1f       	adc	r19, r19
     278:	22 0f       	add	r18, r18
     27a:	33 1f       	adc	r19, r19
     27c:	28 0f       	add	r18, r24
     27e:	39 1f       	adc	r19, r25
     280:	80 91 11 02 	lds	r24, 0x0211
     284:	90 91 12 02 	lds	r25, 0x0212
     288:	28 0f       	add	r18, r24
     28a:	39 1f       	adc	r19, r25
								adc_val[3] + adc_val[2] * LF_ADC_MIX_WIEGHT	};

				if (adc_val_mixed[0]>adc_val_mixed[1])
     28c:	8d b7       	in	r24, 0x3d	; 61
     28e:	9e b7       	in	r25, 0x3e	; 62
     290:	08 96       	adiw	r24, 0x08	; 8
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	9e bf       	out	0x3e, r25	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	8d bf       	out	0x3d, r24	; 61
     29c:	24 17       	cp	r18, r20
     29e:	35 07       	cpc	r19, r21
     2a0:	28 f4       	brcc	.+10     	; 0x2ac <main+0x116>
					lf_turn_left_inc(LF_INC);
     2a2:	84 e6       	ldi	r24, 0x64	; 100
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	0e 94 89 04 	call	0x912	; 0x912 <lf_turn_left_inc>
     2aa:	0a c0       	rjmp	.+20     	; 0x2c0 <main+0x12a>
				else if (adc_val_mixed[1]>adc_val_mixed[0])
     2ac:	42 17       	cp	r20, r18
     2ae:	53 07       	cpc	r21, r19
     2b0:	28 f4       	brcc	.+10     	; 0x2bc <main+0x126>
					lf_turn_right_inc(LF_INC);
     2b2:	84 e6       	ldi	r24, 0x64	; 100
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 9e 04 	call	0x93c	; 0x93c <lf_turn_right_inc>
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <main+0x12a>
				else
					lf_full_speed();
     2bc:	0e 94 b3 04 	call	0x966	; 0x966 <lf_full_speed>
     2c0:	88 e5       	ldi	r24, 0x58	; 88
     2c2:	9b e1       	ldi	r25, 0x1B	; 27
     2c4:	f6 01       	movw	r30, r12
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <main+0x130>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <main+0x13a>
     2ce:	a8 cf       	rjmp	.-176    	; 0x220 <main+0x8a>
     2d0:	f9 cf       	rjmp	.-14     	; 0x2c4 <main+0x12e>

				_delay_ms(700);
			}
		}
		else if(input=='T') {
     2d2:	84 35       	cpi	r24, 0x54	; 84
     2d4:	59 f5       	brne	.+86     	; 0x32c <main+0x196>
			motor_mode_L(MOTOR_L_FWD);
     2d6:	81 e0       	ldi	r24, 0x01	; 1
     2d8:	0e 94 ed 04 	call	0x9da	; 0x9da <motor_mode_L>
			motor_mode_R(MOTOR_R_FWD);	
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 c4 04 	call	0x988	; 0x988 <motor_mode_R>
			for(;;) {
			
				printf(PSTR("       76543210\n"));
				printf(PSTR("PORTB: "));print_bin(PORTB);printf("\n");
     2e2:	24 e6       	ldi	r18, 0x64	; 100
     2e4:	e2 2e       	mov	r14, r18
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	f2 2e       	mov	r15, r18
				printf(PSTR("PORTD: "));print_bin(PORTD);printf("\n");
     2ea:	0c e5       	ldi	r16, 0x5C	; 92
     2ec:	10 e0       	ldi	r17, 0x00	; 0
		else if(input=='T') {
			motor_mode_L(MOTOR_L_FWD);
			motor_mode_R(MOTOR_R_FWD);	
			for(;;) {
			
				printf(PSTR("       76543210\n"));
     2ee:	81 e2       	ldi	r24, 0x21	; 33
     2f0:	91 e0       	ldi	r25, 0x01	; 1
     2f2:	0e 94 32 05 	call	0xa64	; 0xa64 <puts>
				printf(PSTR("PORTB: "));print_bin(PORTB);printf("\n");
     2f6:	ff 92       	push	r15
     2f8:	ef 92       	push	r14
     2fa:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     2fe:	85 b1       	in	r24, 0x05	; 5
     300:	0e 94 73 00 	call	0xe6	; 0xe6 <print_bin>
     304:	8a e0       	ldi	r24, 0x0A	; 10
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 2b 05 	call	0xa56	; 0xa56 <putchar>
				printf(PSTR("PORTD: "));print_bin(PORTD);printf("\n");
     30c:	1f 93       	push	r17
     30e:	0f 93       	push	r16
     310:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     314:	8b b1       	in	r24, 0x0b	; 11
     316:	0e 94 73 00 	call	0xe6	; 0xe6 <print_bin>
     31a:	8a e0       	ldi	r24, 0x0A	; 10
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 2b 05 	call	0xa56	; 0xa56 <putchar>
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	e1 cf       	rjmp	.-62     	; 0x2ee <main+0x158>
			}
		}
		else {
			printf(PSTR("\nInvalid Mode.\n"));
     32c:	81 e3       	ldi	r24, 0x31	; 49
     32e:	91 e0       	ldi	r25, 0x01	; 1
     330:	0e 94 32 05 	call	0xa64	; 0xa64 <puts>
     334:	53 cf       	rjmp	.-346    	; 0x1dc <main+0x46>

00000336 <copysign>:
     The copysign() function returns \a __x but with the sign of \a __y.
     They work even if \a __x or \a __y are NaN or zero.
 */
__ATTR_CONST__ extern inline double copysign (double __x, double __y)
{
    __asm__ (
     336:	57 fb       	bst	r21, 7
     338:	97 f9       	bld	r25, 7
	"bst	%D2, 7	\n\t"
	"bld	%D0, 7	"
	: "=r" (__x)
	: "0" (__x), "r" (__y) );
    return __x;
}
     33a:	08 95       	ret

0000033c <isfinite>:
     not plus or minus infinity, and not NaN.
  */
__ATTR_CONST__ extern inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
     33c:	68 2f       	mov	r22, r24
     33e:	66 0f       	add	r22, r22
     340:	69 2f       	mov	r22, r25
     342:	66 1f       	adc	r22, r22
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	6f 3f       	cpi	r22, 0xFF	; 255
     34a:	11 f0       	breq	.+4      	; 0x350 <isfinite+0x14>
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    return __exp != 0xff;
}
     350:	c9 01       	movw	r24, r18
     352:	08 95       	ret

00000354 <adc_set_channel>:
     354:	ac e7       	ldi	r26, 0x7C	; 124
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	9c 91       	ld	r25, X
     35a:	e5 e7       	ldi	r30, 0x75	; 117
     35c:	f1 e0       	ldi	r31, 0x01	; 1
     35e:	e8 0f       	add	r30, r24
     360:	f1 1d       	adc	r31, r1
     362:	90 7e       	andi	r25, 0xE0	; 224
     364:	80 81       	ld	r24, Z
     366:	98 2b       	or	r25, r24
     368:	9c 93       	st	X, r25
     36a:	08 95       	ret

0000036c <__vector_19>:
     36c:	1f 92       	push	r1
     36e:	0f 92       	push	r0
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	0f 92       	push	r0
     374:	11 24       	eor	r1, r1
     376:	2f 93       	push	r18
     378:	3f 93       	push	r19
     37a:	4f 93       	push	r20
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
     388:	40 91 78 00 	lds	r20, 0x0078
     38c:	30 91 79 00 	lds	r19, 0x0079
     390:	20 91 13 02 	lds	r18, 0x0213
     394:	22 23       	and	r18, r18
     396:	11 f4       	brne	.+4      	; 0x39c <__vector_19+0x30>
     398:	e3 e0       	ldi	r30, 0x03	; 3
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <__vector_19+0x34>
     39c:	e2 2f       	mov	r30, r18
     39e:	e1 50       	subi	r30, 0x01	; 1
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	ee 0f       	add	r30, r30
     3a4:	ff 1f       	adc	r31, r31
     3a6:	df 01       	movw	r26, r30
     3a8:	a5 5f       	subi	r26, 0xF5	; 245
     3aa:	bd 4f       	sbci	r27, 0xFD	; 253
     3ac:	93 2f       	mov	r25, r19
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	84 0f       	add	r24, r20
     3b2:	91 1d       	adc	r25, r1
     3b4:	8d 93       	st	X+, r24
     3b6:	9c 93       	st	X, r25
     3b8:	ec 5e       	subi	r30, 0xEC	; 236
     3ba:	fd 4f       	sbci	r31, 0xFD	; 253
     3bc:	80 81       	ld	r24, Z
     3be:	91 81       	ldd	r25, Z+1	; 0x01
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	91 83       	std	Z+1, r25	; 0x01
     3c4:	80 83       	st	Z, r24
     3c6:	82 2f       	mov	r24, r18
     3c8:	8f 5f       	subi	r24, 0xFF	; 255
     3ca:	80 93 13 02 	sts	0x0213, r24
     3ce:	84 30       	cpi	r24, 0x04	; 4
     3d0:	10 f0       	brcs	.+4      	; 0x3d6 <__vector_19+0x6a>
     3d2:	10 92 13 02 	sts	0x0213, r1
     3d6:	80 91 7c 00 	lds	r24, 0x007C
     3da:	e0 91 13 02 	lds	r30, 0x0213
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	eb 58       	subi	r30, 0x8B	; 139
     3e2:	fe 4f       	sbci	r31, 0xFE	; 254
     3e4:	80 7e       	andi	r24, 0xE0	; 224
     3e6:	90 81       	ld	r25, Z
     3e8:	89 2b       	or	r24, r25
     3ea:	80 93 7c 00 	sts	0x007C, r24
     3ee:	ff 91       	pop	r31
     3f0:	ef 91       	pop	r30
     3f2:	bf 91       	pop	r27
     3f4:	af 91       	pop	r26
     3f6:	9f 91       	pop	r25
     3f8:	8f 91       	pop	r24
     3fa:	4f 91       	pop	r20
     3fc:	3f 91       	pop	r19
     3fe:	2f 91       	pop	r18
     400:	0f 90       	pop	r0
     402:	0f be       	out	0x3f, r0	; 63
     404:	0f 90       	pop	r0
     406:	1f 90       	pop	r1
     408:	18 95       	reti

0000040a <adc_init>:
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	80 e4       	ldi	r24, 0x40	; 64
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	0e 94 32 05 	call	0xa64	; 0xa64 <puts>
     41a:	e4 e6       	ldi	r30, 0x64	; 100
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	8e 7f       	andi	r24, 0xFE	; 254
     422:	80 83       	st	Z, r24
     424:	9c e7       	ldi	r25, 0x7C	; 124
     426:	e9 2e       	mov	r14, r25
     428:	f1 2c       	mov	r15, r1
     42a:	f7 01       	movw	r30, r14
     42c:	80 81       	ld	r24, Z
     42e:	80 64       	ori	r24, 0x40	; 64
     430:	80 83       	st	Z, r24
     432:	80 81       	ld	r24, Z
     434:	8f 77       	andi	r24, 0x7F	; 127
     436:	80 83       	st	Z, r24
     438:	0a e7       	ldi	r16, 0x7A	; 122
     43a:	10 e0       	ldi	r17, 0x00	; 0
     43c:	f8 01       	movw	r30, r16
     43e:	80 81       	ld	r24, Z
     440:	88 6a       	ori	r24, 0xA8	; 168
     442:	80 83       	st	Z, r24
     444:	80 81       	ld	r24, Z
     446:	88 7f       	andi	r24, 0xF8	; 248
     448:	86 60       	ori	r24, 0x06	; 6
     44a:	80 83       	st	Z, r24
     44c:	eb e7       	ldi	r30, 0x7B	; 123
     44e:	f0 e0       	ldi	r31, 0x00	; 0
     450:	80 81       	ld	r24, Z
     452:	80 68       	ori	r24, 0x80	; 128
     454:	80 83       	st	Z, r24
     456:	80 81       	ld	r24, Z
     458:	88 7f       	andi	r24, 0xF8	; 248
     45a:	80 83       	st	Z, r24
     45c:	ee e7       	ldi	r30, 0x7E	; 126
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	80 6f       	ori	r24, 0xF0	; 240
     464:	80 83       	st	Z, r24
     466:	83 b7       	in	r24, 0x33	; 51
     468:	81 7f       	andi	r24, 0xF1	; 241
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	83 bf       	out	0x33, r24	; 51
     46e:	8d e4       	ldi	r24, 0x4D	; 77
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 32 05 	call	0xa64	; 0xa64 <puts>
     476:	f7 01       	movw	r30, r14
     478:	90 81       	ld	r25, Z
     47a:	80 91 13 02 	lds	r24, 0x0213
     47e:	e5 e7       	ldi	r30, 0x75	; 117
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	e8 0f       	add	r30, r24
     484:	f1 1d       	adc	r31, r1
     486:	90 7e       	andi	r25, 0xE0	; 224
     488:	80 81       	ld	r24, Z
     48a:	98 2b       	or	r25, r24
     48c:	f7 01       	movw	r30, r14
     48e:	90 83       	st	Z, r25
     490:	f8 01       	movw	r30, r16
     492:	80 81       	ld	r24, Z
     494:	80 64       	ori	r24, 0x40	; 64
     496:	80 83       	st	Z, r24
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	08 95       	ret

000004a2 <print_adc_values>:
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	80 91 0b 02 	lds	r24, 0x020B
     4aa:	90 91 0c 02 	lds	r25, 0x020C
     4ae:	9f 93       	push	r25
     4b0:	8f 93       	push	r24
     4b2:	1f 92       	push	r1
     4b4:	1f 92       	push	r1
     4b6:	07 e6       	ldi	r16, 0x67	; 103
     4b8:	11 e0       	ldi	r17, 0x01	; 1
     4ba:	1f 93       	push	r17
     4bc:	0f 93       	push	r16
     4be:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     4c2:	80 91 0d 02 	lds	r24, 0x020D
     4c6:	90 91 0e 02 	lds	r25, 0x020E
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	9f 93       	push	r25
     4d4:	8f 93       	push	r24
     4d6:	1f 93       	push	r17
     4d8:	0f 93       	push	r16
     4da:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     4de:	80 91 0f 02 	lds	r24, 0x020F
     4e2:	90 91 10 02 	lds	r25, 0x0210
     4e6:	9f 93       	push	r25
     4e8:	8f 93       	push	r24
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	9f 93       	push	r25
     4f0:	8f 93       	push	r24
     4f2:	1f 93       	push	r17
     4f4:	0f 93       	push	r16
     4f6:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     4fa:	80 91 11 02 	lds	r24, 0x0211
     4fe:	90 91 12 02 	lds	r25, 0x0212
     502:	9f 93       	push	r25
     504:	8f 93       	push	r24
     506:	83 e0       	ldi	r24, 0x03	; 3
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	1f 93       	push	r17
     510:	0f 93       	push	r16
     512:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     516:	8a e0       	ldi	r24, 0x0A	; 10
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 2b 05 	call	0xa56	; 0xa56 <putchar>
     51e:	8d b7       	in	r24, 0x3d	; 61
     520:	9e b7       	in	r25, 0x3e	; 62
     522:	48 96       	adiw	r24, 0x18	; 24
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	9e bf       	out	0x3e, r25	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	8d bf       	out	0x3d, r24	; 61
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <usart0_putchar>:
		else if(input=='T') {
			motor_mode_L(MOTOR_L_FWD);
			motor_mode_R(MOTOR_R_FWD);	
			for(;;) {
			
				printf(PSTR("       76543210\n"));
     534:	1f 93       	push	r17
     536:	18 2f       	mov	r17, r24
				printf(PSTR("PORTB: "));print_bin(PORTB);printf("\n");
				printf(PSTR("PORTD: "));print_bin(PORTD);printf("\n");
     538:	8a 30       	cpi	r24, 0x0A	; 10
     53a:	19 f4       	brne	.+6      	; 0x542 <usart0_putchar+0xe>
			}
     53c:	8d e0       	ldi	r24, 0x0D	; 13
     53e:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
		}
     542:	80 91 c0 00 	lds	r24, 0x00C0
     546:	85 ff       	sbrs	r24, 5
     548:	fc cf       	rjmp	.-8      	; 0x542 <usart0_putchar+0xe>
		else {
     54a:	10 93 c6 00 	sts	0x00C6, r17
			printf(PSTR("\nInvalid Mode.\n"));
		}
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	1f 91       	pop	r17
     554:	08 95       	ret

00000556 <usart0_getchar>:
#include "motor.h"
#include "timers.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	7c 01       	movw	r14, r24
#include <util/delay.h>
#include <avr/pgmspace.h>

void clock_init(void) {
	
	#if   F_CPU == 1000000
     564:	80 91 b4 01 	lds	r24, 0x01B4
     568:	90 91 b5 01 	lds	r25, 0x01B5
     56c:	89 2b       	or	r24, r25
     56e:	09 f0       	breq	.+2      	; 0x572 <usart0_getchar+0x1c>
     570:	a0 c0       	rjmp	.+320    	; 0x6b2 <usart0_getchar+0x15c>
     572:	06 eb       	ldi	r16, 0xB6	; 182
     574:	11 e0       	ldi	r17, 0x01	; 1
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
     576:	80 91 c0 00 	lds	r24, 0x00C0
     57a:	87 ff       	sbrs	r24, 7
     57c:	fc cf       	rjmp	.-8      	; 0x576 <usart0_getchar+0x20>
		clock_prescale_set(clock_div_4);	
     57e:	80 91 c0 00 	lds	r24, 0x00C0
     582:	84 ff       	sbrs	r24, 4
     584:	03 c0       	rjmp	.+6      	; 0x58c <usart0_getchar+0x36>
     586:	2e ef       	ldi	r18, 0xFE	; 254
     588:	3f ef       	ldi	r19, 0xFF	; 255
     58a:	a7 c0       	rjmp	.+334    	; 0x6da <usart0_getchar+0x184>
	#elif F_CPU == 4000000
     58c:	80 91 c0 00 	lds	r24, 0x00C0
     590:	83 fd       	sbrc	r24, 3
     592:	a1 c0       	rjmp	.+322    	; 0x6d6 <usart0_getchar+0x180>
		clock_prescale_set(clock_div_2);	
     594:	90 91 c6 00 	lds	r25, 0x00C6
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     598:	9d 30       	cpi	r25, 0x0D	; 13
     59a:	11 f0       	breq	.+4      	; 0x5a0 <usart0_getchar+0x4a>
	#else
     59c:	9a 30       	cpi	r25, 0x0A	; 10
     59e:	69 f4       	brne	.+26     	; 0x5ba <usart0_getchar+0x64>
		#error "F_CPU Unrecognized"
     5a0:	8a e0       	ldi	r24, 0x0A	; 10
     5a2:	f8 01       	movw	r30, r16
     5a4:	80 83       	st	Z, r24
	#endif
     5a6:	b7 01       	movw	r22, r14
     5a8:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
	
     5ac:	86 eb       	ldi	r24, 0xB6	; 182
     5ae:	91 e0       	ldi	r25, 0x01	; 1
     5b0:	90 93 b5 01 	sts	0x01B5, r25
     5b4:	80 93 b4 01 	sts	0x01B4, r24
     5b8:	7c c0       	rjmp	.+248    	; 0x6b2 <usart0_getchar+0x15c>
	//OSCAL set by the bootloader.
}

     5ba:	99 30       	cpi	r25, 0x09	; 9
     5bc:	09 f4       	brne	.+2      	; 0x5c0 <usart0_getchar+0x6a>
     5be:	90 e2       	ldi	r25, 0x20	; 32

void  print_bin(uint8_t inp) {
     5c0:	89 2f       	mov	r24, r25
     5c2:	80 52       	subi	r24, 0x20	; 32
     5c4:	8f 35       	cpi	r24, 0x5F	; 95
     5c6:	10 f0       	brcs	.+4      	; 0x5cc <usart0_getchar+0x76>
     5c8:	90 3a       	cpi	r25, 0xA0	; 160
     5ca:	78 f0       	brcs	.+30     	; 0x5ea <usart0_getchar+0x94>
	for(int8_t j=7; j>=0; --j) {
     5cc:	f2 e0       	ldi	r31, 0x02	; 2
     5ce:	05 30       	cpi	r16, 0x05	; 5
     5d0:	1f 07       	cpc	r17, r31
     5d2:	19 f4       	brne	.+6      	; 0x5da <usart0_getchar+0x84>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     5d4:	b7 01       	movw	r22, r14
     5d6:	87 e0       	ldi	r24, 0x07	; 7
     5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <usart0_getchar+0x8e>
	}
}
     5da:	f8 01       	movw	r30, r16
     5dc:	91 93       	st	Z+, r25
     5de:	8f 01       	movw	r16, r30

     5e0:	b7 01       	movw	r22, r14
     5e2:	89 2f       	mov	r24, r25
     5e4:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
     5e8:	c6 cf       	rjmp	.-116    	; 0x576 <usart0_getchar+0x20>
void init(void) {
	cli();
	PCMSK1&=~(1<<PCINT15);
	power_lcd_disable();
	power_spi_disable();
     5ea:	92 31       	cpi	r25, 0x12	; 18
     5ec:	39 f1       	breq	.+78     	; 0x63c <usart0_getchar+0xe6>
     5ee:	93 31       	cpi	r25, 0x13	; 19
     5f0:	38 f4       	brcc	.+14     	; 0x600 <usart0_getchar+0xaa>
     5f2:	93 30       	cpi	r25, 0x03	; 3
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <usart0_getchar+0xa2>
     5f6:	6f c0       	rjmp	.+222    	; 0x6d6 <usart0_getchar+0x180>
     5f8:	98 30       	cpi	r25, 0x08	; 8
     5fa:	09 f0       	breq	.+2      	; 0x5fe <usart0_getchar+0xa8>
     5fc:	bc cf       	rjmp	.-136    	; 0x576 <usart0_getchar+0x20>
     5fe:	09 c0       	rjmp	.+18     	; 0x612 <usart0_getchar+0xbc>
     600:	97 31       	cpi	r25, 0x17	; 23
     602:	09 f4       	brne	.+2      	; 0x606 <usart0_getchar+0xb0>
     604:	4b c0       	rjmp	.+150    	; 0x69c <usart0_getchar+0x146>
     606:	9f 37       	cpi	r25, 0x7F	; 127
     608:	21 f0       	breq	.+8      	; 0x612 <usart0_getchar+0xbc>
     60a:	95 31       	cpi	r25, 0x15	; 21
     60c:	09 f0       	breq	.+2      	; 0x610 <usart0_getchar+0xba>
     60e:	b3 cf       	rjmp	.-154    	; 0x576 <usart0_getchar+0x20>
     610:	32 c0       	rjmp	.+100    	; 0x676 <usart0_getchar+0x120>
	clock_init();
	usart_init();
	timers_init();
	adc_init();
	MOTOR_CTL_DDR|=(uint8_t)((1<<M_AIN1)|(1<<M_AIN2)|(1<<M_BIN1)|(1<<M_BIN2));
	motor_mode_L(MOTOR_L_FWD);
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	06 3b       	cpi	r16, 0xB6	; 182
     616:	1f 07       	cpc	r17, r31
     618:	09 f0       	breq	.+2      	; 0x61c <usart0_getchar+0xc6>
     61a:	08 f4       	brcc	.+2      	; 0x61e <usart0_getchar+0xc8>
     61c:	ac cf       	rjmp	.-168    	; 0x576 <usart0_getchar+0x20>
	motor_mode_R(MOTOR_R_FWD);
     61e:	b7 01       	movw	r22, r14
     620:	88 e0       	ldi	r24, 0x08	; 8
     622:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
	sei(); //We use interupts, so enable them.
     626:	b7 01       	movw	r22, r14
     628:	80 e2       	ldi	r24, 0x20	; 32
     62a:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
	printf(PSTR(": Init: Done\n\n"));
     62e:	b7 01       	movw	r22, r14
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
}
     636:	01 50       	subi	r16, 0x01	; 1
     638:	10 40       	sbci	r17, 0x00	; 0
     63a:	9d cf       	rjmp	.-198    	; 0x576 <usart0_getchar+0x20>

int main(void) {
	init();
	set_motor_L(0);
	set_motor_R(0);
     63c:	b7 01       	movw	r22, r14
     63e:	8d e0       	ldi	r24, 0x0D	; 13
     640:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
     644:	c6 eb       	ldi	r28, 0xB6	; 182
     646:	d1 e0       	ldi	r29, 0x01	; 1
     648:	04 c0       	rjmp	.+8      	; 0x652 <usart0_getchar+0xfc>
		
	char input;
     64a:	b7 01       	movw	r22, r14
     64c:	89 91       	ld	r24, Y+
     64e:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>

int main(void) {
	init();
	set_motor_L(0);
	set_motor_R(0);
		
     652:	c0 17       	cp	r28, r16
     654:	d1 07       	cpc	r29, r17
     656:	c8 f3       	brcs	.-14     	; 0x64a <usart0_getchar+0xf4>
     658:	8e cf       	rjmp	.-228    	; 0x576 <usart0_getchar+0x20>
	char input;
	for(;;) {
		printf(PSTR("What ([T]est/[F]ollow): "));
		scanf("%c",&input);
		if (input=='F') {
			for (;;) {
     65a:	b7 01       	movw	r22, r14
     65c:	88 e0       	ldi	r24, 0x08	; 8
     65e:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
				uint16_t c_speed [2] = {get_motor_L(),get_motor_R()};
     662:	b7 01       	movw	r22, r14
     664:	80 e2       	ldi	r24, 0x20	; 32
     666:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
				printf("ML: %X\n",c_speed[0]);
     66a:	b7 01       	movw	r22, r14
     66c:	88 e0       	ldi	r24, 0x08	; 8
     66e:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
				printf("MR: %X\n",c_speed[1]);
     672:	01 50       	subi	r16, 0x01	; 1
     674:	10 40       	sbci	r17, 0x00	; 0
		
	char input;
	for(;;) {
		printf(PSTR("What ([T]est/[F]ollow): "));
		scanf("%c",&input);
		if (input=='F') {
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	06 3b       	cpi	r16, 0xB6	; 182
     67a:	18 07       	cpc	r17, r24
     67c:	09 f0       	breq	.+2      	; 0x680 <usart0_getchar+0x12a>
     67e:	68 f7       	brcc	.-38     	; 0x65a <usart0_getchar+0x104>
     680:	7a cf       	rjmp	.-268    	; 0x576 <usart0_getchar+0x20>
				print_adc_values();
		
				uint16_t adc_val_mixed [2] = {	adc_val[0] + adc_val[1] * LF_ADC_MIX_WIEGHT,	\
								adc_val[3] + adc_val[2] * LF_ADC_MIX_WIEGHT	};

				if (adc_val_mixed[0]>adc_val_mixed[1])
     682:	b7 01       	movw	r22, r14
     684:	88 e0       	ldi	r24, 0x08	; 8
     686:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
					lf_turn_left_inc(LF_INC);
     68a:	b7 01       	movw	r22, r14
     68c:	80 e2       	ldi	r24, 0x20	; 32
     68e:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
				else if (adc_val_mixed[1]>adc_val_mixed[0])
     692:	b7 01       	movw	r22, r14
     694:	88 e0       	ldi	r24, 0x08	; 8
     696:	0e 94 9a 02 	call	0x534	; 0x534 <usart0_putchar>
     69a:	8e 01       	movw	r16, r28
				printf("MR: %X\n",c_speed[1]);
				print_adc_values();
		
				uint16_t adc_val_mixed [2] = {	adc_val[0] + adc_val[1] * LF_ADC_MIX_WIEGHT,	\
								adc_val[3] + adc_val[2] * LF_ADC_MIX_WIEGHT	};

     69c:	e1 e0       	ldi	r30, 0x01	; 1
     69e:	06 3b       	cpi	r16, 0xB6	; 182
     6a0:	1e 07       	cpc	r17, r30
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <usart0_getchar+0x150>
     6a4:	08 f4       	brcc	.+2      	; 0x6a8 <usart0_getchar+0x152>
     6a6:	67 cf       	rjmp	.-306    	; 0x576 <usart0_getchar+0x20>
     6a8:	e8 01       	movw	r28, r16
     6aa:	8a 91       	ld	r24, -Y
     6ac:	80 32       	cpi	r24, 0x20	; 32
     6ae:	49 f7       	brne	.-46     	; 0x682 <usart0_getchar+0x12c>
     6b0:	62 cf       	rjmp	.-316    	; 0x576 <usart0_getchar+0x20>
				else
					lf_full_speed();

				_delay_ms(700);
			}
		}
     6b2:	e0 91 b4 01 	lds	r30, 0x01B4
     6b6:	f0 91 b5 01 	lds	r31, 0x01B5
     6ba:	81 91       	ld	r24, Z+
     6bc:	f0 93 b5 01 	sts	0x01B5, r31
     6c0:	e0 93 b4 01 	sts	0x01B4, r30
		else if(input=='T') {
     6c4:	8a 30       	cpi	r24, 0x0A	; 10
     6c6:	21 f4       	brne	.+8      	; 0x6d0 <usart0_getchar+0x17a>
     6c8:	10 92 b5 01 	sts	0x01B5, r1
     6cc:	10 92 b4 01 	sts	0x01B4, r1
			motor_mode_L(MOTOR_L_FWD);
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <usart0_getchar+0x184>
     6d6:	2f ef       	ldi	r18, 0xFF	; 255
     6d8:	3f ef       	ldi	r19, 0xFF	; 255
			motor_mode_R(MOTOR_R_FWD);	
     6da:	c9 01       	movw	r24, r18
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	08 95       	ret

000006ea <usart_init>:
     6ea:	e4 e6       	ldi	r30, 0x64	; 100
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	8d 7f       	andi	r24, 0xFD	; 253
     6f2:	80 83       	st	Z, r24
     6f4:	89 e1       	ldi	r24, 0x19	; 25
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	90 93 c5 00 	sts	0x00C5, r25
     6fc:	80 93 c4 00 	sts	0x00C4, r24
     700:	e0 ec       	ldi	r30, 0xC0	; 192
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	8d 7f       	andi	r24, 0xFD	; 253
     708:	80 83       	st	Z, r24
     70a:	88 e1       	ldi	r24, 0x18	; 24
     70c:	80 93 c1 00 	sts	0x00C1, r24
     710:	86 e0       	ldi	r24, 0x06	; 6
     712:	80 93 c2 00 	sts	0x00C2, r24
     716:	89 e7       	ldi	r24, 0x79	; 121
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	90 93 1d 02 	sts	0x021D, r25
     71e:	80 93 1c 02 	sts	0x021C, r24
     722:	90 93 1f 02 	sts	0x021F, r25
     726:	80 93 1e 02 	sts	0x021E, r24
     72a:	08 95       	ret

0000072c <timer2_init>:
     72c:	80 91 70 00 	lds	r24, 0x0070
     730:	8c 7f       	andi	r24, 0xFC	; 252
     732:	80 93 70 00 	sts	0x0070, r24
     736:	80 91 b6 00 	lds	r24, 0x00B6
     73a:	8f 7e       	andi	r24, 0xEF	; 239
     73c:	80 93 b6 00 	sts	0x00B6, r24
     740:	80 91 b6 00 	lds	r24, 0x00B6
     744:	88 60       	ori	r24, 0x08	; 8
     746:	80 93 b6 00 	sts	0x00B6, r24
     74a:	10 92 b2 00 	sts	0x00B2, r1
     74e:	80 91 b0 00 	lds	r24, 0x00B0
     752:	8f 77       	andi	r24, 0x7F	; 127
     754:	80 93 b0 00 	sts	0x00B0, r24
     758:	80 91 b0 00 	lds	r24, 0x00B0
     75c:	87 7b       	andi	r24, 0xB7	; 183
     75e:	80 93 b0 00 	sts	0x00B0, r24
     762:	80 91 b0 00 	lds	r24, 0x00B0
     766:	8f 7c       	andi	r24, 0xCF	; 207
     768:	80 93 b0 00 	sts	0x00B0, r24
     76c:	80 91 b0 00 	lds	r24, 0x00B0
     770:	85 60       	ori	r24, 0x05	; 5
     772:	80 93 b0 00 	sts	0x00B0, r24
     776:	80 91 b0 00 	lds	r24, 0x00B0
     77a:	8d 7f       	andi	r24, 0xFD	; 253
     77c:	80 93 b0 00 	sts	0x00B0, r24
     780:	80 91 b6 00 	lds	r24, 0x00B6
     784:	82 fd       	sbrc	r24, 2
     786:	fc cf       	rjmp	.-8      	; 0x780 <timer2_init+0x54>
     788:	80 91 b6 00 	lds	r24, 0x00B6
     78c:	81 fd       	sbrc	r24, 1
     78e:	fc cf       	rjmp	.-8      	; 0x788 <timer2_init+0x5c>
     790:	80 91 b6 00 	lds	r24, 0x00B6
     794:	80 fd       	sbrc	r24, 0
     796:	fc cf       	rjmp	.-8      	; 0x790 <timer2_init+0x64>
     798:	80 91 70 00 	lds	r24, 0x0070
     79c:	81 60       	ori	r24, 0x01	; 1
     79e:	80 93 70 00 	sts	0x0070, r24
     7a2:	08 95       	ret

000007a4 <timer1_init>:
     7a4:	e0 e8       	ldi	r30, 0x80	; 128
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	8f 70       	andi	r24, 0x0F	; 15
     7ac:	80 83       	st	Z, r24
     7ae:	80 81       	ld	r24, Z
     7b0:	8c 7f       	andi	r24, 0xFC	; 252
     7b2:	80 83       	st	Z, r24
     7b4:	e1 e8       	ldi	r30, 0x81	; 129
     7b6:	f0 e0       	ldi	r31, 0x00	; 0
     7b8:	80 81       	ld	r24, Z
     7ba:	80 62       	ori	r24, 0x20	; 32
     7bc:	80 83       	st	Z, r24
     7be:	80 81       	ld	r24, Z
     7c0:	80 61       	ori	r24, 0x10	; 16
     7c2:	80 83       	st	Z, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	87 7f       	andi	r24, 0xF7	; 247
     7c8:	80 83       	st	Z, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	80 68       	ori	r24, 0x80	; 128
     7ce:	80 83       	st	Z, r24
     7d0:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     7d2:	f8 94       	cli
     7d4:	8f ef       	ldi	r24, 0xFF	; 255
     7d6:	9f ef       	ldi	r25, 0xFF	; 255
     7d8:	90 93 87 00 	sts	0x0087, r25
     7dc:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     7e0:	2f bf       	out	0x3f, r18	; 63
     7e2:	e1 e8       	ldi	r30, 0x81	; 129
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	80 81       	ld	r24, Z
     7e8:	89 7f       	andi	r24, 0xF9	; 249
     7ea:	80 83       	st	Z, r24
     7ec:	80 81       	ld	r24, Z
     7ee:	81 60       	ori	r24, 0x01	; 1
     7f0:	80 83       	st	Z, r24
     7f2:	ef e6       	ldi	r30, 0x6F	; 111
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	88 7d       	andi	r24, 0xD8	; 216
     7fa:	80 83       	st	Z, r24
     7fc:	84 b1       	in	r24, 0x04	; 4
     7fe:	8c 60       	ori	r24, 0x0C	; 12
     800:	84 b9       	out	0x04, r24	; 4
     802:	08 95       	ret

00000804 <__vector_9>:
     804:	1f 92       	push	r1
     806:	0f 92       	push	r0
     808:	0f b6       	in	r0, 0x3f	; 63
     80a:	0f 92       	push	r0
     80c:	11 24       	eor	r1, r1
     80e:	8f 93       	push	r24
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 08 02 	sts	0x0208, r24
     816:	8f 91       	pop	r24
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	0f 90       	pop	r0
     81e:	1f 90       	pop	r1
     820:	18 95       	reti

00000822 <__vector_6>:
     822:	1f 92       	push	r1
     824:	0f 92       	push	r0
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	0f 92       	push	r0
     82a:	11 24       	eor	r1, r1
     82c:	10 92 08 02 	sts	0x0208, r1
     830:	0f 90       	pop	r0
     832:	0f be       	out	0x3f, r0	; 63
     834:	0f 90       	pop	r0
     836:	1f 90       	pop	r1
     838:	18 95       	reti

0000083a <__vector_7>:
     83a:	1f 92       	push	r1
     83c:	0f 92       	push	r0
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	0f 92       	push	r0
     842:	11 24       	eor	r1, r1
     844:	8f 93       	push	r24
     846:	80 91 08 02 	lds	r24, 0x0208
     84a:	88 23       	and	r24, r24
     84c:	11 f4       	brne	.+4      	; 0x852 <__vector_7+0x18>
     84e:	2a 98       	cbi	0x05, 2	; 5
     850:	01 c0       	rjmp	.+2      	; 0x854 <__vector_7+0x1a>
     852:	2a 9a       	sbi	0x05, 2	; 5
     854:	8f 91       	pop	r24
     856:	0f 90       	pop	r0
     858:	0f be       	out	0x3f, r0	; 63
     85a:	0f 90       	pop	r0
     85c:	1f 90       	pop	r1
     85e:	18 95       	reti

00000860 <__vector_8>:
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	8f 93       	push	r24
     86c:	80 91 08 02 	lds	r24, 0x0208
     870:	88 23       	and	r24, r24
     872:	11 f4       	brne	.+4      	; 0x878 <__vector_8+0x18>
     874:	2b 98       	cbi	0x05, 3	; 5
     876:	01 c0       	rjmp	.+2      	; 0x87a <__vector_8+0x1a>
     878:	2b 9a       	sbi	0x05, 3	; 5
     87a:	8f 91       	pop	r24
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <timers_init>:
     886:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <timer1_init>
     88a:	0e 94 96 03 	call	0x72c	; 0x72c <timer2_init>
     88e:	08 95       	ret

00000890 <__vector_5>:
     890:	1f 92       	push	r1
     892:	0f 92       	push	r0
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	0f 92       	push	r0
     898:	11 24       	eor	r1, r1
     89a:	8f 93       	push	r24
     89c:	9f 93       	push	r25
     89e:	80 91 06 02 	lds	r24, 0x0206
     8a2:	90 91 07 02 	lds	r25, 0x0207
     8a6:	01 96       	adiw	r24, 0x01	; 1
     8a8:	90 93 07 02 	sts	0x0207, r25
     8ac:	80 93 06 02 	sts	0x0206, r24
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	87 e8       	ldi	r24, 0x87	; 135
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	9f 91       	pop	r25
     8ca:	8f 91       	pop	r24
     8cc:	0f 90       	pop	r0
     8ce:	0f be       	out	0x3f, r0	; 63
     8d0:	0f 90       	pop	r0
     8d2:	1f 90       	pop	r1
     8d4:	18 95       	reti

000008d6 <get_motor_L>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8d6:	f8 94       	cli


uint16_t get_motor_L(void) {
	uint16_t temp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		temp=MOTOR_LEFT;
     8d8:	20 91 88 00 	lds	r18, 0x0088
     8dc:	30 91 89 00 	lds	r19, 0x0089
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     8e0:	78 94       	sei
	}
	return temp;
}
     8e2:	c9 01       	movw	r24, r18
     8e4:	08 95       	ret

000008e6 <get_motor_R>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8e6:	f8 94       	cli

uint16_t get_motor_R(void) {
	uint16_t temp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		temp=MOTOR_RIGHT;
     8e8:	20 91 8a 00 	lds	r18, 0x008A
     8ec:	30 91 8b 00 	lds	r19, 0x008B
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     8f0:	78 94       	sei
	}
	return temp;
}
     8f2:	c9 01       	movw	r24, r18
     8f4:	08 95       	ret

000008f6 <set_motor_L>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     8f6:	f8 94       	cli

void set_motor_L(uint16_t speed) {
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		MOTOR_LEFT=speed;
     8f8:	90 93 89 00 	sts	0x0089, r25
     8fc:	80 93 88 00 	sts	0x0088, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     900:	78 94       	sei
	}
}
     902:	08 95       	ret

00000904 <set_motor_R>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     904:	f8 94       	cli

void set_motor_R(uint16_t speed) {
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		MOTOR_RIGHT=speed;
     906:	90 93 8b 00 	sts	0x008B, r25
     90a:	80 93 8a 00 	sts	0x008A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     90e:	78 94       	sei
	}
}
     910:	08 95       	ret

00000912 <lf_turn_left_inc>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     912:	f8 94       	cli


uint16_t get_motor_L(void) {
	uint16_t temp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		temp=MOTOR_LEFT;
     914:	20 91 88 00 	lds	r18, 0x0088
     918:	30 91 89 00 	lds	r19, 0x0089
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     91c:	78 94       	sei
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     91e:	f8 94       	cli
}

uint16_t get_motor_R(void) {
	uint16_t temp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		temp=MOTOR_RIGHT;
     920:	40 91 8a 00 	lds	r20, 0x008A
     924:	50 91 8b 00 	lds	r21, 0x008B
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     928:	78 94       	sei
	if ((c_speed[LEFT] + inc) > LF_MAX_SPEED) {
		set_motor_L(c_speed[LEFT]+speed_diff_L);
		set_motor_R(c_speed[RIGHT]-(inc-speed_diff_L));
	}
	else
		set_motor_L(c_speed[LEFT]+inc);
     92a:	28 0f       	add	r18, r24
     92c:	39 1f       	adc	r19, r25
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     92e:	f8 94       	cli
	return temp;
}

void set_motor_L(uint16_t speed) {
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		MOTOR_LEFT=speed;
     930:	30 93 89 00 	sts	0x0089, r19
     934:	20 93 88 00 	sts	0x0088, r18
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     938:	78 94       	sei
	}
	else
		set_motor_L(c_speed[LEFT]+inc);
	//TODO: case when ((c_speed[RIGHT]-inc) < LF_MIN_SPEED)?
		
}
     93a:	08 95       	ret

0000093c <lf_turn_right_inc>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     93c:	f8 94       	cli


uint16_t get_motor_L(void) {
	uint16_t temp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		temp=MOTOR_LEFT;
     93e:	20 91 88 00 	lds	r18, 0x0088
     942:	30 91 89 00 	lds	r19, 0x0089
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     946:	78 94       	sei
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     948:	f8 94       	cli
}

uint16_t get_motor_R(void) {
	uint16_t temp;
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		temp=MOTOR_RIGHT;
     94a:	20 91 8a 00 	lds	r18, 0x008A
     94e:	30 91 8b 00 	lds	r19, 0x008B
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     952:	78 94       	sei
	if ((c_speed[RIGHT] + inc) > LF_MAX_SPEED) {
		set_motor_R(c_speed[RIGHT]+speed_diff_R);
		set_motor_L(c_speed[LEFT]-(inc-speed_diff_R));
	}
	else
		set_motor_R(c_speed[RIGHT]+inc);
     954:	28 0f       	add	r18, r24
     956:	39 1f       	adc	r19, r25
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     958:	f8 94       	cli
	}
}

void set_motor_R(uint16_t speed) {
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		MOTOR_RIGHT=speed;
     95a:	30 93 8b 00 	sts	0x008B, r19
     95e:	20 93 8a 00 	sts	0x008A, r18
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     962:	78 94       	sei
		set_motor_L(c_speed[LEFT]-(inc-speed_diff_R));
	}
	else
		set_motor_R(c_speed[RIGHT]+inc);
	//TODO: case when ((c_speed[RIGHT]-inc) < LF_MIN_SPEED)?
}
     964:	08 95       	ret

00000966 <lf_full_speed>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     966:	f8 94       	cli
	return temp;
}

void set_motor_L(uint16_t speed) {
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		MOTOR_LEFT=speed;
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	9f ef       	ldi	r25, 0xFF	; 255
     96c:	90 93 89 00 	sts	0x0089, r25
     970:	80 93 88 00 	sts	0x0088, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     974:	78 94       	sei
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     976:	f8 94       	cli
	}
}

void set_motor_R(uint16_t speed) {
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		MOTOR_RIGHT=speed;
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	9f ef       	ldi	r25, 0xFF	; 255
     97c:	90 93 8b 00 	sts	0x008B, r25
     980:	80 93 8a 00 	sts	0x008A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     984:	78 94       	sei
	//TODO: case when ((c_speed[RIGHT]-inc) < LF_MIN_SPEED)?
}
void lf_full_speed(void) {
	set_motor_L(LF_MAX_SPEED);
	set_motor_R(LF_MAX_SPEED);
}
     986:	08 95       	ret

00000988 <motor_mode_R>:
//		return c_mode;
	printf("motor L mode: %d\n",c_mode);
	return c_mode;
}

uint8_t motor_mode_R(uint8_t mode) {
     988:	98 2f       	mov	r25, r24
	static uint8_t c_mode; //=0;

	if 	(mode == MOTOR_MODE_CCW ) {
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	19 f4       	brne	.+6      	; 0x994 <motor_mode_R+0xc>
		MOTOR_CTL_PORT&=~(1<<M_RIN1); // IN1 = L, IN2 = H
     98e:	5d 98       	cbi	0x0b, 5	; 11
		MOTOR_CTL_PORT|=(1<<M_RIN2);
     990:	5f 9a       	sbi	0x0b, 7	; 11
     992:	0f c0       	rjmp	.+30     	; 0x9b2 <motor_mode_R+0x2a>
		c_mode = mode;
	}
	else if (mode == MOTOR_MODE_CW  ) {
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	19 f4       	brne	.+6      	; 0x99e <motor_mode_R+0x16>
		MOTOR_CTL_PORT|=(1<<M_RIN1);
     998:	5d 9a       	sbi	0x0b, 5	; 11
		MOTOR_CTL_PORT&=~(1<<M_RIN2); // IN1 = H, IN2 = L
     99a:	5f 98       	cbi	0x0b, 7	; 11
     99c:	0a c0       	rjmp	.+20     	; 0x9b2 <motor_mode_R+0x2a>
		c_mode = mode;
	}
	else if (mode == MOTOR_MODE_STOP) {
     99e:	83 30       	cpi	r24, 0x03	; 3
     9a0:	19 f4       	brne	.+6      	; 0x9a8 <motor_mode_R+0x20>
		MOTOR_CTL_PORT&=~((1<<M_RIN1)|(1<<M_RIN2)); // IN1 = L, IN2 = L
     9a2:	8b b1       	in	r24, 0x0b	; 11
     9a4:	8f 75       	andi	r24, 0x5F	; 95
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <motor_mode_R+0x28>
		c_mode = mode;
	}
	else if (mode == MOTOR_MODE_SB	) {
     9a8:	84 30       	cpi	r24, 0x04	; 4
     9aa:	29 f4       	brne	.+10     	; 0x9b6 <motor_mode_R+0x2e>
		MOTOR_CTL_PORT|=(1<<M_RIN1)|(1<<M_RIN2); // IN1 = H, IN2 = H
     9ac:	8b b1       	in	r24, 0x0b	; 11
     9ae:	80 6a       	ori	r24, 0xA0	; 160
     9b0:	8b b9       	out	0x0b, r24	; 11
		c_mode = mode;
     9b2:	90 93 09 02 	sts	0x0209, r25
	}
//	if	(mode == MOTOR_MODE_GET )
//		return c_mode;
	printf("motor R mode: %d\n",c_mode);
     9b6:	80 91 09 02 	lds	r24, 0x0209
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	9f 93       	push	r25
     9be:	8f 93       	push	r24
     9c0:	80 e9       	ldi	r24, 0x90	; 144
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
	return c_mode;
}
     9d4:	80 91 09 02 	lds	r24, 0x0209
     9d8:	08 95       	ret

000009da <motor_mode_L>:
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		MOTOR_RIGHT=speed;
	}
}

uint8_t motor_mode_L(uint8_t mode) {
     9da:	98 2f       	mov	r25, r24
	static uint8_t c_mode; //=0;

	if 	(mode == MOTOR_MODE_CCW ) {
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	19 f4       	brne	.+6      	; 0x9e6 <motor_mode_L+0xc>
		MOTOR_CTL_PORT&=~(1<<M_LIN1); // IN1 = L, IN2 = H
     9e0:	59 98       	cbi	0x0b, 1	; 11
		MOTOR_CTL_PORT|=(1<<M_LIN2);
     9e2:	5b 9a       	sbi	0x0b, 3	; 11
     9e4:	0f c0       	rjmp	.+30     	; 0xa04 <motor_mode_L+0x2a>
		c_mode = mode;
	}
	else if (mode == MOTOR_MODE_CW  ) {
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	19 f4       	brne	.+6      	; 0x9f0 <motor_mode_L+0x16>
		MOTOR_CTL_PORT|=(1<<M_LIN1);
     9ea:	59 9a       	sbi	0x0b, 1	; 11
		MOTOR_CTL_PORT&=~(1<<M_LIN2); // IN1 = H, IN2 = L
     9ec:	5b 98       	cbi	0x0b, 3	; 11
     9ee:	0a c0       	rjmp	.+20     	; 0xa04 <motor_mode_L+0x2a>
		c_mode = mode;
	}
	else if (mode == MOTOR_MODE_STOP) {
     9f0:	83 30       	cpi	r24, 0x03	; 3
     9f2:	19 f4       	brne	.+6      	; 0x9fa <motor_mode_L+0x20>
		MOTOR_CTL_PORT&=~((1<<M_LIN1)|(1<<M_LIN2)); // IN1 = L, IN2 = L
     9f4:	8b b1       	in	r24, 0x0b	; 11
     9f6:	85 7f       	andi	r24, 0xF5	; 245
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <motor_mode_L+0x28>
		c_mode = mode;
	}
	else if (mode == MOTOR_MODE_SB	) {
     9fa:	84 30       	cpi	r24, 0x04	; 4
     9fc:	29 f4       	brne	.+10     	; 0xa08 <motor_mode_L+0x2e>
		MOTOR_CTL_PORT|=(1<<M_LIN1)|(1<<M_LIN2); // IN1 = H, IN2 = H
     9fe:	8b b1       	in	r24, 0x0b	; 11
     a00:	8a 60       	ori	r24, 0x0A	; 10
     a02:	8b b9       	out	0x0b, r24	; 11
		c_mode = mode;
     a04:	90 93 0a 02 	sts	0x020A, r25
	}
//	if	(mode == MOTOR_MODE_GET )
//		return c_mode;
	printf("motor L mode: %d\n",c_mode);
     a08:	80 91 0a 02 	lds	r24, 0x020A
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	82 ea       	ldi	r24, 0xA2	; 162
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	0e 94 16 05 	call	0xa2c	; 0xa2c <printf>
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
	return c_mode;
}
     a26:	80 91 0a 02 	lds	r24, 0x020A
     a2a:	08 95       	ret

00000a2c <printf>:
     a2c:	a0 e0       	ldi	r26, 0x00	; 0
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	ec e1       	ldi	r30, 0x1C	; 28
     a32:	f5 e0       	ldi	r31, 0x05	; 5
     a34:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__prologue_saves__+0x20>
     a38:	fe 01       	movw	r30, r28
     a3a:	35 96       	adiw	r30, 0x05	; 5
     a3c:	61 91       	ld	r22, Z+
     a3e:	71 91       	ld	r23, Z+
     a40:	af 01       	movw	r20, r30
     a42:	80 91 1e 02 	lds	r24, 0x021E
     a46:	90 91 1f 02 	lds	r25, 0x021F
     a4a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <vfprintf>
     a4e:	20 96       	adiw	r28, 0x00	; 0
     a50:	e2 e0       	ldi	r30, 0x02	; 2
     a52:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__epilogue_restores__+0x20>

00000a56 <putchar>:
     a56:	60 91 1e 02 	lds	r22, 0x021E
     a5a:	70 91 1f 02 	lds	r23, 0x021F
     a5e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     a62:	08 95       	ret

00000a64 <puts>:
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	8c 01       	movw	r16, r24
     a6e:	e0 91 1e 02 	lds	r30, 0x021E
     a72:	f0 91 1f 02 	lds	r31, 0x021F
     a76:	83 81       	ldd	r24, Z+3	; 0x03
     a78:	81 ff       	sbrs	r24, 1
     a7a:	21 c0       	rjmp	.+66     	; 0xabe <puts+0x5a>
     a7c:	c0 e0       	ldi	r28, 0x00	; 0
     a7e:	d0 e0       	ldi	r29, 0x00	; 0
     a80:	0d c0       	rjmp	.+26     	; 0xa9c <puts+0x38>
     a82:	e0 91 1e 02 	lds	r30, 0x021E
     a86:	f0 91 1f 02 	lds	r31, 0x021F
     a8a:	20 85       	ldd	r18, Z+8	; 0x08
     a8c:	31 85       	ldd	r19, Z+9	; 0x09
     a8e:	bf 01       	movw	r22, r30
     a90:	f9 01       	movw	r30, r18
     a92:	09 95       	icall
     a94:	89 2b       	or	r24, r25
     a96:	11 f0       	breq	.+4      	; 0xa9c <puts+0x38>
     a98:	cf ef       	ldi	r28, 0xFF	; 255
     a9a:	df ef       	ldi	r29, 0xFF	; 255
     a9c:	f8 01       	movw	r30, r16
     a9e:	81 91       	ld	r24, Z+
     aa0:	8f 01       	movw	r16, r30
     aa2:	88 23       	and	r24, r24
     aa4:	71 f7       	brne	.-36     	; 0xa82 <puts+0x1e>
     aa6:	e0 91 1e 02 	lds	r30, 0x021E
     aaa:	f0 91 1f 02 	lds	r31, 0x021F
     aae:	20 85       	ldd	r18, Z+8	; 0x08
     ab0:	31 85       	ldd	r19, Z+9	; 0x09
     ab2:	bf 01       	movw	r22, r30
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	f9 01       	movw	r30, r18
     ab8:	09 95       	icall
     aba:	89 2b       	or	r24, r25
     abc:	11 f0       	breq	.+4      	; 0xac2 <puts+0x5e>
     abe:	cf ef       	ldi	r28, 0xFF	; 255
     ac0:	df ef       	ldi	r29, 0xFF	; 255
     ac2:	ce 01       	movw	r24, r28
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	08 95       	ret

00000ace <scanf>:
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	ed e6       	ldi	r30, 0x6D	; 109
     ad4:	f5 e0       	ldi	r31, 0x05	; 5
     ad6:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <__prologue_saves__+0x20>
     ada:	fe 01       	movw	r30, r28
     adc:	35 96       	adiw	r30, 0x05	; 5
     ade:	61 91       	ld	r22, Z+
     ae0:	71 91       	ld	r23, Z+
     ae2:	af 01       	movw	r20, r30
     ae4:	80 91 1c 02 	lds	r24, 0x021C
     ae8:	90 91 1d 02 	lds	r25, 0x021D
     aec:	0e 94 df 08 	call	0x11be	; 0x11be <vfscanf>
     af0:	20 96       	adiw	r28, 0x00	; 0
     af2:	e2 e0       	ldi	r30, 0x02	; 2
     af4:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__epilogue_restores__+0x20>

00000af8 <vfprintf>:
     af8:	ab e0       	ldi	r26, 0x0B	; 11
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e2 e8       	ldi	r30, 0x82	; 130
     afe:	f5 e0       	ldi	r31, 0x05	; 5
     b00:	0c 94 02 0b 	jmp	0x1604	; 0x1604 <__prologue_saves__>
     b04:	3c 01       	movw	r6, r24
     b06:	2b 01       	movw	r4, r22
     b08:	5a 01       	movw	r10, r20
     b0a:	fc 01       	movw	r30, r24
     b0c:	17 82       	std	Z+7, r1	; 0x07
     b0e:	16 82       	std	Z+6, r1	; 0x06
     b10:	83 81       	ldd	r24, Z+3	; 0x03
     b12:	81 fd       	sbrc	r24, 1
     b14:	03 c0       	rjmp	.+6      	; 0xb1c <vfprintf+0x24>
     b16:	6f ef       	ldi	r22, 0xFF	; 255
     b18:	7f ef       	ldi	r23, 0xFF	; 255
     b1a:	c8 c1       	rjmp	.+912    	; 0xeac <vfprintf+0x3b4>
     b1c:	9a e0       	ldi	r25, 0x0A	; 10
     b1e:	89 2e       	mov	r8, r25
     b20:	1e 01       	movw	r2, r28
     b22:	08 94       	sec
     b24:	21 1c       	adc	r2, r1
     b26:	31 1c       	adc	r3, r1
     b28:	f3 01       	movw	r30, r6
     b2a:	23 81       	ldd	r18, Z+3	; 0x03
     b2c:	f2 01       	movw	r30, r4
     b2e:	23 fd       	sbrc	r18, 3
     b30:	85 91       	lpm	r24, Z+
     b32:	23 ff       	sbrs	r18, 3
     b34:	81 91       	ld	r24, Z+
     b36:	2f 01       	movw	r4, r30
     b38:	88 23       	and	r24, r24
     b3a:	09 f4       	brne	.+2      	; 0xb3e <vfprintf+0x46>
     b3c:	b4 c1       	rjmp	.+872    	; 0xea6 <vfprintf+0x3ae>
     b3e:	85 32       	cpi	r24, 0x25	; 37
     b40:	39 f4       	brne	.+14     	; 0xb50 <vfprintf+0x58>
     b42:	23 fd       	sbrc	r18, 3
     b44:	85 91       	lpm	r24, Z+
     b46:	23 ff       	sbrs	r18, 3
     b48:	81 91       	ld	r24, Z+
     b4a:	2f 01       	movw	r4, r30
     b4c:	85 32       	cpi	r24, 0x25	; 37
     b4e:	29 f4       	brne	.+10     	; 0xb5a <vfprintf+0x62>
     b50:	b3 01       	movw	r22, r6
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     b58:	e7 cf       	rjmp	.-50     	; 0xb28 <vfprintf+0x30>
     b5a:	98 2f       	mov	r25, r24
     b5c:	dd 24       	eor	r13, r13
     b5e:	cc 24       	eor	r12, r12
     b60:	99 24       	eor	r9, r9
     b62:	ff e1       	ldi	r31, 0x1F	; 31
     b64:	fd 15       	cp	r31, r13
     b66:	d0 f0       	brcs	.+52     	; 0xb9c <vfprintf+0xa4>
     b68:	9b 32       	cpi	r25, 0x2B	; 43
     b6a:	69 f0       	breq	.+26     	; 0xb86 <vfprintf+0x8e>
     b6c:	9c 32       	cpi	r25, 0x2C	; 44
     b6e:	28 f4       	brcc	.+10     	; 0xb7a <vfprintf+0x82>
     b70:	90 32       	cpi	r25, 0x20	; 32
     b72:	59 f0       	breq	.+22     	; 0xb8a <vfprintf+0x92>
     b74:	93 32       	cpi	r25, 0x23	; 35
     b76:	91 f4       	brne	.+36     	; 0xb9c <vfprintf+0xa4>
     b78:	0e c0       	rjmp	.+28     	; 0xb96 <vfprintf+0x9e>
     b7a:	9d 32       	cpi	r25, 0x2D	; 45
     b7c:	49 f0       	breq	.+18     	; 0xb90 <vfprintf+0x98>
     b7e:	90 33       	cpi	r25, 0x30	; 48
     b80:	69 f4       	brne	.+26     	; 0xb9c <vfprintf+0xa4>
     b82:	41 e0       	ldi	r20, 0x01	; 1
     b84:	24 c0       	rjmp	.+72     	; 0xbce <vfprintf+0xd6>
     b86:	52 e0       	ldi	r21, 0x02	; 2
     b88:	d5 2a       	or	r13, r21
     b8a:	84 e0       	ldi	r24, 0x04	; 4
     b8c:	d8 2a       	or	r13, r24
     b8e:	28 c0       	rjmp	.+80     	; 0xbe0 <vfprintf+0xe8>
     b90:	98 e0       	ldi	r25, 0x08	; 8
     b92:	d9 2a       	or	r13, r25
     b94:	25 c0       	rjmp	.+74     	; 0xbe0 <vfprintf+0xe8>
     b96:	e0 e1       	ldi	r30, 0x10	; 16
     b98:	de 2a       	or	r13, r30
     b9a:	22 c0       	rjmp	.+68     	; 0xbe0 <vfprintf+0xe8>
     b9c:	d7 fc       	sbrc	r13, 7
     b9e:	29 c0       	rjmp	.+82     	; 0xbf2 <vfprintf+0xfa>
     ba0:	89 2f       	mov	r24, r25
     ba2:	80 53       	subi	r24, 0x30	; 48
     ba4:	8a 30       	cpi	r24, 0x0A	; 10
     ba6:	70 f4       	brcc	.+28     	; 0xbc4 <vfprintf+0xcc>
     ba8:	d6 fe       	sbrs	r13, 6
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <vfprintf+0xbe>
     bac:	98 9c       	mul	r9, r8
     bae:	90 2c       	mov	r9, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	98 0e       	add	r9, r24
     bb4:	15 c0       	rjmp	.+42     	; 0xbe0 <vfprintf+0xe8>
     bb6:	c8 9c       	mul	r12, r8
     bb8:	c0 2c       	mov	r12, r0
     bba:	11 24       	eor	r1, r1
     bbc:	c8 0e       	add	r12, r24
     bbe:	f0 e2       	ldi	r31, 0x20	; 32
     bc0:	df 2a       	or	r13, r31
     bc2:	0e c0       	rjmp	.+28     	; 0xbe0 <vfprintf+0xe8>
     bc4:	9e 32       	cpi	r25, 0x2E	; 46
     bc6:	29 f4       	brne	.+10     	; 0xbd2 <vfprintf+0xda>
     bc8:	d6 fc       	sbrc	r13, 6
     bca:	6d c1       	rjmp	.+730    	; 0xea6 <vfprintf+0x3ae>
     bcc:	40 e4       	ldi	r20, 0x40	; 64
     bce:	d4 2a       	or	r13, r20
     bd0:	07 c0       	rjmp	.+14     	; 0xbe0 <vfprintf+0xe8>
     bd2:	9c 36       	cpi	r25, 0x6C	; 108
     bd4:	19 f4       	brne	.+6      	; 0xbdc <vfprintf+0xe4>
     bd6:	50 e8       	ldi	r21, 0x80	; 128
     bd8:	d5 2a       	or	r13, r21
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0xe8>
     bdc:	98 36       	cpi	r25, 0x68	; 104
     bde:	49 f4       	brne	.+18     	; 0xbf2 <vfprintf+0xfa>
     be0:	f2 01       	movw	r30, r4
     be2:	23 fd       	sbrc	r18, 3
     be4:	95 91       	lpm	r25, Z+
     be6:	23 ff       	sbrs	r18, 3
     be8:	91 91       	ld	r25, Z+
     bea:	2f 01       	movw	r4, r30
     bec:	99 23       	and	r25, r25
     bee:	09 f0       	breq	.+2      	; 0xbf2 <vfprintf+0xfa>
     bf0:	b8 cf       	rjmp	.-144    	; 0xb62 <vfprintf+0x6a>
     bf2:	89 2f       	mov	r24, r25
     bf4:	85 54       	subi	r24, 0x45	; 69
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	18 f0       	brcs	.+6      	; 0xc00 <vfprintf+0x108>
     bfa:	80 52       	subi	r24, 0x20	; 32
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	38 f4       	brcc	.+14     	; 0xc0e <vfprintf+0x116>
     c00:	44 e0       	ldi	r20, 0x04	; 4
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	a4 0e       	add	r10, r20
     c06:	b5 1e       	adc	r11, r21
     c08:	5f e3       	ldi	r21, 0x3F	; 63
     c0a:	59 83       	std	Y+1, r21	; 0x01
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <vfprintf+0x134>
     c0e:	93 36       	cpi	r25, 0x63	; 99
     c10:	31 f0       	breq	.+12     	; 0xc1e <vfprintf+0x126>
     c12:	93 37       	cpi	r25, 0x73	; 115
     c14:	79 f0       	breq	.+30     	; 0xc34 <vfprintf+0x13c>
     c16:	93 35       	cpi	r25, 0x53	; 83
     c18:	09 f0       	breq	.+2      	; 0xc1c <vfprintf+0x124>
     c1a:	56 c0       	rjmp	.+172    	; 0xcc8 <vfprintf+0x1d0>
     c1c:	20 c0       	rjmp	.+64     	; 0xc5e <vfprintf+0x166>
     c1e:	f5 01       	movw	r30, r10
     c20:	80 81       	ld	r24, Z
     c22:	89 83       	std	Y+1, r24	; 0x01
     c24:	42 e0       	ldi	r20, 0x02	; 2
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	a4 0e       	add	r10, r20
     c2a:	b5 1e       	adc	r11, r21
     c2c:	71 01       	movw	r14, r2
     c2e:	01 e0       	ldi	r16, 0x01	; 1
     c30:	10 e0       	ldi	r17, 0x00	; 0
     c32:	12 c0       	rjmp	.+36     	; 0xc58 <vfprintf+0x160>
     c34:	f5 01       	movw	r30, r10
     c36:	e0 80       	ld	r14, Z
     c38:	f1 80       	ldd	r15, Z+1	; 0x01
     c3a:	d6 fc       	sbrc	r13, 6
     c3c:	03 c0       	rjmp	.+6      	; 0xc44 <vfprintf+0x14c>
     c3e:	6f ef       	ldi	r22, 0xFF	; 255
     c40:	7f ef       	ldi	r23, 0xFF	; 255
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <vfprintf+0x150>
     c44:	69 2d       	mov	r22, r9
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	42 e0       	ldi	r20, 0x02	; 2
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	a4 0e       	add	r10, r20
     c4e:	b5 1e       	adc	r11, r21
     c50:	c7 01       	movw	r24, r14
     c52:	0e 94 06 0a 	call	0x140c	; 0x140c <strnlen>
     c56:	8c 01       	movw	r16, r24
     c58:	5f e7       	ldi	r21, 0x7F	; 127
     c5a:	d5 22       	and	r13, r21
     c5c:	14 c0       	rjmp	.+40     	; 0xc86 <vfprintf+0x18e>
     c5e:	f5 01       	movw	r30, r10
     c60:	e0 80       	ld	r14, Z
     c62:	f1 80       	ldd	r15, Z+1	; 0x01
     c64:	d6 fc       	sbrc	r13, 6
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <vfprintf+0x176>
     c68:	6f ef       	ldi	r22, 0xFF	; 255
     c6a:	7f ef       	ldi	r23, 0xFF	; 255
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <vfprintf+0x17a>
     c6e:	69 2d       	mov	r22, r9
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	42 e0       	ldi	r20, 0x02	; 2
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	a4 0e       	add	r10, r20
     c78:	b5 1e       	adc	r11, r21
     c7a:	c7 01       	movw	r24, r14
     c7c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <strnlen_P>
     c80:	8c 01       	movw	r16, r24
     c82:	50 e8       	ldi	r21, 0x80	; 128
     c84:	d5 2a       	or	r13, r21
     c86:	d3 fe       	sbrs	r13, 3
     c88:	07 c0       	rjmp	.+14     	; 0xc98 <vfprintf+0x1a0>
     c8a:	1a c0       	rjmp	.+52     	; 0xcc0 <vfprintf+0x1c8>
     c8c:	b3 01       	movw	r22, r6
     c8e:	80 e2       	ldi	r24, 0x20	; 32
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     c96:	ca 94       	dec	r12
     c98:	8c 2d       	mov	r24, r12
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	08 17       	cp	r16, r24
     c9e:	19 07       	cpc	r17, r25
     ca0:	a8 f3       	brcs	.-22     	; 0xc8c <vfprintf+0x194>
     ca2:	0e c0       	rjmp	.+28     	; 0xcc0 <vfprintf+0x1c8>
     ca4:	f7 01       	movw	r30, r14
     ca6:	d7 fc       	sbrc	r13, 7
     ca8:	85 91       	lpm	r24, Z+
     caa:	d7 fe       	sbrs	r13, 7
     cac:	81 91       	ld	r24, Z+
     cae:	7f 01       	movw	r14, r30
     cb0:	b3 01       	movw	r22, r6
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     cb8:	c1 10       	cpse	r12, r1
     cba:	ca 94       	dec	r12
     cbc:	01 50       	subi	r16, 0x01	; 1
     cbe:	10 40       	sbci	r17, 0x00	; 0
     cc0:	01 15       	cp	r16, r1
     cc2:	11 05       	cpc	r17, r1
     cc4:	79 f7       	brne	.-34     	; 0xca4 <vfprintf+0x1ac>
     cc6:	ec c0       	rjmp	.+472    	; 0xea0 <vfprintf+0x3a8>
     cc8:	94 36       	cpi	r25, 0x64	; 100
     cca:	11 f0       	breq	.+4      	; 0xcd0 <vfprintf+0x1d8>
     ccc:	99 36       	cpi	r25, 0x69	; 105
     cce:	71 f5       	brne	.+92     	; 0xd2c <vfprintf+0x234>
     cd0:	d7 fe       	sbrs	r13, 7
     cd2:	08 c0       	rjmp	.+16     	; 0xce4 <vfprintf+0x1ec>
     cd4:	f5 01       	movw	r30, r10
     cd6:	e0 80       	ld	r14, Z
     cd8:	f1 80       	ldd	r15, Z+1	; 0x01
     cda:	02 81       	ldd	r16, Z+2	; 0x02
     cdc:	13 81       	ldd	r17, Z+3	; 0x03
     cde:	44 e0       	ldi	r20, 0x04	; 4
     ce0:	50 e0       	ldi	r21, 0x00	; 0
     ce2:	0a c0       	rjmp	.+20     	; 0xcf8 <vfprintf+0x200>
     ce4:	f5 01       	movw	r30, r10
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	7c 01       	movw	r14, r24
     cec:	00 27       	eor	r16, r16
     cee:	f7 fc       	sbrc	r15, 7
     cf0:	00 95       	com	r16
     cf2:	10 2f       	mov	r17, r16
     cf4:	42 e0       	ldi	r20, 0x02	; 2
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	a4 0e       	add	r10, r20
     cfa:	b5 1e       	adc	r11, r21
     cfc:	5f e6       	ldi	r21, 0x6F	; 111
     cfe:	d5 22       	and	r13, r21
     d00:	17 ff       	sbrs	r17, 7
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <vfprintf+0x220>
     d04:	10 95       	com	r17
     d06:	00 95       	com	r16
     d08:	f0 94       	com	r15
     d0a:	e0 94       	com	r14
     d0c:	e1 1c       	adc	r14, r1
     d0e:	f1 1c       	adc	r15, r1
     d10:	01 1d       	adc	r16, r1
     d12:	11 1d       	adc	r17, r1
     d14:	80 e8       	ldi	r24, 0x80	; 128
     d16:	d8 2a       	or	r13, r24
     d18:	2a e0       	ldi	r18, 0x0A	; 10
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	a1 01       	movw	r20, r2
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	0e 94 99 0a 	call	0x1532	; 0x1532 <__ultoa_invert>
     d26:	f8 2e       	mov	r15, r24
     d28:	f2 18       	sub	r15, r2
     d2a:	40 c0       	rjmp	.+128    	; 0xdac <vfprintf+0x2b4>
     d2c:	95 37       	cpi	r25, 0x75	; 117
     d2e:	29 f4       	brne	.+10     	; 0xd3a <vfprintf+0x242>
     d30:	1d 2d       	mov	r17, r13
     d32:	1f 7e       	andi	r17, 0xEF	; 239
     d34:	2a e0       	ldi	r18, 0x0A	; 10
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	1d c0       	rjmp	.+58     	; 0xd74 <vfprintf+0x27c>
     d3a:	1d 2d       	mov	r17, r13
     d3c:	19 7f       	andi	r17, 0xF9	; 249
     d3e:	9f 36       	cpi	r25, 0x6F	; 111
     d40:	61 f0       	breq	.+24     	; 0xd5a <vfprintf+0x262>
     d42:	90 37       	cpi	r25, 0x70	; 112
     d44:	20 f4       	brcc	.+8      	; 0xd4e <vfprintf+0x256>
     d46:	98 35       	cpi	r25, 0x58	; 88
     d48:	09 f0       	breq	.+2      	; 0xd4c <vfprintf+0x254>
     d4a:	ad c0       	rjmp	.+346    	; 0xea6 <vfprintf+0x3ae>
     d4c:	0f c0       	rjmp	.+30     	; 0xd6c <vfprintf+0x274>
     d4e:	90 37       	cpi	r25, 0x70	; 112
     d50:	39 f0       	breq	.+14     	; 0xd60 <vfprintf+0x268>
     d52:	98 37       	cpi	r25, 0x78	; 120
     d54:	09 f0       	breq	.+2      	; 0xd58 <vfprintf+0x260>
     d56:	a7 c0       	rjmp	.+334    	; 0xea6 <vfprintf+0x3ae>
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <vfprintf+0x26a>
     d5a:	28 e0       	ldi	r18, 0x08	; 8
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	0a c0       	rjmp	.+20     	; 0xd74 <vfprintf+0x27c>
     d60:	10 61       	ori	r17, 0x10	; 16
     d62:	14 fd       	sbrc	r17, 4
     d64:	14 60       	ori	r17, 0x04	; 4
     d66:	20 e1       	ldi	r18, 0x10	; 16
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <vfprintf+0x27c>
     d6c:	14 fd       	sbrc	r17, 4
     d6e:	16 60       	ori	r17, 0x06	; 6
     d70:	20 e1       	ldi	r18, 0x10	; 16
     d72:	32 e0       	ldi	r19, 0x02	; 2
     d74:	17 ff       	sbrs	r17, 7
     d76:	08 c0       	rjmp	.+16     	; 0xd88 <vfprintf+0x290>
     d78:	f5 01       	movw	r30, r10
     d7a:	60 81       	ld	r22, Z
     d7c:	71 81       	ldd	r23, Z+1	; 0x01
     d7e:	82 81       	ldd	r24, Z+2	; 0x02
     d80:	93 81       	ldd	r25, Z+3	; 0x03
     d82:	44 e0       	ldi	r20, 0x04	; 4
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	08 c0       	rjmp	.+16     	; 0xd98 <vfprintf+0x2a0>
     d88:	f5 01       	movw	r30, r10
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	bc 01       	movw	r22, r24
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	42 e0       	ldi	r20, 0x02	; 2
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	a4 0e       	add	r10, r20
     d9a:	b5 1e       	adc	r11, r21
     d9c:	a1 01       	movw	r20, r2
     d9e:	0e 94 99 0a 	call	0x1532	; 0x1532 <__ultoa_invert>
     da2:	f8 2e       	mov	r15, r24
     da4:	f2 18       	sub	r15, r2
     da6:	8f e7       	ldi	r24, 0x7F	; 127
     da8:	d8 2e       	mov	r13, r24
     daa:	d1 22       	and	r13, r17
     dac:	d6 fe       	sbrs	r13, 6
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <vfprintf+0x2ce>
     db0:	5e ef       	ldi	r21, 0xFE	; 254
     db2:	d5 22       	and	r13, r21
     db4:	f9 14       	cp	r15, r9
     db6:	38 f4       	brcc	.+14     	; 0xdc6 <vfprintf+0x2ce>
     db8:	d4 fe       	sbrs	r13, 4
     dba:	07 c0       	rjmp	.+14     	; 0xdca <vfprintf+0x2d2>
     dbc:	d2 fc       	sbrc	r13, 2
     dbe:	05 c0       	rjmp	.+10     	; 0xdca <vfprintf+0x2d2>
     dc0:	8f ee       	ldi	r24, 0xEF	; 239
     dc2:	d8 22       	and	r13, r24
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <vfprintf+0x2d2>
     dc6:	1f 2d       	mov	r17, r15
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <vfprintf+0x2d4>
     dca:	19 2d       	mov	r17, r9
     dcc:	d4 fe       	sbrs	r13, 4
     dce:	0d c0       	rjmp	.+26     	; 0xdea <vfprintf+0x2f2>
     dd0:	fe 01       	movw	r30, r28
     dd2:	ef 0d       	add	r30, r15
     dd4:	f1 1d       	adc	r31, r1
     dd6:	80 81       	ld	r24, Z
     dd8:	80 33       	cpi	r24, 0x30	; 48
     dda:	19 f4       	brne	.+6      	; 0xde2 <vfprintf+0x2ea>
     ddc:	99 ee       	ldi	r25, 0xE9	; 233
     dde:	d9 22       	and	r13, r25
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <vfprintf+0x2fa>
     de2:	1f 5f       	subi	r17, 0xFF	; 255
     de4:	d2 fe       	sbrs	r13, 2
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <vfprintf+0x2fa>
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <vfprintf+0x2f8>
     dea:	8d 2d       	mov	r24, r13
     dec:	86 78       	andi	r24, 0x86	; 134
     dee:	09 f0       	breq	.+2      	; 0xdf2 <vfprintf+0x2fa>
     df0:	1f 5f       	subi	r17, 0xFF	; 255
     df2:	0d 2d       	mov	r16, r13
     df4:	d3 fc       	sbrc	r13, 3
     df6:	14 c0       	rjmp	.+40     	; 0xe20 <vfprintf+0x328>
     df8:	d0 fe       	sbrs	r13, 0
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <vfprintf+0x322>
     dfc:	1c 15       	cp	r17, r12
     dfe:	10 f0       	brcs	.+4      	; 0xe04 <vfprintf+0x30c>
     e00:	9f 2c       	mov	r9, r15
     e02:	0b c0       	rjmp	.+22     	; 0xe1a <vfprintf+0x322>
     e04:	9f 2c       	mov	r9, r15
     e06:	9c 0c       	add	r9, r12
     e08:	91 1a       	sub	r9, r17
     e0a:	1c 2d       	mov	r17, r12
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x322>
     e0e:	b3 01       	movw	r22, r6
     e10:	80 e2       	ldi	r24, 0x20	; 32
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     e18:	1f 5f       	subi	r17, 0xFF	; 255
     e1a:	1c 15       	cp	r17, r12
     e1c:	c0 f3       	brcs	.-16     	; 0xe0e <vfprintf+0x316>
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <vfprintf+0x330>
     e20:	1c 15       	cp	r17, r12
     e22:	10 f4       	brcc	.+4      	; 0xe28 <vfprintf+0x330>
     e24:	c1 1a       	sub	r12, r17
     e26:	01 c0       	rjmp	.+2      	; 0xe2a <vfprintf+0x332>
     e28:	cc 24       	eor	r12, r12
     e2a:	04 ff       	sbrs	r16, 4
     e2c:	10 c0       	rjmp	.+32     	; 0xe4e <vfprintf+0x356>
     e2e:	b3 01       	movw	r22, r6
     e30:	80 e3       	ldi	r24, 0x30	; 48
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     e38:	02 ff       	sbrs	r16, 2
     e3a:	1e c0       	rjmp	.+60     	; 0xe78 <vfprintf+0x380>
     e3c:	01 fd       	sbrc	r16, 1
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <vfprintf+0x34e>
     e40:	88 e7       	ldi	r24, 0x78	; 120
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <vfprintf+0x352>
     e46:	88 e5       	ldi	r24, 0x58	; 88
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	b3 01       	movw	r22, r6
     e4c:	0c c0       	rjmp	.+24     	; 0xe66 <vfprintf+0x36e>
     e4e:	80 2f       	mov	r24, r16
     e50:	86 78       	andi	r24, 0x86	; 134
     e52:	91 f0       	breq	.+36     	; 0xe78 <vfprintf+0x380>
     e54:	01 ff       	sbrs	r16, 1
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0x364>
     e58:	8b e2       	ldi	r24, 0x2B	; 43
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <vfprintf+0x366>
     e5c:	80 e2       	ldi	r24, 0x20	; 32
     e5e:	d7 fc       	sbrc	r13, 7
     e60:	8d e2       	ldi	r24, 0x2D	; 45
     e62:	b3 01       	movw	r22, r6
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <vfprintf+0x380>
     e6c:	b3 01       	movw	r22, r6
     e6e:	80 e3       	ldi	r24, 0x30	; 48
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     e76:	9a 94       	dec	r9
     e78:	f9 14       	cp	r15, r9
     e7a:	c0 f3       	brcs	.-16     	; 0xe6c <vfprintf+0x374>
     e7c:	fa 94       	dec	r15
     e7e:	f1 01       	movw	r30, r2
     e80:	ef 0d       	add	r30, r15
     e82:	f1 1d       	adc	r31, r1
     e84:	b3 01       	movw	r22, r6
     e86:	80 81       	ld	r24, Z
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     e8e:	ff 20       	and	r15, r15
     e90:	a9 f7       	brne	.-22     	; 0xe7c <vfprintf+0x384>
     e92:	06 c0       	rjmp	.+12     	; 0xea0 <vfprintf+0x3a8>
     e94:	b3 01       	movw	r22, r6
     e96:	80 e2       	ldi	r24, 0x20	; 32
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <fputc>
     e9e:	ca 94       	dec	r12
     ea0:	cc 20       	and	r12, r12
     ea2:	c1 f7       	brne	.-16     	; 0xe94 <vfprintf+0x39c>
     ea4:	41 ce       	rjmp	.-894    	; 0xb28 <vfprintf+0x30>
     ea6:	f3 01       	movw	r30, r6
     ea8:	66 81       	ldd	r22, Z+6	; 0x06
     eaa:	77 81       	ldd	r23, Z+7	; 0x07
     eac:	cb 01       	movw	r24, r22
     eae:	2b 96       	adiw	r28, 0x0b	; 11
     eb0:	e2 e1       	ldi	r30, 0x12	; 18
     eb2:	0c 94 1e 0b 	jmp	0x163c	; 0x163c <__epilogue_restores__>

00000eb6 <putval>:
     eb6:	fc 01       	movw	r30, r24
     eb8:	20 fd       	sbrc	r18, 0
     eba:	08 c0       	rjmp	.+16     	; 0xecc <putval+0x16>
     ebc:	23 fd       	sbrc	r18, 3
     ebe:	05 c0       	rjmp	.+10     	; 0xeca <putval+0x14>
     ec0:	22 ff       	sbrs	r18, 2
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <putval+0x12>
     ec4:	73 83       	std	Z+3, r23	; 0x03
     ec6:	62 83       	std	Z+2, r22	; 0x02
     ec8:	51 83       	std	Z+1, r21	; 0x01
     eca:	40 83       	st	Z, r20
     ecc:	08 95       	ret

00000ece <mulacc>:
     ece:	ef 92       	push	r14
     ed0:	ff 92       	push	r15
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	44 ff       	sbrs	r20, 4
     ed8:	02 c0       	rjmp	.+4      	; 0xede <mulacc+0x10>
     eda:	33 e0       	ldi	r19, 0x03	; 3
     edc:	11 c0       	rjmp	.+34     	; 0xf00 <mulacc+0x32>
     ede:	46 ff       	sbrs	r20, 6
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <mulacc+0x18>
     ee2:	34 e0       	ldi	r19, 0x04	; 4
     ee4:	0d c0       	rjmp	.+26     	; 0xf00 <mulacc+0x32>
     ee6:	db 01       	movw	r26, r22
     ee8:	fc 01       	movw	r30, r24
     eea:	aa 0f       	add	r26, r26
     eec:	bb 1f       	adc	r27, r27
     eee:	ee 1f       	adc	r30, r30
     ef0:	ff 1f       	adc	r31, r31
     ef2:	10 94       	com	r1
     ef4:	d1 f7       	brne	.-12     	; 0xeea <mulacc+0x1c>
     ef6:	6a 0f       	add	r22, r26
     ef8:	7b 1f       	adc	r23, r27
     efa:	8e 1f       	adc	r24, r30
     efc:	9f 1f       	adc	r25, r31
     efe:	31 e0       	ldi	r19, 0x01	; 1
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	31 50       	subi	r19, 0x01	; 1
     f0a:	d1 f7       	brne	.-12     	; 0xf00 <mulacc+0x32>
     f0c:	7b 01       	movw	r14, r22
     f0e:	8c 01       	movw	r16, r24
     f10:	e2 0e       	add	r14, r18
     f12:	f1 1c       	adc	r15, r1
     f14:	01 1d       	adc	r16, r1
     f16:	11 1d       	adc	r17, r1
     f18:	a8 01       	movw	r20, r16
     f1a:	97 01       	movw	r18, r14
     f1c:	b7 01       	movw	r22, r14
     f1e:	ca 01       	movw	r24, r20
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	08 95       	ret

00000f2a <skip_spaces>:
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	8c 01       	movw	r16, r24
     f34:	c8 01       	movw	r24, r16
     f36:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
     f3a:	ec 01       	movw	r28, r24
     f3c:	97 fd       	sbrc	r25, 7
     f3e:	08 c0       	rjmp	.+16     	; 0xf50 <skip_spaces+0x26>
     f40:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <isspace>
     f44:	89 2b       	or	r24, r25
     f46:	b1 f7       	brne	.-20     	; 0xf34 <skip_spaces+0xa>
     f48:	b8 01       	movw	r22, r16
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <ungetc>
     f50:	ce 01       	movw	r24, r28
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <conv_int>:
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e4 eb       	ldi	r30, 0xB4	; 180
     f62:	f7 e0       	ldi	r31, 0x07	; 7
     f64:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__prologue_saves__+0x10>
     f68:	ec 01       	movw	r28, r24
     f6a:	c6 2e       	mov	r12, r22
     f6c:	5a 01       	movw	r10, r20
     f6e:	12 2f       	mov	r17, r18
     f70:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
     f74:	ac 01       	movw	r20, r24
     f76:	8b 32       	cpi	r24, 0x2B	; 43
     f78:	19 f0       	breq	.+6      	; 0xf80 <conv_int+0x24>
     f7a:	8d 32       	cpi	r24, 0x2D	; 45
     f7c:	51 f4       	brne	.+20     	; 0xf92 <conv_int+0x36>
     f7e:	10 68       	ori	r17, 0x80	; 128
     f80:	ca 94       	dec	r12
     f82:	09 f4       	brne	.+2      	; 0xf86 <conv_int+0x2a>
     f84:	6d c0       	rjmp	.+218    	; 0x1060 <conv_int+0x104>
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
     f8c:	ac 01       	movw	r20, r24
     f8e:	97 fd       	sbrc	r25, 7
     f90:	67 c0       	rjmp	.+206    	; 0x1060 <conv_int+0x104>
     f92:	6d ef       	ldi	r22, 0xFD	; 253
     f94:	d6 2e       	mov	r13, r22
     f96:	d1 22       	and	r13, r17
     f98:	8d 2d       	mov	r24, r13
     f9a:	80 73       	andi	r24, 0x30	; 48
     f9c:	01 f5       	brne	.+64     	; 0xfde <conv_int+0x82>
     f9e:	40 33       	cpi	r20, 0x30	; 48
     fa0:	f1 f4       	brne	.+60     	; 0xfde <conv_int+0x82>
     fa2:	ca 94       	dec	r12
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <conv_int+0x4c>
     fa6:	47 c0       	rjmp	.+142    	; 0x1036 <conv_int+0xda>
     fa8:	ce 01       	movw	r24, r28
     faa:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
     fae:	ac 01       	movw	r20, r24
     fb0:	97 fd       	sbrc	r25, 7
     fb2:	41 c0       	rjmp	.+130    	; 0x1036 <conv_int+0xda>
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	d8 2a       	or	r13, r24
     fb8:	48 37       	cpi	r20, 0x78	; 120
     fba:	11 f0       	breq	.+4      	; 0xfc0 <conv_int+0x64>
     fbc:	48 35       	cpi	r20, 0x58	; 88
     fbe:	59 f4       	brne	.+22     	; 0xfd6 <conv_int+0x7a>
     fc0:	80 e4       	ldi	r24, 0x40	; 64
     fc2:	d8 2a       	or	r13, r24
     fc4:	ca 94       	dec	r12
     fc6:	b9 f1       	breq	.+110    	; 0x1036 <conv_int+0xda>
     fc8:	ce 01       	movw	r24, r28
     fca:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
     fce:	ac 01       	movw	r20, r24
     fd0:	99 23       	and	r25, r25
     fd2:	2c f4       	brge	.+10     	; 0xfde <conv_int+0x82>
     fd4:	30 c0       	rjmp	.+96     	; 0x1036 <conv_int+0xda>
     fd6:	d6 fc       	sbrc	r13, 6
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <conv_int+0x82>
     fda:	80 e1       	ldi	r24, 0x10	; 16
     fdc:	d8 2a       	or	r13, r24
     fde:	ee 24       	eor	r14, r14
     fe0:	ff 24       	eor	r15, r15
     fe2:	87 01       	movw	r16, r14
     fe4:	24 2f       	mov	r18, r20
     fe6:	20 53       	subi	r18, 0x30	; 48
     fe8:	28 30       	cpi	r18, 0x08	; 8
     fea:	88 f0       	brcs	.+34     	; 0x100e <conv_int+0xb2>
     fec:	d4 fc       	sbrc	r13, 4
     fee:	09 c0       	rjmp	.+18     	; 0x1002 <conv_int+0xa6>
     ff0:	2a 30       	cpi	r18, 0x0A	; 10
     ff2:	68 f0       	brcs	.+26     	; 0x100e <conv_int+0xb2>
     ff4:	d6 fe       	sbrs	r13, 6
     ff6:	05 c0       	rjmp	.+10     	; 0x1002 <conv_int+0xa6>
     ff8:	2f 7d       	andi	r18, 0xDF	; 223
     ffa:	82 2f       	mov	r24, r18
     ffc:	81 51       	subi	r24, 0x11	; 17
     ffe:	86 30       	cpi	r24, 0x06	; 6
    1000:	28 f0       	brcs	.+10     	; 0x100c <conv_int+0xb0>
    1002:	be 01       	movw	r22, r28
    1004:	ca 01       	movw	r24, r20
    1006:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <ungetc>
    100a:	12 c0       	rjmp	.+36     	; 0x1030 <conv_int+0xd4>
    100c:	27 50       	subi	r18, 0x07	; 7
    100e:	4d 2d       	mov	r20, r13
    1010:	c8 01       	movw	r24, r16
    1012:	b7 01       	movw	r22, r14
    1014:	0e 94 67 07 	call	0xece	; 0xece <mulacc>
    1018:	7b 01       	movw	r14, r22
    101a:	8c 01       	movw	r16, r24
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	d8 2a       	or	r13, r24
    1020:	ca 94       	dec	r12
    1022:	61 f0       	breq	.+24     	; 0x103c <conv_int+0xe0>
    1024:	ce 01       	movw	r24, r28
    1026:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
    102a:	ac 01       	movw	r20, r24
    102c:	97 ff       	sbrs	r25, 7
    102e:	da cf       	rjmp	.-76     	; 0xfe4 <conv_int+0x88>
    1030:	d1 fc       	sbrc	r13, 1
    1032:	04 c0       	rjmp	.+8      	; 0x103c <conv_int+0xe0>
    1034:	15 c0       	rjmp	.+42     	; 0x1060 <conv_int+0x104>
    1036:	ee 24       	eor	r14, r14
    1038:	ff 24       	eor	r15, r15
    103a:	87 01       	movw	r16, r14
    103c:	d7 fe       	sbrs	r13, 7
    103e:	08 c0       	rjmp	.+16     	; 0x1050 <conv_int+0xf4>
    1040:	10 95       	com	r17
    1042:	00 95       	com	r16
    1044:	f0 94       	com	r15
    1046:	e0 94       	com	r14
    1048:	e1 1c       	adc	r14, r1
    104a:	f1 1c       	adc	r15, r1
    104c:	01 1d       	adc	r16, r1
    104e:	11 1d       	adc	r17, r1
    1050:	2d 2d       	mov	r18, r13
    1052:	b8 01       	movw	r22, r16
    1054:	a7 01       	movw	r20, r14
    1056:	c5 01       	movw	r24, r10
    1058:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <putval>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <conv_int+0x106>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	ea e0       	ldi	r30, 0x0A	; 10
    1068:	0c 94 26 0b 	jmp	0x164c	; 0x164c <__epilogue_restores__+0x10>

0000106c <conv_brk>:
    106c:	a0 e2       	ldi	r26, 0x20	; 32
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ec e3       	ldi	r30, 0x3C	; 60
    1072:	f8 e0       	ldi	r31, 0x08	; 8
    1074:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__prologue_saves__+0x8>
    1078:	6c 01       	movw	r12, r24
    107a:	a6 2e       	mov	r10, r22
    107c:	8a 01       	movw	r16, r20
    107e:	79 01       	movw	r14, r18
    1080:	fe 01       	movw	r30, r28
    1082:	31 96       	adiw	r30, 0x01	; 1
    1084:	80 e2       	ldi	r24, 0x20	; 32
    1086:	df 01       	movw	r26, r30
    1088:	1d 92       	st	X+, r1
    108a:	8a 95       	dec	r24
    108c:	e9 f7       	brne	.-6      	; 0x1088 <conv_brk+0x1c>
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	50 e0       	ldi	r21, 0x00	; 0
    1098:	4f 01       	movw	r8, r30
    109a:	a1 e0       	ldi	r26, 0x01	; 1
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	f6 01       	movw	r30, r12
    10a0:	83 81       	ldd	r24, Z+3	; 0x03
    10a2:	f7 01       	movw	r30, r14
    10a4:	83 fd       	sbrc	r24, 3
    10a6:	25 91       	lpm	r18, Z+
    10a8:	83 ff       	sbrs	r24, 3
    10aa:	21 91       	ld	r18, Z+
    10ac:	7f 01       	movw	r14, r30
    10ae:	22 23       	and	r18, r18
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <conv_brk+0x48>
    10b2:	7e c0       	rjmp	.+252    	; 0x11b0 <conv_brk+0x144>
    10b4:	2e 35       	cpi	r18, 0x5E	; 94
    10b6:	19 f4       	brne	.+6      	; 0x10be <conv_brk+0x52>
    10b8:	41 15       	cp	r20, r1
    10ba:	51 05       	cpc	r21, r1
    10bc:	69 f1       	breq	.+90     	; 0x1118 <conv_brk+0xac>
    10be:	87 2f       	mov	r24, r23
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	84 17       	cp	r24, r20
    10c4:	95 07       	cpc	r25, r21
    10c6:	44 f4       	brge	.+16     	; 0x10d8 <conv_brk+0x6c>
    10c8:	2d 35       	cpi	r18, 0x5D	; 93
    10ca:	51 f1       	breq	.+84     	; 0x1120 <conv_brk+0xb4>
    10cc:	2d 32       	cpi	r18, 0x2D	; 45
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <conv_brk+0x6c>
    10d0:	33 23       	and	r19, r19
    10d2:	29 f4       	brne	.+10     	; 0x10de <conv_brk+0x72>
    10d4:	31 e0       	ldi	r19, 0x01	; 1
    10d6:	21 c0       	rjmp	.+66     	; 0x111a <conv_brk+0xae>
    10d8:	33 23       	and	r19, r19
    10da:	09 f4       	brne	.+2      	; 0x10de <conv_brk+0x72>
    10dc:	62 2f       	mov	r22, r18
    10de:	32 2f       	mov	r19, r18
    10e0:	83 2f       	mov	r24, r19
    10e2:	86 95       	lsr	r24
    10e4:	86 95       	lsr	r24
    10e6:	86 95       	lsr	r24
    10e8:	f4 01       	movw	r30, r8
    10ea:	e8 0f       	add	r30, r24
    10ec:	f1 1d       	adc	r31, r1
    10ee:	83 2f       	mov	r24, r19
    10f0:	87 70       	andi	r24, 0x07	; 7
    10f2:	3d 01       	movw	r6, r26
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <conv_brk+0x8e>
    10f6:	66 0c       	add	r6, r6
    10f8:	77 1c       	adc	r7, r7
    10fa:	8a 95       	dec	r24
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <conv_brk+0x8a>
    10fe:	20 81       	ld	r18, Z
    1100:	26 29       	or	r18, r6
    1102:	20 83       	st	Z, r18
    1104:	36 17       	cp	r19, r22
    1106:	11 f4       	brne	.+4      	; 0x110c <conv_brk+0xa0>
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	07 c0       	rjmp	.+14     	; 0x111a <conv_brk+0xae>
    110c:	36 17       	cp	r19, r22
    110e:	10 f4       	brcc	.+4      	; 0x1114 <conv_brk+0xa8>
    1110:	3f 5f       	subi	r19, 0xFF	; 255
    1112:	e6 cf       	rjmp	.-52     	; 0x10e0 <conv_brk+0x74>
    1114:	31 50       	subi	r19, 0x01	; 1
    1116:	e4 cf       	rjmp	.-56     	; 0x10e0 <conv_brk+0x74>
    1118:	71 e0       	ldi	r23, 0x01	; 1
    111a:	4f 5f       	subi	r20, 0xFF	; 255
    111c:	5f 4f       	sbci	r21, 0xFF	; 255
    111e:	bf cf       	rjmp	.-130    	; 0x109e <conv_brk+0x32>
    1120:	33 23       	and	r19, r19
    1122:	19 f0       	breq	.+6      	; 0x112a <conv_brk+0xbe>
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	80 62       	ori	r24, 0x20	; 32
    1128:	8e 83       	std	Y+6, r24	; 0x06
    112a:	77 23       	and	r23, r23
    112c:	59 f0       	breq	.+22     	; 0x1144 <conv_brk+0xd8>
    112e:	fe 01       	movw	r30, r28
    1130:	31 96       	adiw	r30, 0x01	; 1
    1132:	9e 01       	movw	r18, r28
    1134:	2f 5d       	subi	r18, 0xDF	; 223
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	80 81       	ld	r24, Z
    113a:	80 95       	com	r24
    113c:	81 93       	st	Z+, r24
    113e:	e2 17       	cp	r30, r18
    1140:	f3 07       	cpc	r31, r19
    1142:	d1 f7       	brne	.-12     	; 0x1138 <conv_brk+0xcc>
    1144:	bb 24       	eor	r11, r11
    1146:	b3 94       	inc	r11
    1148:	4e 01       	movw	r8, r28
    114a:	08 94       	sec
    114c:	81 1c       	adc	r8, r1
    114e:	91 1c       	adc	r9, r1
    1150:	c6 01       	movw	r24, r12
    1152:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
    1156:	ac 01       	movw	r20, r24
    1158:	97 fd       	sbrc	r25, 7
    115a:	22 c0       	rjmp	.+68     	; 0x11a0 <conv_brk+0x134>
    115c:	86 95       	lsr	r24
    115e:	86 95       	lsr	r24
    1160:	86 95       	lsr	r24
    1162:	f4 01       	movw	r30, r8
    1164:	e8 0f       	add	r30, r24
    1166:	f1 1d       	adc	r31, r1
    1168:	80 81       	ld	r24, Z
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9a 01       	movw	r18, r20
    116e:	27 70       	andi	r18, 0x07	; 7
    1170:	30 70       	andi	r19, 0x00	; 0
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <conv_brk+0x10c>
    1174:	95 95       	asr	r25
    1176:	87 95       	ror	r24
    1178:	2a 95       	dec	r18
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <conv_brk+0x108>
    117c:	80 fd       	sbrc	r24, 0
    117e:	05 c0       	rjmp	.+10     	; 0x118a <conv_brk+0x11e>
    1180:	b6 01       	movw	r22, r12
    1182:	ca 01       	movw	r24, r20
    1184:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <ungetc>
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <conv_brk+0x134>
    118a:	01 15       	cp	r16, r1
    118c:	11 05       	cpc	r17, r1
    118e:	19 f0       	breq	.+6      	; 0x1196 <conv_brk+0x12a>
    1190:	d8 01       	movw	r26, r16
    1192:	4d 93       	st	X+, r20
    1194:	8d 01       	movw	r16, r26
    1196:	aa 94       	dec	r10
    1198:	bb 24       	eor	r11, r11
    119a:	aa 20       	and	r10, r10
    119c:	c9 f6       	brne	.-78     	; 0x1150 <conv_brk+0xe4>
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <conv_brk+0x138>
    11a0:	bb 20       	and	r11, r11
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <conv_brk+0x144>
    11a4:	01 15       	cp	r16, r1
    11a6:	11 05       	cpc	r17, r1
    11a8:	29 f0       	breq	.+10     	; 0x11b4 <conv_brk+0x148>
    11aa:	f8 01       	movw	r30, r16
    11ac:	10 82       	st	Z, r1
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <conv_brk+0x148>
    11b0:	ee 24       	eor	r14, r14
    11b2:	ff 24       	eor	r15, r15
    11b4:	c7 01       	movw	r24, r14
    11b6:	a0 96       	adiw	r28, 0x20	; 32
    11b8:	ee e0       	ldi	r30, 0x0E	; 14
    11ba:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__epilogue_restores__+0x8>

000011be <vfscanf>:
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 ee       	ldi	r30, 0xE5	; 229
    11c4:	f8 e0       	ldi	r31, 0x08	; 8
    11c6:	0c 94 06 0b 	jmp	0x160c	; 0x160c <__prologue_saves__+0x8>
    11ca:	5c 01       	movw	r10, r24
    11cc:	6b 01       	movw	r12, r22
    11ce:	3a 01       	movw	r6, r20
    11d0:	fc 01       	movw	r30, r24
    11d2:	17 82       	std	Z+7, r1	; 0x07
    11d4:	16 82       	std	Z+6, r1	; 0x06
    11d6:	88 24       	eor	r8, r8
    11d8:	ea c0       	rjmp	.+468    	; 0x13ae <vfscanf+0x1f0>
    11da:	81 2f       	mov	r24, r17
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <isspace>
    11e2:	89 2b       	or	r24, r25
    11e4:	21 f0       	breq	.+8      	; 0x11ee <vfscanf+0x30>
    11e6:	c5 01       	movw	r24, r10
    11e8:	0e 94 95 07 	call	0xf2a	; 0xf2a <skip_spaces>
    11ec:	e0 c0       	rjmp	.+448    	; 0x13ae <vfscanf+0x1f0>
    11ee:	15 32       	cpi	r17, 0x25	; 37
    11f0:	49 f4       	brne	.+18     	; 0x1204 <vfscanf+0x46>
    11f2:	f6 01       	movw	r30, r12
    11f4:	f3 fc       	sbrc	r15, 3
    11f6:	65 91       	lpm	r22, Z+
    11f8:	f3 fe       	sbrs	r15, 3
    11fa:	61 91       	ld	r22, Z+
    11fc:	6f 01       	movw	r12, r30
    11fe:	65 32       	cpi	r22, 0x25	; 37
    1200:	69 f4       	brne	.+26     	; 0x121c <vfscanf+0x5e>
    1202:	15 e2       	ldi	r17, 0x25	; 37
    1204:	c5 01       	movw	r24, r10
    1206:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
    120a:	97 fd       	sbrc	r25, 7
    120c:	dc c0       	rjmp	.+440    	; 0x13c6 <vfscanf+0x208>
    120e:	18 17       	cp	r17, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <vfscanf+0x56>
    1212:	cd c0       	rjmp	.+410    	; 0x13ae <vfscanf+0x1f0>
    1214:	b5 01       	movw	r22, r10
    1216:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <ungetc>
    121a:	da c0       	rjmp	.+436    	; 0x13d0 <vfscanf+0x212>
    121c:	6a 32       	cpi	r22, 0x2A	; 42
    121e:	19 f0       	breq	.+6      	; 0x1226 <vfscanf+0x68>
    1220:	16 2f       	mov	r17, r22
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <vfscanf+0x74>
    1226:	f3 fc       	sbrc	r15, 3
    1228:	15 91       	lpm	r17, Z+
    122a:	f3 fe       	sbrs	r15, 3
    122c:	11 91       	ld	r17, Z+
    122e:	6f 01       	movw	r12, r30
    1230:	01 e0       	ldi	r16, 0x01	; 1
    1232:	99 24       	eor	r9, r9
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <vfscanf+0x96>
    1236:	02 60       	ori	r16, 0x02	; 2
    1238:	69 2d       	mov	r22, r9
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	40 e2       	ldi	r20, 0x20	; 32
    1242:	0e 94 67 07 	call	0xece	; 0xece <mulacc>
    1246:	96 2e       	mov	r9, r22
    1248:	f6 01       	movw	r30, r12
    124a:	f3 fc       	sbrc	r15, 3
    124c:	15 91       	lpm	r17, Z+
    124e:	f3 fe       	sbrs	r15, 3
    1250:	11 91       	ld	r17, Z+
    1252:	6f 01       	movw	r12, r30
    1254:	21 2f       	mov	r18, r17
    1256:	20 53       	subi	r18, 0x30	; 48
    1258:	2a 30       	cpi	r18, 0x0A	; 10
    125a:	68 f3       	brcs	.-38     	; 0x1236 <vfscanf+0x78>
    125c:	01 fd       	sbrc	r16, 1
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <vfscanf+0xa8>
    1260:	99 24       	eor	r9, r9
    1262:	9a 94       	dec	r9
    1264:	03 c0       	rjmp	.+6      	; 0x126c <vfscanf+0xae>
    1266:	99 20       	and	r9, r9
    1268:	09 f4       	brne	.+2      	; 0x126c <vfscanf+0xae>
    126a:	b2 c0       	rjmp	.+356    	; 0x13d0 <vfscanf+0x212>
    126c:	18 36       	cpi	r17, 0x68	; 104
    126e:	21 f0       	breq	.+8      	; 0x1278 <vfscanf+0xba>
    1270:	1c 36       	cpi	r17, 0x6C	; 108
    1272:	99 f4       	brne	.+38     	; 0x129a <vfscanf+0xdc>
    1274:	f6 01       	movw	r30, r12
    1276:	0b c0       	rjmp	.+22     	; 0x128e <vfscanf+0xd0>
    1278:	f6 01       	movw	r30, r12
    127a:	f3 fc       	sbrc	r15, 3
    127c:	65 91       	lpm	r22, Z+
    127e:	f3 fe       	sbrs	r15, 3
    1280:	61 91       	ld	r22, Z+
    1282:	68 36       	cpi	r22, 0x68	; 104
    1284:	19 f0       	breq	.+6      	; 0x128c <vfscanf+0xce>
    1286:	6f 01       	movw	r12, r30
    1288:	16 2f       	mov	r17, r22
    128a:	07 c0       	rjmp	.+14     	; 0x129a <vfscanf+0xdc>
    128c:	08 60       	ori	r16, 0x08	; 8
    128e:	04 60       	ori	r16, 0x04	; 4
    1290:	f3 fc       	sbrc	r15, 3
    1292:	15 91       	lpm	r17, Z+
    1294:	f3 fe       	sbrs	r15, 3
    1296:	11 91       	ld	r17, Z+
    1298:	6f 01       	movw	r12, r30
    129a:	11 23       	and	r17, r17
    129c:	09 f4       	brne	.+2      	; 0x12a0 <vfscanf+0xe2>
    129e:	98 c0       	rjmp	.+304    	; 0x13d0 <vfscanf+0x212>
    12a0:	61 2f       	mov	r22, r17
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	85 e8       	ldi	r24, 0x85	; 133
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <strchr_P>
    12ac:	89 2b       	or	r24, r25
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <vfscanf+0xf4>
    12b0:	8f c0       	rjmp	.+286    	; 0x13d0 <vfscanf+0x212>
    12b2:	80 2f       	mov	r24, r16
    12b4:	00 ff       	sbrs	r16, 0
    12b6:	03 c0       	rjmp	.+6      	; 0x12be <vfscanf+0x100>
    12b8:	ee 24       	eor	r14, r14
    12ba:	ff 24       	eor	r15, r15
    12bc:	07 c0       	rjmp	.+14     	; 0x12cc <vfscanf+0x10e>
    12be:	f3 01       	movw	r30, r6
    12c0:	e0 80       	ld	r14, Z
    12c2:	f1 80       	ldd	r15, Z+1	; 0x01
    12c4:	22 e0       	ldi	r18, 0x02	; 2
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	62 0e       	add	r6, r18
    12ca:	73 1e       	adc	r7, r19
    12cc:	1e 36       	cpi	r17, 0x6E	; 110
    12ce:	51 f4       	brne	.+20     	; 0x12e4 <vfscanf+0x126>
    12d0:	f5 01       	movw	r30, r10
    12d2:	46 81       	ldd	r20, Z+6	; 0x06
    12d4:	57 81       	ldd	r21, Z+7	; 0x07
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	20 2f       	mov	r18, r16
    12dc:	c7 01       	movw	r24, r14
    12de:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <putval>
    12e2:	65 c0       	rjmp	.+202    	; 0x13ae <vfscanf+0x1f0>
    12e4:	13 36       	cpi	r17, 0x63	; 99
    12e6:	91 f4       	brne	.+36     	; 0x130c <vfscanf+0x14e>
    12e8:	81 fd       	sbrc	r24, 1
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <vfscanf+0x132>
    12ec:	99 24       	eor	r9, r9
    12ee:	93 94       	inc	r9
    12f0:	c5 01       	movw	r24, r10
    12f2:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
    12f6:	97 fd       	sbrc	r25, 7
    12f8:	66 c0       	rjmp	.+204    	; 0x13c6 <vfscanf+0x208>
    12fa:	e1 14       	cp	r14, r1
    12fc:	f1 04       	cpc	r15, r1
    12fe:	19 f0       	breq	.+6      	; 0x1306 <vfscanf+0x148>
    1300:	f7 01       	movw	r30, r14
    1302:	81 93       	st	Z+, r24
    1304:	7f 01       	movw	r14, r30
    1306:	9a 94       	dec	r9
    1308:	99 f7       	brne	.-26     	; 0x12f0 <vfscanf+0x132>
    130a:	4f c0       	rjmp	.+158    	; 0x13aa <vfscanf+0x1ec>
    130c:	1b 35       	cpi	r17, 0x5B	; 91
    130e:	59 f4       	brne	.+22     	; 0x1326 <vfscanf+0x168>
    1310:	96 01       	movw	r18, r12
    1312:	a7 01       	movw	r20, r14
    1314:	69 2d       	mov	r22, r9
    1316:	c5 01       	movw	r24, r10
    1318:	0e 94 36 08 	call	0x106c	; 0x106c <conv_brk>
    131c:	6c 01       	movw	r12, r24
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	09 f0       	breq	.+2      	; 0x1324 <vfscanf+0x166>
    1322:	43 c0       	rjmp	.+134    	; 0x13aa <vfscanf+0x1ec>
    1324:	3d c0       	rjmp	.+122    	; 0x13a0 <vfscanf+0x1e2>
    1326:	c5 01       	movw	r24, r10
    1328:	0e 94 95 07 	call	0xf2a	; 0xf2a <skip_spaces>
    132c:	97 fd       	sbrc	r25, 7
    132e:	4b c0       	rjmp	.+150    	; 0x13c6 <vfscanf+0x208>
    1330:	1f 36       	cpi	r17, 0x6F	; 111
    1332:	59 f1       	breq	.+86     	; 0x138a <vfscanf+0x1cc>
    1334:	10 37       	cpi	r17, 0x70	; 112
    1336:	28 f4       	brcc	.+10     	; 0x1342 <vfscanf+0x184>
    1338:	14 36       	cpi	r17, 0x64	; 100
    133a:	29 f1       	breq	.+74     	; 0x1386 <vfscanf+0x1c8>
    133c:	19 36       	cpi	r17, 0x69	; 105
    133e:	39 f5       	brne	.+78     	; 0x138e <vfscanf+0x1d0>
    1340:	27 c0       	rjmp	.+78     	; 0x1390 <vfscanf+0x1d2>
    1342:	13 37       	cpi	r17, 0x73	; 115
    1344:	19 f0       	breq	.+6      	; 0x134c <vfscanf+0x18e>
    1346:	15 37       	cpi	r17, 0x75	; 117
    1348:	11 f5       	brne	.+68     	; 0x138e <vfscanf+0x1d0>
    134a:	1d c0       	rjmp	.+58     	; 0x1386 <vfscanf+0x1c8>
    134c:	c5 01       	movw	r24, r10
    134e:	0e 94 11 0a 	call	0x1422	; 0x1422 <fgetc>
    1352:	ec 01       	movw	r28, r24
    1354:	97 fd       	sbrc	r25, 7
    1356:	11 c0       	rjmp	.+34     	; 0x137a <vfscanf+0x1bc>
    1358:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <isspace>
    135c:	89 2b       	or	r24, r25
    135e:	29 f0       	breq	.+10     	; 0x136a <vfscanf+0x1ac>
    1360:	b5 01       	movw	r22, r10
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <ungetc>
    1368:	08 c0       	rjmp	.+16     	; 0x137a <vfscanf+0x1bc>
    136a:	e1 14       	cp	r14, r1
    136c:	f1 04       	cpc	r15, r1
    136e:	19 f0       	breq	.+6      	; 0x1376 <vfscanf+0x1b8>
    1370:	f7 01       	movw	r30, r14
    1372:	c1 93       	st	Z+, r28
    1374:	7f 01       	movw	r14, r30
    1376:	9a 94       	dec	r9
    1378:	49 f7       	brne	.-46     	; 0x134c <vfscanf+0x18e>
    137a:	e1 14       	cp	r14, r1
    137c:	f1 04       	cpc	r15, r1
    137e:	a9 f0       	breq	.+42     	; 0x13aa <vfscanf+0x1ec>
    1380:	f7 01       	movw	r30, r14
    1382:	10 82       	st	Z, r1
    1384:	12 c0       	rjmp	.+36     	; 0x13aa <vfscanf+0x1ec>
    1386:	00 62       	ori	r16, 0x20	; 32
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <vfscanf+0x1d2>
    138a:	00 61       	ori	r16, 0x10	; 16
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfscanf+0x1d2>
    138e:	00 64       	ori	r16, 0x40	; 64
    1390:	20 2f       	mov	r18, r16
    1392:	a7 01       	movw	r20, r14
    1394:	69 2d       	mov	r22, r9
    1396:	c5 01       	movw	r24, r10
    1398:	0e 94 ae 07 	call	0xf5c	; 0xf5c <conv_int>
    139c:	88 23       	and	r24, r24
    139e:	29 f4       	brne	.+10     	; 0x13aa <vfscanf+0x1ec>
    13a0:	f5 01       	movw	r30, r10
    13a2:	83 81       	ldd	r24, Z+3	; 0x03
    13a4:	80 73       	andi	r24, 0x30	; 48
    13a6:	79 f4       	brne	.+30     	; 0x13c6 <vfscanf+0x208>
    13a8:	13 c0       	rjmp	.+38     	; 0x13d0 <vfscanf+0x212>
    13aa:	00 ff       	sbrs	r16, 0
    13ac:	83 94       	inc	r8
    13ae:	f5 01       	movw	r30, r10
    13b0:	f3 80       	ldd	r15, Z+3	; 0x03
    13b2:	f6 01       	movw	r30, r12
    13b4:	f3 fc       	sbrc	r15, 3
    13b6:	15 91       	lpm	r17, Z+
    13b8:	f3 fe       	sbrs	r15, 3
    13ba:	11 91       	ld	r17, Z+
    13bc:	6f 01       	movw	r12, r30
    13be:	11 23       	and	r17, r17
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <vfscanf+0x206>
    13c2:	0b cf       	rjmp	.-490    	; 0x11da <vfscanf+0x1c>
    13c4:	05 c0       	rjmp	.+10     	; 0x13d0 <vfscanf+0x212>
    13c6:	88 20       	and	r8, r8
    13c8:	19 f4       	brne	.+6      	; 0x13d0 <vfscanf+0x212>
    13ca:	2f ef       	ldi	r18, 0xFF	; 255
    13cc:	3f ef       	ldi	r19, 0xFF	; 255
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <vfscanf+0x216>
    13d0:	28 2d       	mov	r18, r8
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	c9 01       	movw	r24, r18
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	ee e0       	ldi	r30, 0x0E	; 14
    13dc:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <__epilogue_restores__+0x8>

000013e0 <strchr_P>:
    13e0:	fc 01       	movw	r30, r24
    13e2:	05 90       	lpm	r0, Z+
    13e4:	06 16       	cp	r0, r22
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <strchr_P+0x10>
    13e8:	00 20       	and	r0, r0
    13ea:	d9 f7       	brne	.-10     	; 0x13e2 <strchr_P+0x2>
    13ec:	c0 01       	movw	r24, r0
    13ee:	08 95       	ret
    13f0:	31 97       	sbiw	r30, 0x01	; 1
    13f2:	cf 01       	movw	r24, r30
    13f4:	08 95       	ret

000013f6 <strnlen_P>:
    13f6:	fc 01       	movw	r30, r24
    13f8:	05 90       	lpm	r0, Z+
    13fa:	61 50       	subi	r22, 0x01	; 1
    13fc:	70 40       	sbci	r23, 0x00	; 0
    13fe:	01 10       	cpse	r0, r1
    1400:	d8 f7       	brcc	.-10     	; 0x13f8 <strnlen_P+0x2>
    1402:	80 95       	com	r24
    1404:	90 95       	com	r25
    1406:	8e 0f       	add	r24, r30
    1408:	9f 1f       	adc	r25, r31
    140a:	08 95       	ret

0000140c <strnlen>:
    140c:	fc 01       	movw	r30, r24
    140e:	61 50       	subi	r22, 0x01	; 1
    1410:	70 40       	sbci	r23, 0x00	; 0
    1412:	01 90       	ld	r0, Z+
    1414:	01 10       	cpse	r0, r1
    1416:	d8 f7       	brcc	.-10     	; 0x140e <strnlen+0x2>
    1418:	80 95       	com	r24
    141a:	90 95       	com	r25
    141c:	8e 0f       	add	r24, r30
    141e:	9f 1f       	adc	r25, r31
    1420:	08 95       	ret

00001422 <fgetc>:
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
    1428:	4b 81       	ldd	r20, Y+3	; 0x03
    142a:	40 ff       	sbrs	r20, 0
    142c:	1a c0       	rjmp	.+52     	; 0x1462 <fgetc+0x40>
    142e:	46 ff       	sbrs	r20, 6
    1430:	0a c0       	rjmp	.+20     	; 0x1446 <fgetc+0x24>
    1432:	4f 7b       	andi	r20, 0xBF	; 191
    1434:	4b 83       	std	Y+3, r20	; 0x03
    1436:	8e 81       	ldd	r24, Y+6	; 0x06
    1438:	9f 81       	ldd	r25, Y+7	; 0x07
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	9f 83       	std	Y+7, r25	; 0x07
    143e:	8e 83       	std	Y+6, r24	; 0x06
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	2b c0       	rjmp	.+86     	; 0x149c <fgetc+0x7a>
    1446:	42 ff       	sbrs	r20, 2
    1448:	13 c0       	rjmp	.+38     	; 0x1470 <fgetc+0x4e>
    144a:	e8 81       	ld	r30, Y
    144c:	f9 81       	ldd	r31, Y+1	; 0x01
    144e:	80 81       	ld	r24, Z
    1450:	28 2f       	mov	r18, r24
    1452:	33 27       	eor	r19, r19
    1454:	27 fd       	sbrc	r18, 7
    1456:	30 95       	com	r19
    1458:	21 15       	cp	r18, r1
    145a:	31 05       	cpc	r19, r1
    145c:	29 f4       	brne	.+10     	; 0x1468 <fgetc+0x46>
    145e:	40 62       	ori	r20, 0x20	; 32
    1460:	4b 83       	std	Y+3, r20	; 0x03
    1462:	2f ef       	ldi	r18, 0xFF	; 255
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	1b c0       	rjmp	.+54     	; 0x149e <fgetc+0x7c>
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	f9 83       	std	Y+1, r31	; 0x01
    146c:	e8 83       	st	Y, r30
    146e:	11 c0       	rjmp	.+34     	; 0x1492 <fgetc+0x70>
    1470:	ea 85       	ldd	r30, Y+10	; 0x0a
    1472:	fb 85       	ldd	r31, Y+11	; 0x0b
    1474:	ce 01       	movw	r24, r28
    1476:	09 95       	icall
    1478:	9c 01       	movw	r18, r24
    147a:	97 ff       	sbrs	r25, 7
    147c:	0a c0       	rjmp	.+20     	; 0x1492 <fgetc+0x70>
    147e:	9b 81       	ldd	r25, Y+3	; 0x03
    1480:	2f 5f       	subi	r18, 0xFF	; 255
    1482:	3f 4f       	sbci	r19, 0xFF	; 255
    1484:	11 f0       	breq	.+4      	; 0x148a <fgetc+0x68>
    1486:	80 e2       	ldi	r24, 0x20	; 32
    1488:	01 c0       	rjmp	.+2      	; 0x148c <fgetc+0x6a>
    148a:	80 e1       	ldi	r24, 0x10	; 16
    148c:	89 2b       	or	r24, r25
    148e:	8b 83       	std	Y+3, r24	; 0x03
    1490:	e8 cf       	rjmp	.-48     	; 0x1462 <fgetc+0x40>
    1492:	8e 81       	ldd	r24, Y+6	; 0x06
    1494:	9f 81       	ldd	r25, Y+7	; 0x07
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	9f 83       	std	Y+7, r25	; 0x07
    149a:	8e 83       	std	Y+6, r24	; 0x06
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	c9 01       	movw	r24, r18
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <fputc>:
    14a6:	0f 93       	push	r16
    14a8:	1f 93       	push	r17
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	8c 01       	movw	r16, r24
    14b0:	eb 01       	movw	r28, r22
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	81 ff       	sbrs	r24, 1
    14b6:	1b c0       	rjmp	.+54     	; 0x14ee <fputc+0x48>
    14b8:	82 ff       	sbrs	r24, 2
    14ba:	0d c0       	rjmp	.+26     	; 0x14d6 <fputc+0x30>
    14bc:	2e 81       	ldd	r18, Y+6	; 0x06
    14be:	3f 81       	ldd	r19, Y+7	; 0x07
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	9d 81       	ldd	r25, Y+5	; 0x05
    14c4:	28 17       	cp	r18, r24
    14c6:	39 07       	cpc	r19, r25
    14c8:	64 f4       	brge	.+24     	; 0x14e2 <fputc+0x3c>
    14ca:	e8 81       	ld	r30, Y
    14cc:	f9 81       	ldd	r31, Y+1	; 0x01
    14ce:	01 93       	st	Z+, r16
    14d0:	f9 83       	std	Y+1, r31	; 0x01
    14d2:	e8 83       	st	Y, r30
    14d4:	06 c0       	rjmp	.+12     	; 0x14e2 <fputc+0x3c>
    14d6:	e8 85       	ldd	r30, Y+8	; 0x08
    14d8:	f9 85       	ldd	r31, Y+9	; 0x09
    14da:	80 2f       	mov	r24, r16
    14dc:	09 95       	icall
    14de:	89 2b       	or	r24, r25
    14e0:	31 f4       	brne	.+12     	; 0x14ee <fputc+0x48>
    14e2:	8e 81       	ldd	r24, Y+6	; 0x06
    14e4:	9f 81       	ldd	r25, Y+7	; 0x07
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	9f 83       	std	Y+7, r25	; 0x07
    14ea:	8e 83       	std	Y+6, r24	; 0x06
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <fputc+0x4c>
    14ee:	0f ef       	ldi	r16, 0xFF	; 255
    14f0:	1f ef       	ldi	r17, 0xFF	; 255
    14f2:	c8 01       	movw	r24, r16
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
    14fa:	0f 91       	pop	r16
    14fc:	08 95       	ret

000014fe <ungetc>:
    14fe:	9c 01       	movw	r18, r24
    1500:	fb 01       	movw	r30, r22
    1502:	83 81       	ldd	r24, Z+3	; 0x03
    1504:	80 ff       	sbrs	r24, 0
    1506:	11 c0       	rjmp	.+34     	; 0x152a <ungetc+0x2c>
    1508:	86 fd       	sbrc	r24, 6
    150a:	0f c0       	rjmp	.+30     	; 0x152a <ungetc+0x2c>
    150c:	9f ef       	ldi	r25, 0xFF	; 255
    150e:	2f 3f       	cpi	r18, 0xFF	; 255
    1510:	39 07       	cpc	r19, r25
    1512:	59 f0       	breq	.+22     	; 0x152a <ungetc+0x2c>
    1514:	22 83       	std	Z+2, r18	; 0x02
    1516:	80 64       	ori	r24, 0x40	; 64
    1518:	8f 7d       	andi	r24, 0xDF	; 223
    151a:	83 83       	std	Z+3, r24	; 0x03
    151c:	86 81       	ldd	r24, Z+6	; 0x06
    151e:	97 81       	ldd	r25, Z+7	; 0x07
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	97 83       	std	Z+7, r25	; 0x07
    1524:	86 83       	std	Z+6, r24	; 0x06
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	02 c0       	rjmp	.+4      	; 0x152e <ungetc+0x30>
    152a:	2f ef       	ldi	r18, 0xFF	; 255
    152c:	3f ef       	ldi	r19, 0xFF	; 255
    152e:	c9 01       	movw	r24, r18
    1530:	08 95       	ret

00001532 <__ultoa_invert>:
    1532:	fa 01       	movw	r30, r20
    1534:	aa 27       	eor	r26, r26
    1536:	28 30       	cpi	r18, 0x08	; 8
    1538:	51 f1       	breq	.+84     	; 0x158e <__ultoa_invert+0x5c>
    153a:	20 31       	cpi	r18, 0x10	; 16
    153c:	81 f1       	breq	.+96     	; 0x159e <__ultoa_invert+0x6c>
    153e:	e8 94       	clt
    1540:	6f 93       	push	r22
    1542:	6e 7f       	andi	r22, 0xFE	; 254
    1544:	6e 5f       	subi	r22, 0xFE	; 254
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	af 4f       	sbci	r26, 0xFF	; 255
    154e:	b1 e0       	ldi	r27, 0x01	; 1
    1550:	3e d0       	rcall	.+124    	; 0x15ce <__ultoa_invert+0x9c>
    1552:	b4 e0       	ldi	r27, 0x04	; 4
    1554:	3c d0       	rcall	.+120    	; 0x15ce <__ultoa_invert+0x9c>
    1556:	67 0f       	add	r22, r23
    1558:	78 1f       	adc	r23, r24
    155a:	89 1f       	adc	r24, r25
    155c:	9a 1f       	adc	r25, r26
    155e:	a1 1d       	adc	r26, r1
    1560:	68 0f       	add	r22, r24
    1562:	79 1f       	adc	r23, r25
    1564:	8a 1f       	adc	r24, r26
    1566:	91 1d       	adc	r25, r1
    1568:	a1 1d       	adc	r26, r1
    156a:	6a 0f       	add	r22, r26
    156c:	71 1d       	adc	r23, r1
    156e:	81 1d       	adc	r24, r1
    1570:	91 1d       	adc	r25, r1
    1572:	a1 1d       	adc	r26, r1
    1574:	20 d0       	rcall	.+64     	; 0x15b6 <__ultoa_invert+0x84>
    1576:	09 f4       	brne	.+2      	; 0x157a <__ultoa_invert+0x48>
    1578:	68 94       	set
    157a:	3f 91       	pop	r19
    157c:	2a e0       	ldi	r18, 0x0A	; 10
    157e:	26 9f       	mul	r18, r22
    1580:	11 24       	eor	r1, r1
    1582:	30 19       	sub	r19, r0
    1584:	30 5d       	subi	r19, 0xD0	; 208
    1586:	31 93       	st	Z+, r19
    1588:	de f6       	brtc	.-74     	; 0x1540 <__ultoa_invert+0xe>
    158a:	cf 01       	movw	r24, r30
    158c:	08 95       	ret
    158e:	46 2f       	mov	r20, r22
    1590:	47 70       	andi	r20, 0x07	; 7
    1592:	40 5d       	subi	r20, 0xD0	; 208
    1594:	41 93       	st	Z+, r20
    1596:	b3 e0       	ldi	r27, 0x03	; 3
    1598:	0f d0       	rcall	.+30     	; 0x15b8 <__ultoa_invert+0x86>
    159a:	c9 f7       	brne	.-14     	; 0x158e <__ultoa_invert+0x5c>
    159c:	f6 cf       	rjmp	.-20     	; 0x158a <__ultoa_invert+0x58>
    159e:	46 2f       	mov	r20, r22
    15a0:	4f 70       	andi	r20, 0x0F	; 15
    15a2:	40 5d       	subi	r20, 0xD0	; 208
    15a4:	4a 33       	cpi	r20, 0x3A	; 58
    15a6:	18 f0       	brcs	.+6      	; 0x15ae <__ultoa_invert+0x7c>
    15a8:	49 5d       	subi	r20, 0xD9	; 217
    15aa:	31 fd       	sbrc	r19, 1
    15ac:	40 52       	subi	r20, 0x20	; 32
    15ae:	41 93       	st	Z+, r20
    15b0:	02 d0       	rcall	.+4      	; 0x15b6 <__ultoa_invert+0x84>
    15b2:	a9 f7       	brne	.-22     	; 0x159e <__ultoa_invert+0x6c>
    15b4:	ea cf       	rjmp	.-44     	; 0x158a <__ultoa_invert+0x58>
    15b6:	b4 e0       	ldi	r27, 0x04	; 4
    15b8:	a6 95       	lsr	r26
    15ba:	97 95       	ror	r25
    15bc:	87 95       	ror	r24
    15be:	77 95       	ror	r23
    15c0:	67 95       	ror	r22
    15c2:	ba 95       	dec	r27
    15c4:	c9 f7       	brne	.-14     	; 0x15b8 <__ultoa_invert+0x86>
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	61 05       	cpc	r22, r1
    15ca:	71 05       	cpc	r23, r1
    15cc:	08 95       	ret
    15ce:	9b 01       	movw	r18, r22
    15d0:	ac 01       	movw	r20, r24
    15d2:	0a 2e       	mov	r0, r26
    15d4:	06 94       	lsr	r0
    15d6:	57 95       	ror	r21
    15d8:	47 95       	ror	r20
    15da:	37 95       	ror	r19
    15dc:	27 95       	ror	r18
    15de:	ba 95       	dec	r27
    15e0:	c9 f7       	brne	.-14     	; 0x15d4 <__ultoa_invert+0xa2>
    15e2:	62 0f       	add	r22, r18
    15e4:	73 1f       	adc	r23, r19
    15e6:	84 1f       	adc	r24, r20
    15e8:	95 1f       	adc	r25, r21
    15ea:	a0 1d       	adc	r26, r0
    15ec:	08 95       	ret

000015ee <isspace>:
    15ee:	91 11       	cpse	r25, r1
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <__ctype_isfalse>
    15f2:	80 32       	cpi	r24, 0x20	; 32
    15f4:	19 f0       	breq	.+6      	; 0x15fc <isspace+0xe>
    15f6:	89 50       	subi	r24, 0x09	; 9
    15f8:	85 50       	subi	r24, 0x05	; 5
    15fa:	d0 f7       	brcc	.-12     	; 0x15f0 <isspace+0x2>
    15fc:	08 95       	ret

000015fe <__ctype_isfalse>:
    15fe:	99 27       	eor	r25, r25
    1600:	88 27       	eor	r24, r24

00001602 <__ctype_istrue>:
    1602:	08 95       	ret

00001604 <__prologue_saves__>:
    1604:	2f 92       	push	r2
    1606:	3f 92       	push	r3
    1608:	4f 92       	push	r4
    160a:	5f 92       	push	r5
    160c:	6f 92       	push	r6
    160e:	7f 92       	push	r7
    1610:	8f 92       	push	r8
    1612:	9f 92       	push	r9
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	cd b7       	in	r28, 0x3d	; 61
    162a:	de b7       	in	r29, 0x3e	; 62
    162c:	ca 1b       	sub	r28, r26
    162e:	db 0b       	sbc	r29, r27
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	09 94       	ijmp

0000163c <__epilogue_restores__>:
    163c:	2a 88       	ldd	r2, Y+18	; 0x12
    163e:	39 88       	ldd	r3, Y+17	; 0x11
    1640:	48 88       	ldd	r4, Y+16	; 0x10
    1642:	5f 84       	ldd	r5, Y+15	; 0x0f
    1644:	6e 84       	ldd	r6, Y+14	; 0x0e
    1646:	7d 84       	ldd	r7, Y+13	; 0x0d
    1648:	8c 84       	ldd	r8, Y+12	; 0x0c
    164a:	9b 84       	ldd	r9, Y+11	; 0x0b
    164c:	aa 84       	ldd	r10, Y+10	; 0x0a
    164e:	b9 84       	ldd	r11, Y+9	; 0x09
    1650:	c8 84       	ldd	r12, Y+8	; 0x08
    1652:	df 80       	ldd	r13, Y+7	; 0x07
    1654:	ee 80       	ldd	r14, Y+6	; 0x06
    1656:	fd 80       	ldd	r15, Y+5	; 0x05
    1658:	0c 81       	ldd	r16, Y+4	; 0x04
    165a:	1b 81       	ldd	r17, Y+3	; 0x03
    165c:	aa 81       	ldd	r26, Y+2	; 0x02
    165e:	b9 81       	ldd	r27, Y+1	; 0x01
    1660:	ce 0f       	add	r28, r30
    1662:	d1 1d       	adc	r29, r1
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	ed 01       	movw	r28, r26
    1670:	08 95       	ret

00001672 <_exit>:
    1672:	f8 94       	cli

00001674 <__stop_program>:
    1674:	ff cf       	rjmp	.-2      	; 0x1674 <__stop_program>
