
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001c28  00001c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ac  00800142  00001c6a  00001cde  2**0
                  ALLOC
  3 .stab         000052c8  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025a6  00000000  00000000  00006fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__ctors_end>
       4:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
       8:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__vector_2>
       c:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_3>
      10:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      14:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_5>
      18:	0c 94 08 07 	jmp	0xe10	; 0xe10 <__vector_6>
      1c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__vector_7>
      20:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_8>
      24:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_9>
      28:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      2c:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      30:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      34:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      38:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      3c:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      40:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      44:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      48:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      4c:	0c 94 40 03 	jmp	0x680	; 0x680 <__vector_19>
      50:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      54:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>
      58:	0c 94 9c 01 	jmp	0x338	; 0x338 <__bad_interrupt>

0000005c <__c.1771>:
      5c:	0a 0a 49 6e 76 61 6c 69 64 20 49 6e 74 65 72 75     ..Invalid Interu
      6c:	70 74 20 45 6e 61 62 6c 65 64 0a 00                 pt Enabled..

00000078 <__c.1735>:
      78:	0a 43 75 72 72 20 4d 6f 74 6f 72 73 3a 20 4c 3a     .Curr Motors: L:
      88:	25 64 20 25 64 3a 52 00                             %d %d:R.

00000090 <__c.1732>:
      90:	0a 54 75 72 6e 20 49 6e 63 72 65 6d 65 6e 74 3a     .Turn Increment:
      a0:	20 25 64 00                                          %d.

000000a4 <__c.1727>:
      a4:	0a 4d 61 78 20 43 68 61 6e 20 5b 4c 20 30 20 31     .Max Chan [L 0 1
      b4:	20 32 20 33 20 52 5d 3a 20 25 64 3b 76 3d 25 64      2 3 R]: %d;v=%d
	...

000000c5 <__c.1703>:
      c5:	0a 49 6e 69 74 3a 20 44 6f 6e 65 0a 0a 00           .Init: Done...

000000d3 <__c.1825>:
      d3:	09 5b 64 6f 6e 65 5d 00                             .[done].

000000db <__c.1823>:
      db:	0a 61 64 63 3a 20 69 6e 69 74 3a 20 73 65 74 75     .adc: init: setu
      eb:	70 20 63 6f 6e 76 65 72 74 69 6f 6e 73 00           p convertions.

000000f9 <__c.1821>:
      f9:	0a 61 64 63 3a 20 69 6e 69 74 00                    .adc: init.

00000104 <__c.1814>:
     104:	0a 5b 64 65 62 75 67 5d 20 57 61 72 6e 69 6e 67     .[debug] Warning
     114:	3a 20 75 6e 69 6d 70 6c 69 6d 65 6e 74 65 64 20     : unimplimented 
     124:	66 75 6e 63 74 69 6f 6e 20 61 64 63 5f 63 61 6c     function adc_cal
     134:	69 62 72 61 74 65 5f 73 74 6f 72 65 20 63 61 6c     ibrate_store cal
     144:	6c 65 64 00                                         led.

00000148 <__c.1757>:
     148:	0a 5b 64 65 62 75 67 5d 20 41 44 43 20 4f 46 46     .[debug] ADC OFF
     158:	53 45 54 53 3a 20 00                                SETS: .

0000015f <__c.1744>:
     15f:	0a 5b 64 65 62 75 67 5d 20 46 49 58 45 44 20 41     .[debug] FIXED A
     16f:	44 43 3a 20 00                                      DC: .

00000174 <__c.1738>:
     174:	0a 5b 64 65 62 75 67 5d 20 20 20 52 41 57 20 41     .[debug]   RAW A
     184:	44 43 3a 20 00                                      DC: .

00000189 <__c.1601>:
     189:	0a 75 73 61 72 74 3a 20 69 6e 69 74 20 75 73 61     .usart: init usa
     199:	72 74 30 09 5b 64 6f 6e 65 5d 00                    rt0.[done].

000001a4 <__c.1668>:
     1a4:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 09 5b     .timers: init:.[
     1b4:	64 6f 6e 65 5d 00                                   done].

000001ba <__c.1666>:
     1ba:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 73     .timers: init: s
     1ca:	74 61 72 74 2e 00                                   tart..

000001d0 <__c.1587>:
     1d0:	09 5b 64 6f 6e 65 5d 00                             .[done].

000001d8 <__c.1580>:
     1d8:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 74     .timers: init: t
     1e8:	69 6d 65 72 31 00                                   imer1.

000001ee <__c.1569>:
     1ee:	0a 4d 6f 64 65 3a 20 25 64 00                       .Mode: %d.

000001f8 <__c.1530>:
     1f8:	09 5b 64 6f 6e 65 5d 00                             .[done].

00000200 <__c.1522>:
     200:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 74     .timers: init: t
     210:	69 6d 65 72 32 00                                   imer2.

00000216 <__c.1685>:
     216:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     226:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     236:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

00000244 <__c.1670>:
     244:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     254:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     264:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

00000272 <__c.1648>:
     272:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     282:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     292:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

000002a0 <__c.1579>:
     2a0:	0a 5b 64 65 62 75 67 5d 20 50 42 3f 20 52 65 6c     .[debug] PB? Rel
     2b0:	65 61 73 65 64 00                                   eased.

000002b6 <__c.1558>:
     2b6:	0a 5b 64 65 62 75 67 5d 20 50 45 3f 20 52 65 6c     .[debug] PE? Rel
     2c6:	65 61 73 65 64 00                                   eased.

000002cc <__c.1556>:
     2cc:	0a 43 75 72 72 65 6e 74 20 4d 6f 64 65 20 28 46     .Current Mode (F
     2dc:	2f 57 29 3d 20 25 64 00                             /W)= %d.

000002e4 <__c.1554>:
     2e4:	0a 43 75 72 72 65 6e 74 20 4d 6f 64 65 20 28 54     .Current Mode (T
     2f4:	2f 57 29 20 3d 20 25 64 00 00                       /W) = %d..

000002fe <__ctors_end>:
     2fe:	11 24       	eor	r1, r1
     300:	1f be       	out	0x3f, r1	; 63
     302:	cf ef       	ldi	r28, 0xFF	; 255
     304:	d4 e0       	ldi	r29, 0x04	; 4
     306:	de bf       	out	0x3e, r29	; 62
     308:	cd bf       	out	0x3d, r28	; 61

0000030a <__do_copy_data>:
     30a:	11 e0       	ldi	r17, 0x01	; 1
     30c:	a0 e0       	ldi	r26, 0x00	; 0
     30e:	b1 e0       	ldi	r27, 0x01	; 1
     310:	e8 e2       	ldi	r30, 0x28	; 40
     312:	fc e1       	ldi	r31, 0x1C	; 28
     314:	02 c0       	rjmp	.+4      	; 0x31a <.do_copy_data_start>

00000316 <.do_copy_data_loop>:
     316:	05 90       	lpm	r0, Z+
     318:	0d 92       	st	X+, r0

0000031a <.do_copy_data_start>:
     31a:	a2 34       	cpi	r26, 0x42	; 66
     31c:	b1 07       	cpc	r27, r17
     31e:	d9 f7       	brne	.-10     	; 0x316 <.do_copy_data_loop>

00000320 <__do_clear_bss>:
     320:	11 e0       	ldi	r17, 0x01	; 1
     322:	a2 e4       	ldi	r26, 0x42	; 66
     324:	b1 e0       	ldi	r27, 0x01	; 1
     326:	01 c0       	rjmp	.+2      	; 0x32a <.do_clear_bss_start>

00000328 <.do_clear_bss_loop>:
     328:	1d 92       	st	X+, r1

0000032a <.do_clear_bss_start>:
     32a:	ae 3e       	cpi	r26, 0xEE	; 238
     32c:	b1 07       	cpc	r27, r17
     32e:	e1 f7       	brne	.-8      	; 0x328 <.do_clear_bss_loop>
     330:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
     334:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <_exit>

00000338 <__bad_interrupt>:
     338:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_default>

0000033c <clock_init>:
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	20 e8       	ldi	r18, 0x80	; 128
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	20 93 61 00 	sts	0x0061, r18
     34a:	80 93 61 00 	sts	0x0061, r24
     34e:	0f be       	out	0x3f, r0	; 63
	#else
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}
     350:	08 95       	ret

00000352 <__vector_default>:
			++sp;
		}
	}	
} 
		
ISR(BADISR_vect) {
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
	fprintf_P(stderr,PSTR("\n\nInvalid Interupt Enabled\n"));
     360:	8c e5       	ldi	r24, 0x5C	; 92
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	9f 93       	push	r25
     366:	8f 93       	push	r24
     368:	80 91 ec 01 	lds	r24, 0x01EC
     36c:	90 91 ed 01 	lds	r25, 0x01ED
     370:	9f 93       	push	r25
     372:	8f 93       	push	r24
     374:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
}
     380:	9f 91       	pop	r25
     382:	8f 91       	pop	r24
     384:	0f 90       	pop	r0
     386:	0f be       	out	0x3f, r0	; 63
     388:	0f 90       	pop	r0
     38a:	1f 90       	pop	r1
     38c:	18 95       	reti

0000038e <init>:
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
	cli(); // Starts with interrupts disabled?
     38e:	f8 94       	cli
	power_all_disable();
     390:	e4 e6       	ldi	r30, 0x64	; 100
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	8f 61       	ori	r24, 0x1F	; 31
     398:	80 83       	st	Z, r24
	PCMSK1=PCMSK0=EIMSK=0; // Butterfly doesn't remove it's interupts, block them.
     39a:	1d ba       	out	0x1d, r1	; 29
     39c:	8d b3       	in	r24, 0x1d	; 29
     39e:	eb e6       	ldi	r30, 0x6B	; 107
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 83       	st	Z, r24
     3a4:	80 81       	ld	r24, Z
     3a6:	80 93 6c 00 	sts	0x006C, r24
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	20 e8       	ldi	r18, 0x80	; 128
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	20 93 61 00 	sts	0x0061, r18
     3b8:	80 93 61 00 	sts	0x0061, r24
     3bc:	0f be       	out	0x3f, r0	; 63
void init(void) {
	cli(); // Starts with interrupts disabled?
	power_all_disable();
	PCMSK1=PCMSK0=EIMSK=0; // Butterfly doesn't remove it's interupts, block them.
	clock_init();
	joy_init();
     3be:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <joy_init>
	usart_init();
     3c2:	0e 94 f6 06 	call	0xdec	; 0xdec <usart_init>
	adc_init();
     3c6:	0e 94 a1 03 	call	0x742	; 0x742 <adc_init>
	timers_init();
     3ca:	0e 94 1d 08 	call	0x103a	; 0x103a <timers_init>
	motors_init();
     3ce:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <motors_init>
	sei();
     3d2:	78 94       	sei
	#ifdef debug
	printf_P(PSTR("\nInit: Done\n\n"));
     3d4:	85 ec       	ldi	r24, 0xC5	; 197
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	9f 93       	push	r25
     3da:	8f 93       	push	r24
     3dc:	0e 94 07 0b 	call	0x160e	; 0x160e <printf_P>
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
	#endif
}
     3e4:	08 95       	ret

000003e6 <main>:



int main(void) {
     3e6:	2f 92       	push	r2
     3e8:	3f 92       	push	r3
     3ea:	4f 92       	push	r4
     3ec:	5f 92       	push	r5
     3ee:	6f 92       	push	r6
     3f0:	7f 92       	push	r7
     3f2:	8f 92       	push	r8
     3f4:	9f 92       	push	r9
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	df 93       	push	r29
     406:	cf 93       	push	r28
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	28 97       	sbiw	r28, 0x08	; 8
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
	init();
     418:	0e 94 c7 01 	call	0x38e	; 0x38e <init>
	c_mode=WAIT;
     41c:	10 92 d4 01 	sts	0x01D4, r1
	initial=true;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	80 93 e6 01 	sts	0x01E6, r24
		if	(c_mode==FOLLOW && new_adc_data) {
			if (new_adc_data) {
				new_adc_data=false;
				if (initial) {
					lf_full_speed();
					initial=false;
     426:	4e 01       	movw	r8, r28
     428:	08 94       	sec
     42a:	81 1c       	adc	r8, r1
     42c:	91 1c       	adc	r9, r1
				lf_turn_inc(maxv-nextv,maxi>=0);				
	
				//lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);


				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
     42e:	e0 e9       	ldi	r30, 0x90	; 144
     430:	2e 2e       	mov	r2, r30
     432:	e0 e0       	ldi	r30, 0x00	; 0
     434:	3e 2e       	mov	r3, r30
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
							motor_get_speed(RIGHT)};
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
     436:	78 e7       	ldi	r23, 0x78	; 120
     438:	47 2e       	mov	r4, r23
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	57 2e       	mov	r5, r23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     43e:	60 ea       	ldi	r22, 0xA0	; 160
     440:	66 2e       	mov	r6, r22
     442:	6f e0       	ldi	r22, 0x0F	; 15
     444:	76 2e       	mov	r7, r22
	init();
	c_mode=WAIT;
	initial=true;
		
	for(;;) {
		if	(c_mode==FOLLOW && new_adc_data) {
     446:	80 91 d4 01 	lds	r24, 0x01D4
     44a:	82 30       	cpi	r24, 0x02	; 2
     44c:	09 f0       	breq	.+2      	; 0x450 <main+0x6a>
     44e:	91 c0       	rjmp	.+290    	; 0x572 <__stack+0x73>
     450:	80 91 e7 01 	lds	r24, 0x01E7
     454:	88 23       	and	r24, r24
     456:	09 f4       	brne	.+2      	; 0x45a <main+0x74>
     458:	8c c0       	rjmp	.+280    	; 0x572 <__stack+0x73>
			if (new_adc_data) {
     45a:	80 91 e7 01 	lds	r24, 0x01E7
     45e:	88 23       	and	r24, r24
     460:	91 f3       	breq	.-28     	; 0x446 <main+0x60>
				new_adc_data=false;
     462:	10 92 e7 01 	sts	0x01E7, r1
				if (initial) {
     466:	80 91 e6 01 	lds	r24, 0x01E6
     46a:	88 23       	and	r24, r24
     46c:	21 f0       	breq	.+8      	; 0x476 <main+0x90>
					lf_full_speed();
     46e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <lf_full_speed>
					initial=false;
     472:	10 92 e6 01 	sts	0x01E6, r1
     476:	64 01       	movw	r12, r8
     478:	74 01       	movw	r14, r8
     47a:	00 e0       	ldi	r16, 0x00	; 0
				}
				
				// gen copy of fixed adc inputs.
				uint16_t adc_vc[channel_amt];
				for (uint8_t i=0;i<channel_amt;++i) {
					adc_vc[i]=adc_get_val(i);
     47c:	80 2f       	mov	r24, r16
     47e:	0e 94 23 03 	call	0x646	; 0x646 <adc_get_val>
     482:	f7 01       	movw	r30, r14
     484:	81 93       	st	Z+, r24
     486:	91 93       	st	Z+, r25
     488:	7f 01       	movw	r14, r30
					initial=false;
				}
				
				// gen copy of fixed adc inputs.
				uint16_t adc_vc[channel_amt];
				for (uint8_t i=0;i<channel_amt;++i) {
     48a:	0f 5f       	subi	r16, 0xFF	; 255
     48c:	04 30       	cpi	r16, 0x04	; 4
     48e:	b1 f7       	brne	.-20     	; 0x47c <main+0x96>
     490:	54 e0       	ldi	r21, 0x04	; 4
     492:	f5 2e       	mov	r15, r21
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	20 e0       	ldi	r18, 0x00	; 0
				}
		
				uint8_t  maxi=channel_amt;
				uint16_t maxv=0;
				for (uint8_t i=0;i<channel_amt;++i) {
					if (adc_vc[i]>maxv) {
     49a:	f6 01       	movw	r30, r12
     49c:	00 81       	ld	r16, Z
     49e:	11 81       	ldd	r17, Z+1	; 0x01
     4a0:	80 17       	cp	r24, r16
     4a2:	91 07       	cpc	r25, r17
     4a4:	10 f0       	brcs	.+4      	; 0x4aa <main+0xc4>
     4a6:	8c 01       	movw	r16, r24
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <main+0xc6>
     4aa:	f2 2e       	mov	r15, r18
					adc_vc[i]=adc_get_val(i);
				}
		
				uint8_t  maxi=channel_amt;
				uint16_t maxv=0;
				for (uint8_t i=0;i<channel_amt;++i) {
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	c8 0e       	add	r12, r24
     4b4:	d9 1e       	adc	r13, r25
     4b6:	24 30       	cpi	r18, 0x04	; 4
     4b8:	11 f0       	breq	.+4      	; 0x4be <main+0xd8>
     4ba:	c8 01       	movw	r24, r16
     4bc:	ee cf       	rjmp	.-36     	; 0x49a <main+0xb4>
						maxv=adc_vc[i];
					}
				}
			
				#ifdef debug
				print_adc_values();
     4be:	0e 94 24 05 	call	0xa48	; 0xa48 <print_adc_values>
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
     4c2:	1f 93       	push	r17
     4c4:	0f 93       	push	r16
     4c6:	8f 2d       	mov	r24, r15
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	9f 93       	push	r25
     4cc:	8f 93       	push	r24
     4ce:	e4 ea       	ldi	r30, 0xA4	; 164
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	ff 93       	push	r31
     4d4:	ef 93       	push	r30
     4d6:	0e 94 07 0b 	call	0x160e	; 0x160e <printf_P>
				#endif

				int8_t turn_i;			
				turn_i = maxi-channel_amt/2; 
     4da:	4e ef       	ldi	r20, 0xFE	; 254
     4dc:	e4 2e       	mov	r14, r20
     4de:	ef 0c       	add	r14, r15
				// Correction needed for even numbers of sensors.
				#if (!(channel_amt%2))
				if (turn_i>0)
     4e0:	2d b7       	in	r18, 0x3d	; 61
     4e2:	3e b7       	in	r19, 0x3e	; 62
     4e4:	2a 5f       	subi	r18, 0xFA	; 250
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	3e bf       	out	0x3e, r19	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	2d bf       	out	0x3d, r18	; 61
     4f2:	1e 14       	cp	r1, r14
     4f4:	14 f4       	brge	.+4      	; 0x4fa <main+0x114>
					++turn_i;	
     4f6:	ef 2c       	mov	r14, r15
     4f8:	ea 94       	dec	r14
				#endif

				//Find Sensor "next to" max sensor.
				uint8_t nexti, nextv;
				if (maxi>0)
     4fa:	ff 20       	and	r15, r15
     4fc:	11 f0       	breq	.+4      	; 0x502 <__stack+0x3>
					nexti=maxi-1;
     4fe:	bf 2c       	mov	r11, r15
     500:	ba 94       	dec	r11
				else if (maxi<0)
					nexti=maxi+1;
				
				//Hack for lack of zero sensor on even sensored bots.
				#if (!(channel_amt%2))
				if (nexti==0) {
     502:	bb 20       	and	r11, r11
     504:	11 f4       	brne	.+4      	; 0x50a <__stack+0xb>
     506:	bb 24       	eor	r11, r11
     508:	ba 94       	dec	r11
				#endif	

				nextv=adc_vc[nexti];
				
				//TODO: Use next[vi], max[vi] to find a turn increment.
				lf_turn_inc(maxv-nextv,maxi>=0);				
     50a:	eb 2d       	mov	r30, r11
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	ee 0f       	add	r30, r30
     510:	ff 1f       	adc	r31, r31
     512:	e8 0d       	add	r30, r8
     514:	f9 1d       	adc	r31, r9
     516:	80 81       	ld	r24, Z
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	f8 01       	movw	r30, r16
     51c:	e8 1b       	sub	r30, r24
     51e:	f1 09       	sbc	r31, r1
     520:	cf 01       	movw	r24, r30
     522:	0e 94 ca 08 	call	0x1194	; 0x1194 <lf_turn_inc>
	
				//lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);


				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
     526:	8e 2d       	mov	r24, r14
     528:	99 27       	eor	r25, r25
     52a:	87 fd       	sbrc	r24, 7
     52c:	90 95       	com	r25
     52e:	98 2f       	mov	r25, r24
     530:	88 27       	eor	r24, r24
     532:	99 0f       	add	r25, r25
     534:	9f 93       	push	r25
     536:	8f 93       	push	r24
     538:	3f 92       	push	r3
     53a:	2f 92       	push	r2
     53c:	0e 94 07 0b 	call	0x160e	; 0x160e <printf_P>
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	0e 94 9e 08 	call	0x113c	; 0x113c <motor_get_speed>
     546:	8c 01       	movw	r16, r24
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 9e 08 	call	0x113c	; 0x113c <motor_get_speed>
							motor_get_speed(RIGHT)};
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	1f 93       	push	r17
     554:	0f 93       	push	r16
     556:	5f 92       	push	r5
     558:	4f 92       	push	r4
     55a:	0e 94 07 0b 	call	0x160e	; 0x160e <printf_P>
     55e:	2d b7       	in	r18, 0x3d	; 61
     560:	3e b7       	in	r19, 0x3e	; 62
     562:	26 5f       	subi	r18, 0xF6	; 246
     564:	3f 4f       	sbci	r19, 0xFF	; 255
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	3e bf       	out	0x3e, r19	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	2d bf       	out	0x3d, r18	; 61
     570:	6a cf       	rjmp	.-300    	; 0x446 <main+0x60>
			}
			else { // if !new_adc_data
				// Sleep? (need adc, timers, pwm outputs (IO clock), 
			}
		}
		else if	(c_mode==TEST) {
     572:	80 91 d4 01 	lds	r24, 0x01D4
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	09 f0       	breq	.+2      	; 0x57c <__stack+0x7d>
     57a:	65 cf       	rjmp	.-310    	; 0x446 <main+0x60>
			if (initial) {
     57c:	80 91 e6 01 	lds	r24, 0x01E6
     580:	88 23       	and	r24, r24
     582:	51 f0       	breq	.+20     	; 0x598 <__stack+0x99>
				motor_mode(MOTOR_L_FWD,LEFT);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	0e 94 29 09 	call	0x1252	; 0x1252 <motor_mode>
				motor_mode(MOTOR_R_FWD,RIGHT);
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 29 09 	call	0x1252	; 0x1252 <motor_mode>
				initial=false;
     594:	10 92 e6 01 	sts	0x01E6, r1
			}
			static uint16_t sp;
			
			motor_set_speed(sp,LEFT);
     598:	60 e0       	ldi	r22, 0x00	; 0
     59a:	80 91 42 01 	lds	r24, 0x0142
     59e:	90 91 43 01 	lds	r25, 0x0143
     5a2:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>
			motor_set_speed(sp,RIGHT);
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	80 91 42 01 	lds	r24, 0x0142
     5ac:	90 91 43 01 	lds	r25, 0x0143
     5b0:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>
     5b4:	c3 01       	movw	r24, r6
     5b6:	01 97       	sbiw	r24, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <__stack+0xb7>
			_delay_ms(2);
			//if (!(sp%0x100))
			//	printf("\nsp=%x",sp);
			++sp;
     5ba:	80 91 42 01 	lds	r24, 0x0142
     5be:	90 91 43 01 	lds	r25, 0x0143
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	90 93 43 01 	sts	0x0143, r25
     5c8:	80 93 42 01 	sts	0x0142, r24
     5cc:	3c cf       	rjmp	.-392    	; 0x446 <main+0x60>

000005ce <print_bin>:
	#endif
	
	//OSCAL set by the bootloader.
}

void  print_bin(uint8_t inp) {
     5ce:	ef 92       	push	r14
     5d0:	ff 92       	push	r15
     5d2:	0f 93       	push	r16
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	c7 e0       	ldi	r28, 0x07	; 7
     5dc:	d0 e0       	ldi	r29, 0x00	; 0
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     5de:	f1 e0       	ldi	r31, 0x01	; 1
     5e0:	ef 2e       	mov	r14, r31
     5e2:	f1 2c       	mov	r15, r1
     5e4:	08 2f       	mov	r16, r24
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	c7 01       	movw	r24, r14
     5ea:	0c 2e       	mov	r0, r28
     5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <print_bin+0x24>
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	0a 94       	dec	r0
     5f4:	e2 f7       	brpl	.-8      	; 0x5ee <print_bin+0x20>
     5f6:	80 23       	and	r24, r16
     5f8:	91 23       	and	r25, r17
     5fa:	0c 2e       	mov	r0, r28
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <print_bin+0x34>
     5fe:	95 95       	asr	r25
     600:	87 95       	ror	r24
     602:	0a 94       	dec	r0
     604:	e2 f7       	brpl	.-8      	; 0x5fe <print_bin+0x30>
     606:	c0 96       	adiw	r24, 0x30	; 48
     608:	0e 94 2e 0b 	call	0x165c	; 0x165c <putchar>
     60c:	21 97       	sbiw	r28, 0x01	; 1
	
	//OSCAL set by the bootloader.
}

void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	cf 3f       	cpi	r28, 0xFF	; 255
     612:	d8 07       	cpc	r29, r24
     614:	49 f7       	brne	.-46     	; 0x5e8 <print_bin+0x1a>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	1f 91       	pop	r17
     61c:	0f 91       	pop	r16
     61e:	ff 90       	pop	r15
     620:	ef 90       	pop	r14
     622:	08 95       	ret

00000624 <copysign>:
     The copysign() function returns \a __x but with the sign of \a __y.
     They work even if \a __x or \a __y are NaN or zero.
 */
__ATTR_CONST__ extern inline double copysign (double __x, double __y)
{
    __asm__ (
     624:	57 fb       	bst	r21, 7
     626:	97 f9       	bld	r25, 7
	"bst	%D2, 7	\n\t"
	"bld	%D0, 7	"
	: "=r" (__x)
	: "0" (__x), "r" (__y) );
    return __x;
}
     628:	08 95       	ret

0000062a <isfinite>:
     not plus or minus infinity, and not NaN.
  */
__ATTR_CONST__ extern inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
     62a:	68 2f       	mov	r22, r24
     62c:	66 0f       	add	r22, r22
     62e:	69 2f       	mov	r22, r25
     630:	66 1f       	adc	r22, r22
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	6f 3f       	cpi	r22, 0xFF	; 255
     638:	11 f0       	breq	.+4      	; 0x63e <isfinite+0x14>
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	30 e0       	ldi	r19, 0x00	; 0
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    return __exp != 0xff;
}
     63e:	c9 01       	movw	r24, r18
     640:	08 95       	ret

00000642 <max>:
#include "joystick.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
     642:	86 2f       	mov	r24, r22


void clock_init(void) {
	
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
     644:	08 95       	ret

00000646 <adc_get_val>:
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
     646:	e8 2f       	mov	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ee 0f       	add	r30, r30
     64c:	ff 1f       	adc	r31, r31
     64e:	df 01       	movw	r26, r30
     650:	a4 53       	subi	r26, 0x34	; 52
     652:	be 4f       	sbci	r27, 0xFE	; 254
     654:	eb 52       	subi	r30, 0x2B	; 43
     656:	fe 4f       	sbci	r31, 0xFE	; 254
     658:	20 81       	ld	r18, Z
     65a:	31 81       	ldd	r19, Z+1	; 0x01
     65c:	8d 91       	ld	r24, X+
     65e:	9c 91       	ld	r25, X
     660:	28 0f       	add	r18, r24
     662:	39 1f       	adc	r19, r25
	cli(); // Starts with interrupts disabled?
     664:	c9 01       	movw	r24, r18
     666:	08 95       	ret

00000668 <adc_set_channel>:

				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
							motor_get_speed(RIGHT)};
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
     668:	ac e7       	ldi	r26, 0x7C	; 124
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	9c 91       	ld	r25, X
     66e:	ee e0       	ldi	r30, 0x0E	; 14
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	e8 0f       	add	r30, r24
     674:	f1 1d       	adc	r31, r1
     676:	90 7e       	andi	r25, 0xE0	; 224
     678:	80 81       	ld	r24, Z
     67a:	98 2b       	or	r25, r24
     67c:	9c 93       	st	X, r25
				//0=LEFT, 3=RIGHT
				/*
				if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
     67e:	08 95       	ret

00000680 <__vector_19>:
					lf_turn_inc(LF_INC_LARGE,NEG);
					dir=LEFT;
				}
     680:	1f 92       	push	r1
     682:	0f 92       	push	r0
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	0f 92       	push	r0
     688:	11 24       	eor	r1, r1
     68a:	2f 93       	push	r18
     68c:	3f 93       	push	r19
     68e:	4f 93       	push	r20
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
     694:	af 93       	push	r26
     696:	bf 93       	push	r27
     698:	ef 93       	push	r30
     69a:	ff 93       	push	r31
				else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
					lf_turn_inc(LF_INC_LARGE,POS);
					dir=RIGHT;
     69c:	40 91 78 00 	lds	r20, 0x0078
				}
     6a0:	30 91 79 00 	lds	r19, 0x0079
				else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
					lf_turn_inc(LF_INC_SMALL,NEG);
					dir=LEFT;
     6a4:	20 91 44 01 	lds	r18, 0x0144
     6a8:	2f 5f       	subi	r18, 0xFF	; 255
     6aa:	20 93 44 01 	sts	0x0144, r18
				}
				else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
					lf_turn_inc(LF_INC_LARGE,POS);
     6ae:	80 91 dd 01 	lds	r24, 0x01DD
     6b2:	88 23       	and	r24, r24
     6b4:	11 f4       	brne	.+4      	; 0x6ba <__vector_19+0x3a>
     6b6:	e3 e0       	ldi	r30, 0x03	; 3
     6b8:	03 c0       	rjmp	.+6      	; 0x6c0 <__vector_19+0x40>
					dir=RIGHT;
     6ba:	e0 91 dd 01 	lds	r30, 0x01DD
     6be:	e1 50       	subi	r30, 0x01	; 1
				}
				else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	ee 0f       	add	r30, r30
     6c4:	ff 1f       	adc	r31, r31
     6c6:	df 01       	movw	r26, r30
     6c8:	a4 53       	subi	r26, 0x34	; 52
     6ca:	be 4f       	sbci	r27, 0xFE	; 254
     6cc:	93 2f       	mov	r25, r19
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	84 0f       	add	r24, r20
     6d2:	91 1d       	adc	r25, r1
     6d4:	8d 93       	st	X+, r24
     6d6:	9c 93       	st	X, r25
					//lf_full_speed();
     6d8:	e2 52       	subi	r30, 0x22	; 34
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	80 81       	ld	r24, Z
     6de:	91 81       	ldd	r25, Z+1	; 0x01
     6e0:	01 96       	adiw	r24, 0x01	; 1
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24
					dir=FWD;
				}
				else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     6e6:	80 91 dd 01 	lds	r24, 0x01DD
     6ea:	8f 5f       	subi	r24, 0xFF	; 255
     6ec:	80 93 dd 01 	sts	0x01DD, r24
     6f0:	80 91 dd 01 	lds	r24, 0x01DD
     6f4:	84 30       	cpi	r24, 0x04	; 4
     6f6:	10 f0       	brcs	.+4      	; 0x6fc <__vector_19+0x7c>
     6f8:	10 92 dd 01 	sts	0x01DD, r1
					//lf_full_speed();
					dir=FWD;
     6fc:	e0 91 dd 01 	lds	r30, 0x01DD

				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
							motor_get_speed(RIGHT)};
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
     700:	80 91 7c 00 	lds	r24, 0x007C
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	e2 5f       	subi	r30, 0xF2	; 242
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	80 7e       	andi	r24, 0xE0	; 224
     70c:	90 81       	ld	r25, Z
     70e:	89 2b       	or	r24, r25
     710:	80 93 7c 00 	sts	0x007C, r24
				*/
			
		
			}
			else { // if !new_adc_data
				// Sleep? (need adc, timers, pwm outputs (IO clock), 
     714:	82 2f       	mov	r24, r18
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	83 70       	andi	r24, 0x03	; 3
     71a:	90 70       	andi	r25, 0x00	; 0
     71c:	89 2b       	or	r24, r25
     71e:	19 f4       	brne	.+6      	; 0x726 <__vector_19+0xa6>
			}
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 93 e7 01 	sts	0x01E7, r24
		}
		else if	(c_mode==TEST) {
     726:	ff 91       	pop	r31
     728:	ef 91       	pop	r30
     72a:	bf 91       	pop	r27
     72c:	af 91       	pop	r26
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <adc_init>:
				uint8_t  maxi=channel_amt;
				uint16_t maxv=0;
				for (uint8_t i=0;i<channel_amt;++i) {
					if (adc_vc[i]>maxv) {
						maxi=i;
						maxv=adc_vc[i];
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	0f 93       	push	r16
     748:	1f 93       	push	r17
					}
				}
     74a:	89 ef       	ldi	r24, 0xF9	; 249
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	80 91 ec 01 	lds	r24, 0x01EC
     756:	90 91 ed 01 	lds	r25, 0x01ED
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
			
				#ifdef debug
     762:	e4 e6       	ldi	r30, 0x64	; 100
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	8e 7f       	andi	r24, 0xFE	; 254
     76a:	80 83       	st	Z, r24
				print_adc_values();
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
				#endif
     76c:	0c e7       	ldi	r16, 0x7C	; 124
     76e:	10 e0       	ldi	r17, 0x00	; 0
     770:	f8 01       	movw	r30, r16
     772:	80 81       	ld	r24, Z
     774:	80 64       	ori	r24, 0x40	; 64
     776:	80 83       	st	Z, r24

     778:	80 81       	ld	r24, Z
     77a:	8f 77       	andi	r24, 0x7F	; 127
     77c:	80 83       	st	Z, r24
				int8_t turn_i;			
				turn_i = maxi-channel_amt/2; 
				// Correction needed for even numbers of sensors.
				#if (!(channel_amt%2))
				if (turn_i>0)
     77e:	2a e7       	ldi	r18, 0x7A	; 122
     780:	e2 2e       	mov	r14, r18
     782:	f1 2c       	mov	r15, r1
     784:	f7 01       	movw	r30, r14
     786:	80 81       	ld	r24, Z
     788:	88 6a       	ori	r24, 0xA8	; 168
     78a:	80 83       	st	Z, r24
					++turn_i;	
     78c:	80 81       	ld	r24, Z
     78e:	88 7f       	andi	r24, 0xF8	; 248
     790:	86 60       	ori	r24, 0x06	; 6
     792:	80 83       	st	Z, r24
				#endif

				//Find Sensor "next to" max sensor.
     794:	eb e7       	ldi	r30, 0x7B	; 123
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	80 68       	ori	r24, 0x80	; 128
     79c:	80 83       	st	Z, r24
				uint8_t nexti, nextv;
     79e:	80 81       	ld	r24, Z
     7a0:	88 7f       	andi	r24, 0xF8	; 248
     7a2:	80 83       	st	Z, r24
				if (maxi>0)
					nexti=maxi-1;
				else if (maxi<0)
     7a4:	ee e7       	ldi	r30, 0x7E	; 126
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	80 6f       	ori	r24, 0xF0	; 240
     7ac:	80 83       	st	Z, r24
					nexti=maxi+1;
				
     7ae:	83 b7       	in	r24, 0x33	; 51
     7b0:	81 7f       	andi	r24, 0xF1	; 241
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	83 bf       	out	0x33, r24	; 51
				//Hack for lack of zero sensor on even sensored bots.
				#if (!(channel_amt%2))
     7b6:	8b ed       	ldi	r24, 0xDB	; 219
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	80 91 ec 01 	lds	r24, 0x01EC
     7c2:	90 91 ed 01 	lds	r25, 0x01ED
     7c6:	9f 93       	push	r25
     7c8:	8f 93       	push	r24
     7ca:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
				if (nexti==0) {
					if (maxi<0)
     7ce:	90 91 dd 01 	lds	r25, 0x01DD

				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
							motor_get_speed(RIGHT)};
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
     7d2:	f8 01       	movw	r30, r16
     7d4:	80 81       	ld	r24, Z
     7d6:	ae e0       	ldi	r26, 0x0E	; 14
     7d8:	b1 e0       	ldi	r27, 0x01	; 1
     7da:	fd 01       	movw	r30, r26
     7dc:	e9 0f       	add	r30, r25
     7de:	f1 1d       	adc	r31, r1
     7e0:	80 7e       	andi	r24, 0xE0	; 224
     7e2:	90 81       	ld	r25, Z
     7e4:	89 2b       	or	r24, r25
     7e6:	f8 01       	movw	r30, r16
     7e8:	80 83       	st	Z, r24
				//Hack for lack of zero sensor on even sensored bots.
				#if (!(channel_amt%2))
				if (nexti==0) {
					if (maxi<0)
						++nexti;
					else // maxi>0
     7ea:	f7 01       	movw	r30, r14
     7ec:	80 81       	ld	r24, Z
     7ee:	80 64       	ori	r24, 0x40	; 64
     7f0:	80 83       	st	Z, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <adc_init+0xb4>
						--nexti;
				}
				#endif	

     7fa:	80 91 dd 01 	lds	r24, 0x01DD
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	80 93 dd 01 	sts	0x01DD, r24
     804:	90 91 dd 01 	lds	r25, 0x01DD

				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
							motor_get_speed(RIGHT)};
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
     808:	f8 01       	movw	r30, r16
     80a:	80 81       	ld	r24, Z
     80c:	a9 0f       	add	r26, r25
     80e:	b1 1d       	adc	r27, r1
     810:	80 7e       	andi	r24, 0xE0	; 224
     812:	9c 91       	ld	r25, X
     814:	89 2b       	or	r24, r25
     816:	80 83       	st	Z, r24

				nextv=adc_vc[nexti];
				
				//TODO: Use next[vi], max[vi] to find a turn increment.
				lf_turn_inc(maxv-nextv,maxi>=0);				
	
     818:	83 ed       	ldi	r24, 0xD3	; 211
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	9f 93       	push	r25
     81e:	8f 93       	push	r24
     820:	80 91 ec 01 	lds	r24, 0x01EC
     824:	90 91 ed 01 	lds	r25, 0x01ED
     828:	9f 93       	push	r25
     82a:	8f 93       	push	r24
     82c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
     830:	8d b7       	in	r24, 0x3d	; 61
     832:	9e b7       	in	r25, 0x3e	; 62
     834:	0c 96       	adiw	r24, 0x0c	; 12
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	9e bf       	out	0x3e, r25	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	8d bf       	out	0x3d, r24	; 61
				//lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);

     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	08 95       	ret

0000084a <adc_calibrate_store>:
					lf_full_speed();
					initial=false;
				}
				
				// gen copy of fixed adc inputs.
				uint16_t adc_vc[channel_amt];
     84a:	84 e0       	ldi	r24, 0x04	; 4
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	80 91 ec 01 	lds	r24, 0x01EC
     856:	90 91 ed 01 	lds	r25, 0x01ED
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
				for (uint8_t i=0;i<channel_amt;++i) {
     86a:	08 95       	ret

0000086c <adc_calibrate_clear>:
					adc_vc[i]=adc_get_val(i);
				}
		
				uint8_t  maxi=channel_amt;
				uint16_t maxv=0;
     86c:	88 e0       	ldi	r24, 0x08	; 8
     86e:	e5 ed       	ldi	r30, 0xD5	; 213
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	df 01       	movw	r26, r30
     874:	1d 92       	st	X+, r1
     876:	8a 95       	dec	r24
     878:	e9 f7       	brne	.-6      	; 0x874 <adc_calibrate_clear+0x8>
				for (uint8_t i=0;i<channel_amt;++i) {
     87a:	10 92 45 01 	sts	0x0145, r1
					if (adc_vc[i]>maxv) {
     87e:	08 95       	ret

00000880 <adc_calibrate_update>:

void init(void) {
	cli(); // Starts with interrupts disabled?
	power_all_disable();
	PCMSK1=PCMSK0=EIMSK=0; // Butterfly doesn't remove it's interupts, block them.
	clock_init();
     880:	cf 92       	push	r12
     882:	df 92       	push	r13
     884:	ef 92       	push	r14
     886:	ff 92       	push	r15
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	df 93       	push	r29
     88e:	cf 93       	push	r28
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	60 97       	sbiw	r28, 0x10	; 16
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
	joy_init();
	usart_init();
	adc_init();
     8a0:	de 01       	movw	r26, r28
     8a2:	19 96       	adiw	r26, 0x09	; 9
     8a4:	ec ec       	ldi	r30, 0xCC	; 204
     8a6:	f1 e0       	ldi	r31, 0x01	; 1
     8a8:	88 e0       	ldi	r24, 0x08	; 8
     8aa:	01 90       	ld	r0, Z+
     8ac:	0d 92       	st	X+, r0
     8ae:	81 50       	subi	r24, 0x01	; 1
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <adc_calibrate_update+0x2a>
}



int main(void) {
	init();
     8b2:	49 85       	ldd	r20, Y+9	; 0x09
     8b4:	5a 85       	ldd	r21, Y+10	; 0x0a
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	8e 01       	movw	r16, r28
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	be 01       	movw	r22, r28
     8c2:	67 5f       	subi	r22, 0xF7	; 247
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	d8 01       	movw	r26, r16
     8c8:	a2 0f       	add	r26, r18
     8ca:	b3 1f       	adc	r27, r19
     8cc:	fb 01       	movw	r30, r22
     8ce:	e2 0f       	add	r30, r18
     8d0:	f3 1f       	adc	r31, r19
     8d2:	80 81       	ld	r24, Z
     8d4:	91 81       	ldd	r25, Z+1	; 0x01
     8d6:	fa 01       	movw	r30, r20
     8d8:	e8 1b       	sub	r30, r24
     8da:	f9 0b       	sbc	r31, r25
     8dc:	ed 93       	st	X+, r30
     8de:	fc 93       	st	X, r31
     8e0:	2e 5f       	subi	r18, 0xFE	; 254
     8e2:	3f 4f       	sbci	r19, 0xFF	; 255
	#endif
}



int main(void) {
     8e4:	28 30       	cpi	r18, 0x08	; 8
     8e6:	31 05       	cpc	r19, r1
     8e8:	71 f7       	brne	.-36     	; 0x8c6 <adc_calibrate_update+0x46>
	init();
	c_mode=WAIT;
	initial=true;
		
     8ea:	80 91 45 01 	lds	r24, 0x0145
     8ee:	9e 01       	movw	r18, r28
     8f0:	2f 5f       	subi	r18, 0xFF	; 255
     8f2:	3f 4f       	sbci	r19, 0xFF	; 255
     8f4:	88 23       	and	r24, r24
     8f6:	49 f4       	brne	.+18     	; 0x90a <adc_calibrate_update+0x8a>
	for(;;) {
     8f8:	a5 ed       	ldi	r26, 0xD5	; 213
     8fa:	b1 e0       	ldi	r27, 0x01	; 1
     8fc:	f9 01       	movw	r30, r18
     8fe:	88 e0       	ldi	r24, 0x08	; 8
     900:	01 90       	ld	r0, Z+
     902:	0d 92       	st	X+, r0
     904:	81 50       	subi	r24, 0x01	; 1
     906:	e1 f7       	brne	.-8      	; 0x900 <adc_calibrate_update+0x80>
     908:	22 c0       	rjmp	.+68     	; 0x94e <adc_calibrate_update+0xce>
     90a:	e5 ed       	ldi	r30, 0xD5	; 213
     90c:	f1 e0       	ldi	r31, 0x01	; 1
     90e:	79 01       	movw	r14, r18
		if	(c_mode==FOLLOW && new_adc_data) {
			if (new_adc_data) {
				new_adc_data=false;
     910:	08 2f       	mov	r16, r24
     912:	10 e0       	ldi	r17, 0x00	; 0
     914:	68 01       	movw	r12, r16
     916:	08 94       	sec
     918:	c1 1c       	adc	r12, r1
     91a:	d1 1c       	adc	r13, r1
     91c:	80 81       	ld	r24, Z
     91e:	91 81       	ldd	r25, Z+1	; 0x01
     920:	9c 01       	movw	r18, r24
     922:	02 9f       	mul	r16, r18
     924:	c0 01       	movw	r24, r0
     926:	03 9f       	mul	r16, r19
     928:	90 0d       	add	r25, r0
     92a:	12 9f       	mul	r17, r18
     92c:	90 0d       	add	r25, r0
     92e:	11 24       	eor	r1, r1
     930:	d7 01       	movw	r26, r14
     932:	2d 91       	ld	r18, X+
     934:	3d 91       	ld	r19, X+
     936:	7d 01       	movw	r14, r26
     938:	82 0f       	add	r24, r18
     93a:	93 1f       	adc	r25, r19
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <__divmodhi4>
     942:	61 93       	st	Z+, r22
     944:	71 93       	st	Z+, r23
	c_mode=WAIT;
	initial=true;
		
	for(;;) {
		if	(c_mode==FOLLOW && new_adc_data) {
			if (new_adc_data) {
     946:	b1 e0       	ldi	r27, 0x01	; 1
     948:	ed 3d       	cpi	r30, 0xDD	; 221
     94a:	fb 07       	cpc	r31, r27
     94c:	39 f7       	brne	.-50     	; 0x91c <adc_calibrate_update+0x9c>
				new_adc_data=false;
				if (initial) {
					lf_full_speed();
					initial=false;
     94e:	80 91 45 01 	lds	r24, 0x0145
     952:	8f 5f       	subi	r24, 0xFF	; 255
     954:	80 93 45 01 	sts	0x0145, r24
				}
     958:	60 96       	adiw	r28, 0x10	; 16
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	08 95       	ret

00000976 <print_adc_calibration>:
	#else
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17

     97a:	88 e4       	ldi	r24, 0x48	; 72
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	9f 93       	push	r25
     980:	8f 93       	push	r24
     982:	80 91 ec 01 	lds	r24, 0x01EC
     986:	90 91 ed 01 	lds	r25, 0x01ED
     98a:	9f 93       	push	r25
     98c:	8f 93       	push	r24
     98e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     992:	80 91 d5 01 	lds	r24, 0x01D5
     996:	90 91 d6 01 	lds	r25, 0x01D6
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	1f 92       	push	r1
     9a0:	1f 92       	push	r1
     9a2:	00 e0       	ldi	r16, 0x00	; 0
     9a4:	11 e0       	ldi	r17, 0x01	; 1
     9a6:	1f 93       	push	r17
     9a8:	0f 93       	push	r16
     9aa:	80 91 ec 01 	lds	r24, 0x01EC
     9ae:	90 91 ed 01 	lds	r25, 0x01ED
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     9ba:	80 91 d7 01 	lds	r24, 0x01D7
     9be:	90 91 d8 01 	lds	r25, 0x01D8
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9f 93       	push	r25
     9cc:	8f 93       	push	r24
     9ce:	1f 93       	push	r17
     9d0:	0f 93       	push	r16
     9d2:	80 91 ec 01 	lds	r24, 0x01EC
     9d6:	90 91 ed 01 	lds	r25, 0x01ED
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     9e2:	80 91 d9 01 	lds	r24, 0x01D9
     9e6:	90 91 da 01 	lds	r25, 0x01DA
     9ea:	9f 93       	push	r25
     9ec:	8f 93       	push	r24
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	9f 93       	push	r25
     9f4:	8f 93       	push	r24
     9f6:	1f 93       	push	r17
     9f8:	0f 93       	push	r16
     9fa:	80 91 ec 01 	lds	r24, 0x01EC
     9fe:	90 91 ed 01 	lds	r25, 0x01ED
     a02:	9f 93       	push	r25
     a04:	8f 93       	push	r24
     a06:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     a0a:	80 91 db 01 	lds	r24, 0x01DB
     a0e:	90 91 dc 01 	lds	r25, 0x01DC
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	83 e0       	ldi	r24, 0x03	; 3
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	9f 93       	push	r25
     a1c:	8f 93       	push	r24
     a1e:	1f 93       	push	r17
     a20:	0f 93       	push	r16
     a22:	80 91 ec 01 	lds	r24, 0x01EC
     a26:	90 91 ed 01 	lds	r25, 0x01ED
     a2a:	9f 93       	push	r25
     a2c:	8f 93       	push	r24
     a2e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     a32:	8d b7       	in	r24, 0x3d	; 61
     a34:	9e b7       	in	r25, 0x3e	; 62
     a36:	84 96       	adiw	r24, 0x24	; 36
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	9e bf       	out	0x3e, r25	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	8d bf       	out	0x3d, r24	; 61
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <print_adc_values>:
void clock_init(void) {
	
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
     a48:	cf 92       	push	r12
     a4a:	df 92       	push	r13
     a4c:	ef 92       	push	r14
     a4e:	ff 92       	push	r15
     a50:	0f 93       	push	r16
     a52:	1f 93       	push	r17
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
	#elif F_CPU == 4000000
     a58:	84 e7       	ldi	r24, 0x74	; 116
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	9f 93       	push	r25
     a5e:	8f 93       	push	r24
     a60:	80 91 ec 01 	lds	r24, 0x01EC
     a64:	90 91 ed 01 	lds	r25, 0x01ED
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
     a70:	80 91 cc 01 	lds	r24, 0x01CC
     a74:	90 91 cd 01 	lds	r25, 0x01CD
     a78:	9f 93       	push	r25
     a7a:	8f 93       	push	r24
     a7c:	1f 92       	push	r1
     a7e:	1f 92       	push	r1
     a80:	00 e0       	ldi	r16, 0x00	; 0
     a82:	11 e0       	ldi	r17, 0x01	; 1
     a84:	1f 93       	push	r17
     a86:	0f 93       	push	r16
     a88:	80 91 ec 01 	lds	r24, 0x01EC
     a8c:	90 91 ed 01 	lds	r25, 0x01ED
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     a98:	80 91 ce 01 	lds	r24, 0x01CE
     a9c:	90 91 cf 01 	lds	r25, 0x01CF
     aa0:	9f 93       	push	r25
     aa2:	8f 93       	push	r24
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9f 93       	push	r25
     aaa:	8f 93       	push	r24
     aac:	1f 93       	push	r17
     aae:	0f 93       	push	r16
     ab0:	80 91 ec 01 	lds	r24, 0x01EC
     ab4:	90 91 ed 01 	lds	r25, 0x01ED
     ab8:	9f 93       	push	r25
     aba:	8f 93       	push	r24
     abc:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     ac0:	80 91 d0 01 	lds	r24, 0x01D0
     ac4:	90 91 d1 01 	lds	r25, 0x01D1
     ac8:	9f 93       	push	r25
     aca:	8f 93       	push	r24
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	9f 93       	push	r25
     ad2:	8f 93       	push	r24
     ad4:	1f 93       	push	r17
     ad6:	0f 93       	push	r16
     ad8:	80 91 ec 01 	lds	r24, 0x01EC
     adc:	90 91 ed 01 	lds	r25, 0x01ED
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     ae8:	80 91 d2 01 	lds	r24, 0x01D2
     aec:	90 91 d3 01 	lds	r25, 0x01D3
     af0:	9f 93       	push	r25
     af2:	8f 93       	push	r24
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	1f 93       	push	r17
     afe:	0f 93       	push	r16
     b00:	80 91 ec 01 	lds	r24, 0x01EC
     b04:	90 91 ed 01 	lds	r25, 0x01ED
     b08:	9f 93       	push	r25
     b0a:	8f 93       	push	r24
     b0c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
		clock_prescale_set(clock_div_1);	
	#else
     b10:	8d b7       	in	r24, 0x3d	; 61
     b12:	9e b7       	in	r25, 0x3e	; 62
     b14:	84 96       	adiw	r24, 0x24	; 36
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	9e bf       	out	0x3e, r25	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	8d bf       	out	0x3d, r24	; 61
     b20:	8f e5       	ldi	r24, 0x5F	; 95
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	9f 93       	push	r25
     b26:	8f 93       	push	r24
     b28:	80 91 ec 01 	lds	r24, 0x01EC
     b2c:	90 91 ed 01 	lds	r25, 0x01ED
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
     b38:	4c ec       	ldi	r20, 0xCC	; 204
     b3a:	c4 2e       	mov	r12, r20
     b3c:	41 e0       	ldi	r20, 0x01	; 1
     b3e:	d4 2e       	mov	r13, r20
     b40:	35 ed       	ldi	r19, 0xD5	; 213
     b42:	e3 2e       	mov	r14, r19
     b44:	31 e0       	ldi	r19, 0x01	; 1
     b46:	f3 2e       	mov	r15, r19
     b48:	c0 e0       	ldi	r28, 0x00	; 0
     b4a:	d0 e0       	ldi	r29, 0x00	; 0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	0f 90       	pop	r0
		#error "F_CPU Unrecognized"
	#endif
     b54:	f7 01       	movw	r30, r14
     b56:	81 91       	ld	r24, Z+
     b58:	91 91       	ld	r25, Z+
     b5a:	7f 01       	movw	r14, r30
     b5c:	f6 01       	movw	r30, r12
     b5e:	21 91       	ld	r18, Z+
     b60:	31 91       	ld	r19, Z+
     b62:	6f 01       	movw	r12, r30
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	1f 93       	push	r17
     b72:	0f 93       	push	r16
     b74:	80 91 ec 01 	lds	r24, 0x01EC
     b78:	90 91 ed 01 	lds	r25, 0x01ED
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	0e 94 c2 0a 	call	0x1584	; 0x1584 <fprintf>
     b84:	21 96       	adiw	r28, 0x01	; 1
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
     b86:	8d b7       	in	r24, 0x3d	; 61
     b88:	9e b7       	in	r25, 0x3e	; 62
     b8a:	08 96       	adiw	r24, 0x08	; 8
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	9e bf       	out	0x3e, r25	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	8d bf       	out	0x3d, r24	; 61
     b96:	c4 30       	cpi	r28, 0x04	; 4
     b98:	d1 05       	cpc	r29, r1
     b9a:	e1 f6       	brne	.-72     	; 0xb54 <print_adc_values+0x10c>
	#endif
	
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	08 95       	ret

00000bae <usart0_putchar_direct>:
#include <util/delay.h>
#include <avr/pgmspace.h>
#include <stdlib.h>


void clock_init(void) {
     bae:	1f 93       	push	r17
     bb0:	18 2f       	mov	r17, r24
	
     bb2:	8a 30       	cpi	r24, 0x0A	; 10
     bb4:	19 f4       	brne	.+6      	; 0xbbc <usart0_putchar_direct+0xe>
	#if   F_CPU == 1000000
     bb6:	8d e0       	ldi	r24, 0x0D	; 13
     bb8:	0e 94 d7 05 	call	0xbae	; 0xbae <usart0_putchar_direct>
		clock_prescale_set(clock_div_8);	
     bbc:	80 91 c0 00 	lds	r24, 0x00C0
     bc0:	85 ff       	sbrs	r24, 5
     bc2:	fc cf       	rjmp	.-8      	; 0xbbc <usart0_putchar_direct+0xe>
	#elif F_CPU == 2000000
     bc4:	10 93 c6 00 	sts	0x00C6, r17
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	1f 91       	pop	r17
     bce:	08 95       	ret

00000bd0 <usart0_putchar>:
				uint8_t nexti, nextv;
				if (maxi>0)
					nexti=maxi-1;
				else if (maxi<0)
					nexti=maxi+1;
				
     bd0:	1f 93       	push	r17
     bd2:	18 2f       	mov	r17, r24
				//Hack for lack of zero sensor on even sensored bots.
     bd4:	8a 30       	cpi	r24, 0x0A	; 10
     bd6:	19 f4       	brne	.+6      	; 0xbde <usart0_putchar+0xe>
				#if (!(channel_amt%2))
     bd8:	8d e0       	ldi	r24, 0x0D	; 13
     bda:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
				if (nexti==0) {
					if (maxi<0)
						++nexti;
     bde:	80 91 c0 00 	lds	r24, 0x00C0
     be2:	85 ff       	sbrs	r24, 5
     be4:	fc cf       	rjmp	.-8      	; 0xbde <usart0_putchar+0xe>
					else // maxi>0
     be6:	10 93 c6 00 	sts	0x00C6, r17

				nextv=adc_vc[nexti];
				
				//TODO: Use next[vi], max[vi] to find a turn increment.
				lf_turn_inc(maxv-nextv,maxi>=0);				
	
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	1f 91       	pop	r17
     bf0:	08 95       	ret

00000bf2 <usart0_getchar>:
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	7c 01       	movw	r14, r24
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}

     c00:	80 91 46 01 	lds	r24, 0x0146
     c04:	90 91 47 01 	lds	r25, 0x0147
     c08:	89 2b       	or	r24, r25
     c0a:	09 f0       	breq	.+2      	; 0xc0e <usart0_getchar+0x1c>
     c0c:	a0 c0       	rjmp	.+320    	; 0xd4e <usart0_getchar+0x15c>
     c0e:	08 e4       	ldi	r16, 0x48	; 72
     c10:	11 e0       	ldi	r17, 0x01	; 1
void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     c12:	80 91 c0 00 	lds	r24, 0x00C0
     c16:	87 ff       	sbrs	r24, 7
     c18:	fc cf       	rjmp	.-8      	; 0xc12 <usart0_getchar+0x20>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     c1a:	80 91 c0 00 	lds	r24, 0x00C0
     c1e:	84 ff       	sbrs	r24, 4
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <usart0_getchar+0x36>
     c22:	2e ef       	ldi	r18, 0xFE	; 254
     c24:	3f ef       	ldi	r19, 0xFF	; 255
     c26:	a7 c0       	rjmp	.+334    	; 0xd76 <usart0_getchar+0x184>
	}
     c28:	80 91 c0 00 	lds	r24, 0x00C0
     c2c:	83 fd       	sbrc	r24, 3
     c2e:	a1 c0       	rjmp	.+322    	; 0xd72 <usart0_getchar+0x180>
}
     c30:	90 91 c6 00 	lds	r25, 0x00C6

void init(void) {
     c34:	9d 30       	cpi	r25, 0x0D	; 13
     c36:	11 f0       	breq	.+4      	; 0xc3c <usart0_getchar+0x4a>
	cli(); // Starts with interrupts disabled?
     c38:	9a 30       	cpi	r25, 0x0A	; 10
     c3a:	69 f4       	brne	.+26     	; 0xc56 <usart0_getchar+0x64>
	power_all_disable();
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
     c3e:	f8 01       	movw	r30, r16
     c40:	80 83       	st	Z, r24
	PCMSK1=PCMSK0=EIMSK=0; // Butterfly doesn't remove it's interupts, block them.
     c42:	b7 01       	movw	r22, r14
     c44:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
	clock_init();
     c48:	88 e4       	ldi	r24, 0x48	; 72
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	90 93 47 01 	sts	0x0147, r25
     c50:	80 93 46 01 	sts	0x0146, r24
     c54:	7c c0       	rjmp	.+248    	; 0xd4e <usart0_getchar+0x15c>
	joy_init();
	usart_init();
	adc_init();
	timers_init();
     c56:	99 30       	cpi	r25, 0x09	; 9
     c58:	09 f4       	brne	.+2      	; 0xc5c <usart0_getchar+0x6a>
     c5a:	90 e2       	ldi	r25, 0x20	; 32
	motors_init();
	sei();
     c5c:	89 2f       	mov	r24, r25
     c5e:	80 52       	subi	r24, 0x20	; 32
     c60:	8f 35       	cpi	r24, 0x5F	; 95
     c62:	10 f0       	brcs	.+4      	; 0xc68 <usart0_getchar+0x76>
     c64:	90 3a       	cpi	r25, 0xA0	; 160
     c66:	78 f0       	brcs	.+30     	; 0xc86 <usart0_getchar+0x94>
	#ifdef debug
     c68:	f1 e0       	ldi	r31, 0x01	; 1
     c6a:	06 3c       	cpi	r16, 0xC6	; 198
     c6c:	1f 07       	cpc	r17, r31
     c6e:	19 f4       	brne	.+6      	; 0xc76 <usart0_getchar+0x84>
	printf_P(PSTR("\nInit: Done\n\n"));
     c70:	b7 01       	movw	r22, r14
     c72:	87 e0       	ldi	r24, 0x07	; 7
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <usart0_getchar+0x8e>
	#endif
}
     c76:	f8 01       	movw	r30, r16
     c78:	91 93       	st	Z+, r25
     c7a:	8f 01       	movw	r16, r30

     c7c:	b7 01       	movw	r22, r14
     c7e:	89 2f       	mov	r24, r25
     c80:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
     c84:	c6 cf       	rjmp	.-116    	; 0xc12 <usart0_getchar+0x20>


int main(void) {
	init();
	c_mode=WAIT;
     c86:	92 31       	cpi	r25, 0x12	; 18
     c88:	39 f1       	breq	.+78     	; 0xcd8 <usart0_getchar+0xe6>
     c8a:	93 31       	cpi	r25, 0x13	; 19
     c8c:	38 f4       	brcc	.+14     	; 0xc9c <usart0_getchar+0xaa>
     c8e:	93 30       	cpi	r25, 0x03	; 3
     c90:	09 f4       	brne	.+2      	; 0xc94 <usart0_getchar+0xa2>
     c92:	6f c0       	rjmp	.+222    	; 0xd72 <usart0_getchar+0x180>
     c94:	98 30       	cpi	r25, 0x08	; 8
     c96:	09 f0       	breq	.+2      	; 0xc9a <usart0_getchar+0xa8>
     c98:	bc cf       	rjmp	.-136    	; 0xc12 <usart0_getchar+0x20>
     c9a:	09 c0       	rjmp	.+18     	; 0xcae <usart0_getchar+0xbc>
     c9c:	97 31       	cpi	r25, 0x17	; 23
     c9e:	09 f4       	brne	.+2      	; 0xca2 <usart0_getchar+0xb0>
     ca0:	4b c0       	rjmp	.+150    	; 0xd38 <usart0_getchar+0x146>
     ca2:	9f 37       	cpi	r25, 0x7F	; 127
     ca4:	21 f0       	breq	.+8      	; 0xcae <usart0_getchar+0xbc>
     ca6:	95 31       	cpi	r25, 0x15	; 21
     ca8:	09 f0       	breq	.+2      	; 0xcac <usart0_getchar+0xba>
     caa:	b3 cf       	rjmp	.-154    	; 0xc12 <usart0_getchar+0x20>
     cac:	32 c0       	rjmp	.+100    	; 0xd12 <usart0_getchar+0x120>
	initial=true;
		
	for(;;) {
		if	(c_mode==FOLLOW && new_adc_data) {
			if (new_adc_data) {
				new_adc_data=false;
     cae:	f1 e0       	ldi	r31, 0x01	; 1
     cb0:	08 34       	cpi	r16, 0x48	; 72
     cb2:	1f 07       	cpc	r17, r31
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <usart0_getchar+0xc6>
     cb6:	08 f4       	brcc	.+2      	; 0xcba <usart0_getchar+0xc8>
     cb8:	ac cf       	rjmp	.-168    	; 0xc12 <usart0_getchar+0x20>
				if (initial) {
     cba:	b7 01       	movw	r22, r14
     cbc:	88 e0       	ldi	r24, 0x08	; 8
     cbe:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
					lf_full_speed();
     cc2:	b7 01       	movw	r22, r14
     cc4:	80 e2       	ldi	r24, 0x20	; 32
     cc6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
					initial=false;
     cca:	b7 01       	movw	r22, r14
     ccc:	88 e0       	ldi	r24, 0x08	; 8
     cce:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
				}
     cd2:	01 50       	subi	r16, 0x01	; 1
     cd4:	10 40       	sbci	r17, 0x00	; 0
     cd6:	9d cf       	rjmp	.-198    	; 0xc12 <usart0_getchar+0x20>
				
				// gen copy of fixed adc inputs.
				uint16_t adc_vc[channel_amt];
				for (uint8_t i=0;i<channel_amt;++i) {
					adc_vc[i]=adc_get_val(i);
     cd8:	b7 01       	movw	r22, r14
     cda:	8d e0       	ldi	r24, 0x0D	; 13
     cdc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
     ce0:	c8 e4       	ldi	r28, 0x48	; 72
     ce2:	d1 e0       	ldi	r29, 0x01	; 1
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <usart0_getchar+0xfc>
				}
		
     ce6:	b7 01       	movw	r22, r14
     ce8:	89 91       	ld	r24, Y+
     cea:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
				
				// gen copy of fixed adc inputs.
				uint16_t adc_vc[channel_amt];
				for (uint8_t i=0;i<channel_amt;++i) {
					adc_vc[i]=adc_get_val(i);
				}
     cee:	c0 17       	cp	r28, r16
     cf0:	d1 07       	cpc	r29, r17
     cf2:	c8 f3       	brcs	.-14     	; 0xce6 <usart0_getchar+0xf4>
     cf4:	8e cf       	rjmp	.-228    	; 0xc12 <usart0_getchar+0x20>
		
				uint8_t  maxi=channel_amt;
				uint16_t maxv=0;
				for (uint8_t i=0;i<channel_amt;++i) {
					if (adc_vc[i]>maxv) {
						maxi=i;
     cf6:	b7 01       	movw	r22, r14
     cf8:	88 e0       	ldi	r24, 0x08	; 8
     cfa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
						maxv=adc_vc[i];
     cfe:	b7 01       	movw	r22, r14
     d00:	80 e2       	ldi	r24, 0x20	; 32
     d02:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
					}
     d06:	b7 01       	movw	r22, r14
     d08:	88 e0       	ldi	r24, 0x08	; 8
     d0a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
				}
     d0e:	01 50       	subi	r16, 0x01	; 1
     d10:	10 40       	sbci	r17, 0x00	; 0
				}
		
				uint8_t  maxi=channel_amt;
				uint16_t maxv=0;
				for (uint8_t i=0;i<channel_amt;++i) {
					if (adc_vc[i]>maxv) {
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	08 34       	cpi	r16, 0x48	; 72
     d16:	18 07       	cpc	r17, r24
     d18:	09 f0       	breq	.+2      	; 0xd1c <usart0_getchar+0x12a>
     d1a:	68 f7       	brcc	.-38     	; 0xcf6 <usart0_getchar+0x104>
     d1c:	7a cf       	rjmp	.-268    	; 0xc12 <usart0_getchar+0x20>
			
				#ifdef debug
				print_adc_values();
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
				#endif

     d1e:	b7 01       	movw	r22, r14
     d20:	88 e0       	ldi	r24, 0x08	; 8
     d22:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
				int8_t turn_i;			
     d26:	b7 01       	movw	r22, r14
     d28:	80 e2       	ldi	r24, 0x20	; 32
     d2a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
				turn_i = maxi-channel_amt/2; 
     d2e:	b7 01       	movw	r22, r14
     d30:	88 e0       	ldi	r24, 0x08	; 8
     d32:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <usart0_putchar>
     d36:	8e 01       	movw	r16, r28
				}
			
				#ifdef debug
				print_adc_values();
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
				#endif
     d38:	e1 e0       	ldi	r30, 0x01	; 1
     d3a:	08 34       	cpi	r16, 0x48	; 72
     d3c:	1e 07       	cpc	r17, r30
     d3e:	09 f0       	breq	.+2      	; 0xd42 <usart0_getchar+0x150>
     d40:	08 f4       	brcc	.+2      	; 0xd44 <usart0_getchar+0x152>
     d42:	67 cf       	rjmp	.-306    	; 0xc12 <usart0_getchar+0x20>
     d44:	e8 01       	movw	r28, r16
     d46:	8a 91       	ld	r24, -Y
     d48:	80 32       	cpi	r24, 0x20	; 32
     d4a:	49 f7       	brne	.-46     	; 0xd1e <usart0_getchar+0x12c>
     d4c:	62 cf       	rjmp	.-316    	; 0xc12 <usart0_getchar+0x20>
				#if (!(channel_amt%2))
				if (turn_i>0)
					++turn_i;	
				#endif

				//Find Sensor "next to" max sensor.
     d4e:	e0 91 46 01 	lds	r30, 0x0146
     d52:	f0 91 47 01 	lds	r31, 0x0147
     d56:	81 91       	ld	r24, Z+
     d58:	f0 93 47 01 	sts	0x0147, r31
     d5c:	e0 93 46 01 	sts	0x0146, r30
				uint8_t nexti, nextv;
     d60:	8a 30       	cpi	r24, 0x0A	; 10
     d62:	21 f4       	brne	.+8      	; 0xd6c <usart0_getchar+0x17a>
     d64:	10 92 47 01 	sts	0x0147, r1
     d68:	10 92 46 01 	sts	0x0146, r1
				if (maxi>0)
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	02 c0       	rjmp	.+4      	; 0xd76 <usart0_getchar+0x184>
     d72:	2f ef       	ldi	r18, 0xFF	; 255
     d74:	3f ef       	ldi	r19, 0xFF	; 255
					nexti=maxi-1;
     d76:	c9 01       	movw	r24, r18
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	08 95       	ret

00000d86 <usart0_init>:
					dir=RIGHT;
				}
				else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
					//lf_full_speed();
					dir=FWD;
				}
     d86:	e4 e6       	ldi	r30, 0x64	; 100
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8d 7f       	andi	r24, 0xFD	; 253
     d8e:	80 83       	st	Z, r24
				else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
					//lf_full_speed();
					dir=FWD;
				}
				*/
     d90:	89 e1       	ldi	r24, 0x19	; 25
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	90 93 c5 00 	sts	0x00C5, r25
     d98:	80 93 c4 00 	sts	0x00C4, r24
			
		
			}
			else { // if !new_adc_data
     d9c:	e0 ec       	ldi	r30, 0xC0	; 192
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	8d 7f       	andi	r24, 0xFD	; 253
     da4:	80 83       	st	Z, r24
				// Sleep? (need adc, timers, pwm outputs (IO clock), 
			}
		}
		else if	(c_mode==TEST) {
			if (initial) {
     da6:	88 e1       	ldi	r24, 0x18	; 24
     da8:	80 93 c1 00 	sts	0x00C1, r24
				motor_mode(MOTOR_L_FWD,LEFT);
				motor_mode(MOTOR_R_FWD,RIGHT);
				initial=false;
			}
			static uint16_t sp;
     dac:	86 e0       	ldi	r24, 0x06	; 6
     dae:	80 93 c2 00 	sts	0x00C2, r24
			
			motor_set_speed(sp,LEFT);
			motor_set_speed(sp,RIGHT);
     db2:	82 e1       	ldi	r24, 0x12	; 18
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	90 93 e9 01 	sts	0x01E9, r25
     dba:	80 93 e8 01 	sts	0x01E8, r24
     dbe:	90 93 eb 01 	sts	0x01EB, r25
     dc2:	80 93 ea 01 	sts	0x01EA, r24
			_delay_ms(2);
     dc6:	20 e2       	ldi	r18, 0x20	; 32
     dc8:	31 e0       	ldi	r19, 0x01	; 1
     dca:	30 93 ed 01 	sts	0x01ED, r19
     dce:	20 93 ec 01 	sts	0x01EC, r18
			//if (!(sp%0x100))
     dd2:	89 e8       	ldi	r24, 0x89	; 137
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	9f 93       	push	r25
     dd8:	8f 93       	push	r24
     dda:	3f 93       	push	r19
     ddc:	2f 93       	push	r18
     dde:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
			//	printf("\nsp=%x",sp);
     dea:	08 95       	ret

00000dec <usart_init>:
			++sp;
		}
	}	
     dec:	0e 94 c3 06 	call	0xd86	; 0xd86 <usart0_init>
} 
     df0:	08 95       	ret

00000df2 <__vector_9>:
				*/
			
		
			}
			else { // if !new_adc_data
				// Sleep? (need adc, timers, pwm outputs (IO clock), 
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	8f 93       	push	r24
			}
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	80 93 c9 01 	sts	0x01C9, r24
		}
     e04:	8f 91       	pop	r24
     e06:	0f 90       	pop	r0
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	0f 90       	pop	r0
     e0c:	1f 90       	pop	r1
     e0e:	18 95       	reti

00000e10 <__vector_6>:
		else if	(c_mode==TEST) {
			if (initial) {
				motor_mode(MOTOR_L_FWD,LEFT);
     e10:	1f 92       	push	r1
     e12:	0f 92       	push	r0
     e14:	0f b6       	in	r0, 0x3f	; 63
     e16:	0f 92       	push	r0
     e18:	11 24       	eor	r1, r1
				motor_mode(MOTOR_R_FWD,RIGHT);
     e1a:	10 92 c9 01 	sts	0x01C9, r1
				initial=false;
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_7>:
			//	printf("\nsp=%x",sp);
			++sp;
		}
	}	
} 
		
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	8f 93       	push	r24
ISR(BADISR_vect) {
     e34:	80 91 c9 01 	lds	r24, 0x01C9
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	11 f4       	brne	.+4      	; 0xe40 <__vector_7+0x18>
	fprintf_P(stderr,PSTR("\n\nInvalid Interupt Enabled\n"));
     e3c:	2a 98       	cbi	0x05, 2	; 5
     e3e:	01 c0       	rjmp	.+2      	; 0xe42 <__vector_7+0x1a>
}

     e40:	2a 9a       	sbi	0x05, 2	; 5
     e42:	8f 91       	pop	r24
     e44:	0f 90       	pop	r0
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	0f 90       	pop	r0
     e4a:	1f 90       	pop	r1
     e4c:	18 95       	reti

00000e4e <__vector_8>:
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	8f 93       	push	r24
     e5a:	80 91 c9 01 	lds	r24, 0x01C9
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	11 f4       	brne	.+4      	; 0xe66 <__vector_8+0x18>
     e62:	2b 98       	cbi	0x05, 3	; 5
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <__vector_8+0x1a>
     e66:	2b 9a       	sbi	0x05, 3	; 5
     e68:	8f 91       	pop	r24
     e6a:	0f 90       	pop	r0
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	0f 90       	pop	r0
     e70:	1f 90       	pop	r1
     e72:	18 95       	reti

00000e74 <timer1_init>:
				uint8_t nexti, nextv;
				if (maxi>0)
					nexti=maxi-1;
				else if (maxi<0)
					nexti=maxi+1;
				
     e74:	88 ed       	ldi	r24, 0xD8	; 216
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	9f 93       	push	r25
     e7a:	8f 93       	push	r24
     e7c:	80 91 ec 01 	lds	r24, 0x01EC
     e80:	90 91 ed 01 	lds	r25, 0x01ED
     e84:	9f 93       	push	r25
     e86:	8f 93       	push	r24
     e88:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
				//Hack for lack of zero sensor on even sensored bots.
				#if (!(channel_amt%2))
     e8c:	e4 e6       	ldi	r30, 0x64	; 100
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 83       	st	Z, r24
				if (nexti==0) {
					if (maxi<0)
						++nexti;
					else // maxi>0
						--nexti;
				}
     e96:	e0 e8       	ldi	r30, 0x80	; 128
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	8f 70       	andi	r24, 0x0F	; 15
     e9e:	80 83       	st	Z, r24
				#endif	

				nextv=adc_vc[nexti];
				
				//TODO: Use next[vi], max[vi] to find a turn increment.
				lf_turn_inc(maxv-nextv,maxi>=0);				
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	80 83       	st	Z, r24
	
     ea6:	80 81       	ld	r24, Z
     ea8:	8d 7f       	andi	r24, 0xFD	; 253
     eaa:	80 83       	st	Z, r24
				//lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);

     eac:	e1 e8       	ldi	r30, 0x81	; 129
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	80 83       	st	Z, r24

     eb6:	80 81       	ld	r24, Z
     eb8:	80 61       	ori	r24, 0x10	; 16
     eba:	80 83       	st	Z, r24
				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
     ebc:	80 81       	ld	r24, Z
     ebe:	87 7f       	andi	r24, 0xF7	; 247
     ec0:	80 83       	st	Z, r24
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
							motor_get_speed(RIGHT)};
     ec2:	80 81       	ld	r24, Z
     ec4:	8f 77       	andi	r24, 0x7F	; 127
     ec6:	80 83       	st	Z, r24
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
				//0=LEFT, 3=RIGHT
				/*
     ec8:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     eca:	f8 94       	cli
				if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
     ecc:	8f ef       	ldi	r24, 0xFF	; 255
     ece:	9f ef       	ldi	r25, 0xFF	; 255
     ed0:	90 93 87 00 	sts	0x0087, r25
     ed4:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ed8:	2f bf       	out	0x3f, r18	; 63
					dir=RIGHT;
				}
				else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
					lf_turn_inc(LF_INC_SMALL,NEG);
					dir=LEFT;
				}
     eda:	e1 e8       	ldi	r30, 0x81	; 129
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	89 7f       	andi	r24, 0xF9	; 249
     ee2:	80 83       	st	Z, r24
				else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
     ee4:	80 81       	ld	r24, Z
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	80 83       	st	Z, r24
					lf_turn_inc(LF_INC_LARGE,POS);
					dir=RIGHT;
				}
				else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
					//lf_full_speed();
					dir=FWD;
     eea:	ef e6       	ldi	r30, 0x6F	; 111
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	87 60       	ori	r24, 0x07	; 7
     ef2:	80 83       	st	Z, r24
				}
				else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     ef4:	84 b1       	in	r24, 0x04	; 4
     ef6:	8c 60       	ori	r24, 0x0C	; 12
     ef8:	84 b9       	out	0x04, r24	; 4
					//lf_full_speed();
					dir=FWD;
     efa:	80 ed       	ldi	r24, 0xD0	; 208
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	9f 93       	push	r25
     f00:	8f 93       	push	r24
     f02:	80 91 ec 01 	lds	r24, 0x01EC
     f06:	90 91 ed 01 	lds	r25, 0x01ED
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
     f12:	8d b7       	in	r24, 0x3d	; 61
     f14:	9e b7       	in	r25, 0x3e	; 62
     f16:	08 96       	adiw	r24, 0x08	; 8
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	9e bf       	out	0x3e, r25	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	8d bf       	out	0x3d, r24	; 61
				}
				*/
     f22:	08 95       	ret

00000f24 <__vector_5>:
				#ifdef debug
				print_adc_values();
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
				#endif

				int8_t turn_i;			
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
				turn_i = maxi-channel_amt/2; 
				// Correction needed for even numbers of sensors.
     f32:	80 91 c7 01 	lds	r24, 0x01C7
     f36:	90 91 c8 01 	lds	r25, 0x01C8
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	90 93 c8 01 	sts	0x01C8, r25
     f40:	80 93 c7 01 	sts	0x01C7, r24
				#if (!(channel_amt%2))
     f44:	80 91 d4 01 	lds	r24, 0x01D4
     f48:	88 23       	and	r24, r24
     f4a:	c9 f4       	brne	.+50     	; 0xf7e <__vector_5+0x5a>
				if (turn_i>0)
					++turn_i;	
				#endif
     f4c:	80 91 d4 01 	lds	r24, 0x01D4
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	9f 93       	push	r25
     f54:	8f 93       	push	r24
     f56:	8e ee       	ldi	r24, 0xEE	; 238
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	9f 93       	push	r25
     f5c:	8f 93       	push	r24
     f5e:	80 91 ec 01 	lds	r24, 0x01EC
     f62:	90 91 ed 01 	lds	r25, 0x01ED
     f66:	9f 93       	push	r25
     f68:	8f 93       	push	r24
     f6a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
     f6e:	8d b7       	in	r24, 0x3d	; 61
     f70:	9e b7       	in	r25, 0x3e	; 62
     f72:	06 96       	adiw	r24, 0x06	; 6
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	9e bf       	out	0x3e, r25	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	8d bf       	out	0x3d, r24	; 61

				//Find Sensor "next to" max sensor.
				uint8_t nexti, nextv;
				if (maxi>0)
     f7e:	9f 91       	pop	r25
     f80:	8f 91       	pop	r24
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <timer2_init>:
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	80 91 ec 01 	lds	r24, 0x01EC
     f98:	90 91 ed 01 	lds	r25, 0x01ED
     f9c:	9f 93       	push	r25
     f9e:	8f 93       	push	r24
     fa0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
     fa4:	80 91 70 00 	lds	r24, 0x0070
     fa8:	8c 7f       	andi	r24, 0xFC	; 252
     faa:	80 93 70 00 	sts	0x0070, r24
	#endif
	
	//OSCAL set by the bootloader.
     fae:	80 91 b6 00 	lds	r24, 0x00B6
     fb2:	8f 7e       	andi	r24, 0xEF	; 239
     fb4:	80 93 b6 00 	sts	0x00B6, r24
}
     fb8:	80 91 b6 00 	lds	r24, 0x00B6
     fbc:	88 60       	ori	r24, 0x08	; 8
     fbe:	80 93 b6 00 	sts	0x00B6, r24

void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     fc2:	10 92 b2 00 	sts	0x00B2, r1
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
     fc6:	80 91 b0 00 	lds	r24, 0x00B0
     fca:	8f 77       	andi	r24, 0x7F	; 127
     fcc:	80 93 b0 00 	sts	0x00B0, r24
	clock_init();
	joy_init();
	usart_init();
	adc_init();
	timers_init();
	motors_init();
     fd0:	80 91 b0 00 	lds	r24, 0x00B0
     fd4:	87 7b       	andi	r24, 0xB7	; 183
     fd6:	80 93 b0 00 	sts	0x00B0, r24
}



int main(void) {
	init();
     fda:	80 91 b0 00 	lds	r24, 0x00B0
     fde:	8f 7c       	andi	r24, 0xCF	; 207
     fe0:	80 93 b0 00 	sts	0x00B0, r24
				if (initial) {
					lf_full_speed();
					initial=false;
				}
				
				// gen copy of fixed adc inputs.
     fe4:	80 91 b0 00 	lds	r24, 0x00B0
     fe8:	85 60       	ori	r24, 0x05	; 5
     fea:	80 93 b0 00 	sts	0x00B0, r24
				uint16_t adc_vc[channel_amt];
     fee:	80 91 b0 00 	lds	r24, 0x00B0
     ff2:	8d 7f       	andi	r24, 0xFD	; 253
     ff4:	80 93 b0 00 	sts	0x00B0, r24
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
				for (uint8_t i=0;i<channel_amt;++i) {
					adc_vc[i]=adc_get_val(i);
				}
		
				uint8_t  maxi=channel_amt;
    1000:	80 91 b6 00 	lds	r24, 0x00B6
    1004:	82 fd       	sbrc	r24, 2
    1006:	fc cf       	rjmp	.-8      	; 0x1000 <timer2_init+0x74>
				uint16_t maxv=0;
    1008:	80 91 b6 00 	lds	r24, 0x00B6
    100c:	81 fd       	sbrc	r24, 1
    100e:	fc cf       	rjmp	.-8      	; 0x1008 <timer2_init+0x7c>
				for (uint8_t i=0;i<channel_amt;++i) {
    1010:	80 91 b6 00 	lds	r24, 0x00B6
    1014:	80 fd       	sbrc	r24, 0
    1016:	fc cf       	rjmp	.-8      	; 0x1010 <timer2_init+0x84>
					if (adc_vc[i]>maxv) {
						maxi=i;
						maxv=adc_vc[i];
					}
				}
			
    1018:	88 ef       	ldi	r24, 0xF8	; 248
    101a:	91 e0       	ldi	r25, 0x01	; 1
    101c:	9f 93       	push	r25
    101e:	8f 93       	push	r24
    1020:	80 91 ec 01 	lds	r24, 0x01EC
    1024:	90 91 ed 01 	lds	r25, 0x01ED
    1028:	9f 93       	push	r25
    102a:	8f 93       	push	r24
    102c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
				#ifdef debug
				print_adc_values();
    1038:	08 95       	ret

0000103a <timers_init>:
    103a:	8a eb       	ldi	r24, 0xBA	; 186
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	9f 93       	push	r25
    1040:	8f 93       	push	r24
    1042:	80 91 ec 01 	lds	r24, 0x01EC
    1046:	90 91 ed 01 	lds	r25, 0x01ED
    104a:	9f 93       	push	r25
    104c:	8f 93       	push	r24
    104e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
    1052:	0e 94 3a 07 	call	0xe74	; 0xe74 <timer1_init>
    1056:	0e 94 c6 07 	call	0xf8c	; 0xf8c <timer2_init>
    105a:	84 ea       	ldi	r24, 0xA4	; 164
    105c:	91 e0       	ldi	r25, 0x01	; 1
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	80 91 ec 01 	lds	r24, 0x01EC
    1066:	90 91 ed 01 	lds	r25, 0x01ED
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
    1072:	8d b7       	in	r24, 0x3d	; 61
    1074:	9e b7       	in	r25, 0x3e	; 62
    1076:	08 96       	adiw	r24, 0x08	; 8
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	9e bf       	out	0x3e, r25	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	8d bf       	out	0x3d, r24	; 61
    1082:	08 95       	ret

00001084 <inc_limit>:
			
				#ifdef debug
				print_adc_values();
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
				#endif

    1084:	fc 01       	movw	r30, r24
				int8_t turn_i;			
    1086:	20 81       	ld	r18, Z
    1088:	31 81       	ldd	r19, Z+1	; 0x01
    108a:	42 1b       	sub	r20, r18
    108c:	53 0b       	sbc	r21, r19
				turn_i = maxi-channel_amt/2; 
    108e:	46 17       	cp	r20, r22
    1090:	57 07       	cpc	r21, r23
    1092:	48 f4       	brcc	.+18     	; 0x10a6 <inc_limit+0x22>
				// Correction needed for even numbers of sensors.
    1094:	24 0f       	add	r18, r20
    1096:	35 1f       	adc	r19, r21
    1098:	31 83       	std	Z+1, r19	; 0x01
    109a:	20 83       	st	Z, r18
				#if (!(channel_amt%2))
				if (turn_i>0)
    109c:	cb 01       	movw	r24, r22
    109e:	84 1b       	sub	r24, r20
    10a0:	95 0b       	sbc	r25, r21
    10a2:	ac 01       	movw	r20, r24
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <inc_limit+0x2e>
					++turn_i;	
				#endif

    10a6:	26 0f       	add	r18, r22
    10a8:	37 1f       	adc	r19, r23
    10aa:	31 83       	std	Z+1, r19	; 0x01
    10ac:	20 83       	st	Z, r18
    10ae:	40 e0       	ldi	r20, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
				//Find Sensor "next to" max sensor.
				uint8_t nexti, nextv;
				if (maxi>0)
    10b2:	ca 01       	movw	r24, r20
    10b4:	08 95       	ret

000010b6 <dec_limit>:
					nexti=maxi-1;
				else if (maxi<0)
    10b6:	fc 01       	movw	r30, r24
    10b8:	cb 01       	movw	r24, r22
					nexti=maxi+1;
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	b9 01       	movw	r22, r18
    10c0:	64 1b       	sub	r22, r20
    10c2:	75 0b       	sbc	r23, r21
				
    10c4:	68 17       	cp	r22, r24
    10c6:	79 07       	cpc	r23, r25
    10c8:	48 f4       	brcc	.+18     	; 0x10dc <dec_limit+0x26>
				//Hack for lack of zero sensor on even sensored bots.
    10ca:	26 1b       	sub	r18, r22
    10cc:	37 0b       	sbc	r19, r23
    10ce:	31 83       	std	Z+1, r19	; 0x01
    10d0:	20 83       	st	Z, r18
				#if (!(channel_amt%2))
    10d2:	9c 01       	movw	r18, r24
    10d4:	26 1b       	sub	r18, r22
    10d6:	37 0b       	sbc	r19, r23
    10d8:	b9 01       	movw	r22, r18
    10da:	06 c0       	rjmp	.+12     	; 0x10e8 <dec_limit+0x32>
				if (nexti==0) {
					if (maxi<0)
						++nexti;
    10dc:	28 1b       	sub	r18, r24
    10de:	39 0b       	sbc	r19, r25
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	20 83       	st	Z, r18
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
					else // maxi>0
						--nexti;
				}
    10e8:	cb 01       	movw	r24, r22
    10ea:	08 95       	ret

000010ec <motor_set_speed>:
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
	#endif
    10ec:	66 23       	and	r22, r22
    10ee:	31 f4       	brne	.+12     	; 0x10fc <motor_set_speed+0x10>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    10f0:	f8 94       	cli
	
	//OSCAL set by the bootloader.
    10f2:	90 93 89 00 	sts	0x0089, r25
    10f6:	80 93 88 00 	sts	0x0088, r24
    10fa:	07 c0       	rjmp	.+14     	; 0x110a <motor_set_speed+0x1e>
}

    10fc:	61 30       	cpi	r22, 0x01	; 1
    10fe:	39 f4       	brne	.+14     	; 0x110e <motor_set_speed+0x22>
    1100:	f8 94       	cli
void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
    1102:	90 93 8b 00 	sts	0x008B, r25
    1106:	80 93 8a 00 	sts	0x008A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    110a:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    110c:	08 95       	ret
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}
    110e:	8b e2       	ldi	r24, 0x2B	; 43
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9f 93       	push	r25
    1114:	8f 93       	push	r24
    1116:	86 2f       	mov	r24, r22
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9f 93       	push	r25
    111c:	8f 93       	push	r24
    111e:	84 e4       	ldi	r24, 0x44	; 68
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	0e 94 07 0b 	call	0x160e	; 0x160e <printf_P>
    112a:	8d b7       	in	r24, 0x3d	; 61
    112c:	9e b7       	in	r25, 0x3e	; 62
    112e:	06 96       	adiw	r24, 0x06	; 6
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	9e bf       	out	0x3e, r25	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	8d bf       	out	0x3d, r24	; 61
    113a:	08 95       	ret

0000113c <motor_get_speed>:
#include "timers.h"
#include "joystick.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
    113c:	28 2f       	mov	r18, r24
#include <util/delay.h>
#include <avr/pgmspace.h>
    113e:	88 23       	and	r24, r24
    1140:	31 f4       	brne	.+12     	; 0x114e <motor_get_speed+0x12>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1142:	f8 94       	cli
#include <stdlib.h>

    1144:	20 91 88 00 	lds	r18, 0x0088
    1148:	30 91 89 00 	lds	r19, 0x0089
    114c:	07 c0       	rjmp	.+14     	; 0x115c <motor_get_speed+0x20>

void clock_init(void) {
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	39 f4       	brne	.+14     	; 0x1160 <motor_get_speed+0x24>
    1152:	f8 94       	cli
	
	#if   F_CPU == 1000000
    1154:	20 91 8a 00 	lds	r18, 0x008A
    1158:	30 91 8b 00 	lds	r19, 0x008B
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
    115c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    115e:	18 c0       	rjmp	.+48     	; 0x1190 <motor_get_speed+0x54>
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
    1160:	8b e1       	ldi	r24, 0x1B	; 27
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9f 93       	push	r25
    1166:	8f 93       	push	r24
    1168:	82 2f       	mov	r24, r18
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9f 93       	push	r25
    116e:	8f 93       	push	r24
    1170:	82 e7       	ldi	r24, 0x72	; 114
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	9f 93       	push	r25
    1176:	8f 93       	push	r24
    1178:	0e 94 07 0b 	call	0x160e	; 0x160e <printf_P>
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8d b7       	in	r24, 0x3d	; 61
    1182:	9e b7       	in	r25, 0x3e	; 62
    1184:	06 96       	adiw	r24, 0x06	; 6
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	9e bf       	out	0x3e, r25	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	8d bf       	out	0x3d, r24	; 61
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
    1190:	c9 01       	movw	r24, r18
    1192:	08 95       	ret

00001194 <lf_turn_inc>:
						++nexti;
					else // maxi>0
						--nexti;
				}
				#endif	

    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	7c 01       	movw	r14, r24
    11a4:	d6 2e       	mov	r13, r22
				nextv=adc_vc[nexti];
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	0e 94 9e 08 	call	0x113c	; 0x113c <motor_get_speed>
    11ac:	8c 01       	movw	r16, r24
				
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 9e 08 	call	0x113c	; 0x113c <motor_get_speed>
    11b4:	ec 01       	movw	r28, r24
				//TODO: Use next[vi], max[vi] to find a turn increment.
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	d8 16       	cp	r13, r24
    11ba:	e9 f4       	brne	.+58     	; 0x11f6 <lf_turn_inc+0x62>
				#ifdef debug
				print_adc_values();
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
				#endif

				int8_t turn_i;			
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 ec       	ldi	r25, 0xC0	; 192
    11c0:	8c 1b       	sub	r24, r28
    11c2:	9d 0b       	sbc	r25, r29
				turn_i = maxi-channel_amt/2; 
    11c4:	8e 15       	cp	r24, r14
    11c6:	9f 05       	cpc	r25, r15
    11c8:	30 f4       	brcc	.+12     	; 0x11d6 <lf_turn_inc+0x42>
				// Correction needed for even numbers of sensors.
				#if (!(channel_amt%2))
				if (turn_i>0)
    11ca:	97 01       	movw	r18, r14
    11cc:	28 1b       	sub	r18, r24
    11ce:	39 0b       	sbc	r19, r25
    11d0:	c0 e0       	ldi	r28, 0x00	; 0
    11d2:	d0 ec       	ldi	r29, 0xC0	; 192
    11d4:	04 c0       	rjmp	.+8      	; 0x11de <lf_turn_inc+0x4a>
					++turn_i;	
				#endif

    11d6:	ce 0d       	add	r28, r14
    11d8:	df 1d       	adc	r29, r15
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
				uint8_t nexti, nextv;
				if (maxi>0)
					nexti=maxi-1;
				else if (maxi<0)
					nexti=maxi+1;
				
    11de:	c8 01       	movw	r24, r16
    11e0:	80 50       	subi	r24, 0x00	; 0
    11e2:	95 40       	sbci	r25, 0x05	; 5
    11e4:	82 17       	cp	r24, r18
    11e6:	93 07       	cpc	r25, r19
    11e8:	18 f4       	brcc	.+6      	; 0x11f0 <lf_turn_inc+0x5c>
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	15 e0       	ldi	r17, 0x05	; 5
    11ee:	21 c0       	rjmp	.+66     	; 0x1232 <lf_turn_inc+0x9e>
				//Hack for lack of zero sensor on even sensored bots.
				#if (!(channel_amt%2))
				if (nexti==0) {
					if (maxi<0)
						++nexti;
    11f0:	02 1b       	sub	r16, r18
    11f2:	13 0b       	sbc	r17, r19
    11f4:	1e c0       	rjmp	.+60     	; 0x1232 <lf_turn_inc+0x9e>

				nextv=adc_vc[nexti];
				
				//TODO: Use next[vi], max[vi] to find a turn increment.
				lf_turn_inc(maxv-nextv,maxi>=0);				
	
    11f6:	dd 20       	and	r13, r13
    11f8:	e1 f4       	brne	.+56     	; 0x1232 <lf_turn_inc+0x9e>
				#ifdef debug
				print_adc_values();
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
				#endif

				int8_t turn_i;			
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	90 ec       	ldi	r25, 0xC0	; 192
    11fe:	80 1b       	sub	r24, r16
    1200:	91 0b       	sbc	r25, r17
				turn_i = maxi-channel_amt/2; 
    1202:	8e 15       	cp	r24, r14
    1204:	9f 05       	cpc	r25, r15
    1206:	30 f4       	brcc	.+12     	; 0x1214 <lf_turn_inc+0x80>
				// Correction needed for even numbers of sensors.
				#if (!(channel_amt%2))
				if (turn_i>0)
    1208:	97 01       	movw	r18, r14
    120a:	28 1b       	sub	r18, r24
    120c:	39 0b       	sbc	r19, r25
    120e:	00 e0       	ldi	r16, 0x00	; 0
    1210:	10 ec       	ldi	r17, 0xC0	; 192
    1212:	04 c0       	rjmp	.+8      	; 0x121c <lf_turn_inc+0x88>
					++turn_i;	
				#endif

    1214:	0e 0d       	add	r16, r14
    1216:	1f 1d       	adc	r17, r15
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
				uint8_t nexti, nextv;
				if (maxi>0)
					nexti=maxi-1;
				else if (maxi<0)
					nexti=maxi+1;
				
    121c:	ce 01       	movw	r24, r28
    121e:	80 50       	subi	r24, 0x00	; 0
    1220:	95 40       	sbci	r25, 0x05	; 5
    1222:	82 17       	cp	r24, r18
    1224:	93 07       	cpc	r25, r19
    1226:	18 f4       	brcc	.+6      	; 0x122e <lf_turn_inc+0x9a>
    1228:	c0 e0       	ldi	r28, 0x00	; 0
    122a:	d5 e0       	ldi	r29, 0x05	; 5
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <lf_turn_inc+0x9e>
				//Hack for lack of zero sensor on even sensored bots.
				#if (!(channel_amt%2))
				if (nexti==0) {
					if (maxi<0)
						++nexti;
    122e:	c2 1b       	sub	r28, r18
    1230:	d3 0b       	sbc	r29, r19
				
				//TODO: Use next[vi], max[vi] to find a turn increment.
				lf_turn_inc(maxv-nextv,maxi>=0);				
	
				//lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);

    1232:	61 e0       	ldi	r22, 0x01	; 1
    1234:	c8 01       	movw	r24, r16
    1236:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>

    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	ce 01       	movw	r24, r28
    123e:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>
				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	08 95       	ret

00001252 <motor_mode>:
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
	cli(); // Starts with interrupts disabled?
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	78 2f       	mov	r23, r24
	power_all_disable();
	PCMSK1=PCMSK0=EIMSK=0; // Butterfly doesn't remove it's interupts, block them.
	clock_init();
	joy_init();
    1258:	66 23       	and	r22, r22
    125a:	b9 f0       	breq	.+46     	; 0x128a <motor_mode+0x38>
	usart_init();
	adc_init();
	timers_init();
	motors_init();
	sei();
    125c:	61 30       	cpi	r22, 0x01	; 1
    125e:	29 f4       	brne	.+10     	; 0x126a <motor_mode+0x18>
    1260:	55 e0       	ldi	r21, 0x05	; 5
    1262:	e7 e0       	ldi	r30, 0x07	; 7
    1264:	cb ec       	ldi	r28, 0xCB	; 203
    1266:	d1 e0       	ldi	r29, 0x01	; 1
    1268:	14 c0       	rjmp	.+40     	; 0x1292 <motor_mode+0x40>
	#ifdef debug
	printf_P(PSTR("\nInit: Done\n\n"));
	#endif
}


    126a:	8d e3       	ldi	r24, 0x3D	; 61
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9f 93       	push	r25
    1270:	8f 93       	push	r24
    1272:	86 2f       	mov	r24, r22
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9f 93       	push	r25
    1278:	8f 93       	push	r24
    127a:	86 e1       	ldi	r24, 0x16	; 22
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	9f 93       	push	r25
    1280:	8f 93       	push	r24
    1282:	0e 94 07 0b 	call	0x160e	; 0x160e <printf_P>
    1286:	87 e0       	ldi	r24, 0x07	; 7
    1288:	6e c0       	rjmp	.+220    	; 0x1366 <motor_mode+0x114>

    128a:	51 e0       	ldi	r21, 0x01	; 1
    128c:	e3 e0       	ldi	r30, 0x03	; 3
    128e:	ca ec       	ldi	r28, 0xCA	; 202
    1290:	d1 e0       	ldi	r29, 0x01	; 1
int main(void) {
	init();
	c_mode=WAIT;
    1292:	72 30       	cpi	r23, 0x02	; 2
    1294:	a1 f4       	brne	.+40     	; 0x12be <motor_mode+0x6c>
	initial=true;
    1296:	4b b1       	in	r20, 0x0b	; 11
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	c9 01       	movw	r24, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <motor_mode+0x52>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	5a 95       	dec	r21
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <motor_mode+0x4e>
    12a8:	80 95       	com	r24
    12aa:	84 23       	and	r24, r20
    12ac:	8b b9       	out	0x0b, r24	; 11
		
    12ae:	8b b1       	in	r24, 0x0b	; 11
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <motor_mode+0x64>
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	ea 95       	dec	r30
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <motor_mode+0x60>
    12ba:	82 2b       	or	r24, r18
    12bc:	29 c0       	rjmp	.+82     	; 0x1310 <motor_mode+0xbe>
	for(;;) {
		if	(c_mode==FOLLOW && new_adc_data) {
			if (new_adc_data) {
    12be:	71 30       	cpi	r23, 0x01	; 1
    12c0:	a1 f4       	brne	.+40     	; 0x12ea <motor_mode+0x98>
				new_adc_data=false;
    12c2:	4b b1       	in	r20, 0x0b	; 11
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	9c 01       	movw	r18, r24
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <motor_mode+0x7e>
    12cc:	22 0f       	add	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	5a 95       	dec	r21
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <motor_mode+0x7a>
    12d4:	42 2b       	or	r20, r18
    12d6:	4b b9       	out	0x0b, r20	; 11
				if (initial) {
    12d8:	2b b1       	in	r18, 0x0b	; 11
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <motor_mode+0x8e>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	ea 95       	dec	r30
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <motor_mode+0x8a>
    12e4:	80 95       	com	r24
    12e6:	82 23       	and	r24, r18
    12e8:	13 c0       	rjmp	.+38     	; 0x1310 <motor_mode+0xbe>
					lf_full_speed();
					initial=false;
				}
    12ea:	73 30       	cpi	r23, 0x03	; 3
    12ec:	99 f4       	brne	.+38     	; 0x1314 <motor_mode+0xc2>
				
    12ee:	4b b1       	in	r20, 0x0b	; 11
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	c9 01       	movw	r24, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <motor_mode+0xaa>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	ea 95       	dec	r30
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <motor_mode+0xa6>
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <motor_mode+0xb4>
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	5a 95       	dec	r21
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <motor_mode+0xb0>
    130a:	82 2b       	or	r24, r18
    130c:	80 95       	com	r24
    130e:	84 23       	and	r24, r20
    1310:	8b b9       	out	0x0b, r24	; 11
    1312:	14 c0       	rjmp	.+40     	; 0x133c <motor_mode+0xea>
				// gen copy of fixed adc inputs.
				uint16_t adc_vc[channel_amt];
				for (uint8_t i=0;i<channel_amt;++i) {
    1314:	74 30       	cpi	r23, 0x04	; 4
    1316:	99 f4       	brne	.+38     	; 0x133e <motor_mode+0xec>
					adc_vc[i]=adc_get_val(i);
    1318:	8b b1       	in	r24, 0x0b	; 11
    131a:	21 e0       	ldi	r18, 0x01	; 1
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	d9 01       	movw	r26, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <motor_mode+0xd4>
    1322:	aa 0f       	add	r26, r26
    1324:	bb 1f       	adc	r27, r27
    1326:	5a 95       	dec	r21
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <motor_mode+0xd0>
    132a:	ad 01       	movw	r20, r26
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <motor_mode+0xe0>
    132e:	22 0f       	add	r18, r18
    1330:	33 1f       	adc	r19, r19
    1332:	ea 95       	dec	r30
    1334:	e2 f7       	brpl	.-8      	; 0x132e <motor_mode+0xdc>
    1336:	42 2b       	or	r20, r18
    1338:	48 2b       	or	r20, r24
    133a:	4b b9       	out	0x0b, r20	; 11
				}
    133c:	78 83       	st	Y, r23
		
				uint8_t  maxi=channel_amt;
				uint16_t maxv=0;
				for (uint8_t i=0;i<channel_amt;++i) {
					if (adc_vc[i]>maxv) {
    133e:	66 23       	and	r22, r22
    1340:	11 f0       	breq	.+4      	; 0x1346 <motor_mode+0xf4>
    1342:	22 e5       	ldi	r18, 0x52	; 82
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <motor_mode+0xf6>
    1346:	2c e4       	ldi	r18, 0x4C	; 76
						maxi=i;
						maxv=adc_vc[i];
					}
				}
    1348:	88 81       	ld	r24, Y
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9f 93       	push	r25
    134e:	8f 93       	push	r24
    1350:	82 2f       	mov	r24, r18
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9f 93       	push	r25
    1356:	8f 93       	push	r24
    1358:	8e e2       	ldi	r24, 0x2E	; 46
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	9f 93       	push	r25
    135e:	8f 93       	push	r24
    1360:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <printf>
			
				#ifdef debug
				print_adc_values();
    1364:	88 81       	ld	r24, Y
    1366:	2d b7       	in	r18, 0x3d	; 61
    1368:	3e b7       	in	r19, 0x3e	; 62
    136a:	2a 5f       	subi	r18, 0xFA	; 250
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	f8 94       	cli
    1372:	3e bf       	out	0x3e, r19	; 62
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	2d bf       	out	0x3d, r18	; 61
				printf_P(PSTR("\nMax Chan [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	08 95       	ret

0000137e <lf_stop_speed>:
				//0=LEFT, 3=RIGHT
				/*
				if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
					lf_turn_inc(LF_INC_LARGE,NEG);
					dir=LEFT;
				}
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	83 e0       	ldi	r24, 0x03	; 3
    1382:	0e 94 29 09 	call	0x1252	; 0x1252 <motor_mode>
				else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	83 e0       	ldi	r24, 0x03	; 3
    138a:	0e 94 29 09 	call	0x1252	; 0x1252 <motor_mode>
					lf_turn_inc(LF_INC_LARGE,POS);
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	95 e0       	ldi	r25, 0x05	; 5
    1394:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>
					dir=RIGHT;
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	95 e0       	ldi	r25, 0x05	; 5
    139e:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>
				}
    13a2:	08 95       	ret

000013a4 <motors_init>:
				else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
					lf_turn_inc(LF_INC_SMALL,NEG);
					dir=LEFT;
    13a4:	8a b1       	in	r24, 0x0a	; 10
    13a6:	8a 6a       	ori	r24, 0xAA	; 170
    13a8:	8a b9       	out	0x0a, r24	; 10
				}
    13aa:	0e 94 bf 09 	call	0x137e	; 0x137e <lf_stop_speed>
				else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
    13ae:	08 95       	ret

000013b0 <lf_full_speed>:


				printf_P(PSTR("\nTurn Increment: %d"),LF_INC_SMALL*turn_i);
			
				uint16_t cspeed [2] = {	motor_get_speed(LEFT ),\
							motor_get_speed(RIGHT)};
    13b0:	60 e0       	ldi	r22, 0x00	; 0
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 ec       	ldi	r25, 0xC0	; 192
    13b6:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>
				printf_P(PSTR("\nCurr Motors: L:%d %d:R"),cspeed[0],cspeed[1]);
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 ec       	ldi	r25, 0xC0	; 192
    13c0:	0e 94 76 08 	call	0x10ec	; 0x10ec <motor_set_speed>
				//0=LEFT, 3=RIGHT
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	0e 94 29 09 	call	0x1252	; 0x1252 <motor_mode>
				/*
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	0e 94 29 09 	call	0x1252	; 0x1252 <motor_mode>
				if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
    13d4:	08 95       	ret

000013d6 <joy_init>:
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

void joy_init(void) {
	// Set pins as inputs.
	DDRB&=(uint8_t)~((1<<4)|(1<<6)|(1<<7));
    13d6:	84 b1       	in	r24, 0x04	; 4
    13d8:	8f 72       	andi	r24, 0x2F	; 47
    13da:	84 b9       	out	0x04, r24	; 4
	DDRE&=(uint8_t)~((1<<2)|(1<<3));
    13dc:	8d b1       	in	r24, 0x0d	; 13
    13de:	83 7f       	andi	r24, 0xF3	; 243
    13e0:	8d b9       	out	0x0d, r24	; 13
	// Enable pullup resistors.
	PORTB|=((1<<4)|(1<<6)|(1<<7));
    13e2:	85 b1       	in	r24, 0x05	; 5
    13e4:	80 6d       	ori	r24, 0xD0	; 208
    13e6:	85 b9       	out	0x05, r24	; 5
	PORTE|=((1<<2)|(1<<3));
    13e8:	8e b1       	in	r24, 0x0e	; 14
    13ea:	8c 60       	ori	r24, 0x0C	; 12
    13ec:	8e b9       	out	0x0e, r24	; 14
	//IN	= PINB&(1<<4)
	
	// Enable Pin Change interupts. Disable INT0
	//EIMSK|=((1<<PCIE1)|(1<<PCIE0));
	//EIMSK&=(uint8_t)~(1<<INT0);
	EIMSK|=(1<<PCIE1)|(1<<PCIE0);
    13ee:	8d b3       	in	r24, 0x1d	; 29
    13f0:	80 6c       	ori	r24, 0xC0	; 192
    13f2:	8d bb       	out	0x1d, r24	; 29
	PCMSK1|=(1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
    13f4:	ec e6       	ldi	r30, 0x6C	; 108
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	80 6d       	ori	r24, 0xD0	; 208
    13fc:	80 83       	st	Z, r24
	PCMSK0|=(1<<PCINT3)|(1<<PCINT2);	
    13fe:	eb e6       	ldi	r30, 0x6B	; 107
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8c 60       	ori	r24, 0x0C	; 12
    1406:	80 83       	st	Z, r24
	
}
    1408:	08 95       	ret

0000140a <__vector_3>:
	else
		fprintf_P(stderr,PSTR("\n[debug] PE? Released"));
	#endif
}

ISR(PCINT1_vect) {
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	1f 93       	push	r17
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
	//PB7,4,6
	uint8_t iPINB = (uint8_t)~PINB;
    141a:	93 b1       	in	r25, 0x03	; 3
    141c:	90 95       	com	r25
	if (iPINB&((1<<7)|(1<<6)|(1<<4))) {
    141e:	19 2f       	mov	r17, r25
    1420:	89 2f       	mov	r24, r25
    1422:	80 7d       	andi	r24, 0xD0	; 208
    1424:	b9 f0       	breq	.+46     	; 0x1454 <__vector_3+0x4a>
		if (iPINB&(1<<7)) {// Down
    1426:	97 ff       	sbrs	r25, 7
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <__vector_3+0x2c>
			adc_calibrate_update();
    142a:	0e 94 40 04 	call	0x880	; 0x880 <adc_calibrate_update>
			#ifdef debug
			print_adc_calibration();
    142e:	0e 94 bb 04 	call	0x976	; 0x976 <print_adc_calibration>
			print_adc_values();
    1432:	0e 94 24 05 	call	0xa48	; 0xa48 <print_adc_values>
			#endif
		}
		if (iPINB&(1<<4)) {// In
    1436:	14 ff       	sbrs	r17, 4
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <__vector_3+0x38>
			#ifdef debug
			print_adc_calibration();
    143a:	0e 94 bb 04 	call	0x976	; 0x976 <print_adc_calibration>
			print_adc_values();
    143e:	0e 94 24 05 	call	0xa48	; 0xa48 <print_adc_values>
			#endif
		}
		if (iPINB&(1<<6)) {// Up
    1442:	16 ff       	sbrs	r17, 6
    1444:	17 c0       	rjmp	.+46     	; 0x1474 <__vector_3+0x6a>
			adc_calibrate_clear();
    1446:	0e 94 36 04 	call	0x86c	; 0x86c <adc_calibrate_clear>
			#ifdef debug
			print_adc_calibration();
    144a:	0e 94 bb 04 	call	0x976	; 0x976 <print_adc_calibration>
			print_adc_values();
    144e:	0e 94 24 05 	call	0xa48	; 0xa48 <print_adc_values>
    1452:	10 c0       	rjmp	.+32     	; 0x1474 <__vector_3+0x6a>
			#endif
		}
	}
	#ifdef debug
	else
		fprintf_P(stderr,PSTR("\n[debug] PB? Released"));
    1454:	80 ea       	ldi	r24, 0xA0	; 160
    1456:	92 e0       	ldi	r25, 0x02	; 2
    1458:	9f 93       	push	r25
    145a:	8f 93       	push	r24
    145c:	80 91 ec 01 	lds	r24, 0x01EC
    1460:	90 91 ed 01 	lds	r25, 0x01ED
    1464:	9f 93       	push	r25
    1466:	8f 93       	push	r24
    1468:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	0f 90       	pop	r0
	#endif
}
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	1f 91       	pop	r17
    147a:	0f 90       	pop	r0
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	0f 90       	pop	r0
    1480:	1f 90       	pop	r1
    1482:	18 95       	reti

00001484 <__vector_2>:
	PCMSK1|=(1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
	PCMSK0|=(1<<PCINT3)|(1<<PCINT2);	
	
}

ISR(PCINT0_vect) {
    1484:	1f 92       	push	r1
    1486:	0f 92       	push	r0
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	0f 92       	push	r0
    148c:	11 24       	eor	r1, r1
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
	//PE2,3
	uint8_t iPINE = (uint8_t)~PINE;
    1496:	8c b1       	in	r24, 0x0c	; 12
	if (iPINE&((1<<2)|(1<<3))) {
    1498:	80 95       	com	r24
    149a:	c8 2f       	mov	r28, r24
    149c:	d0 e0       	ldi	r29, 0x00	; 0
    149e:	ce 01       	movw	r24, r28
    14a0:	8c 70       	andi	r24, 0x0C	; 12
    14a2:	90 70       	andi	r25, 0x00	; 0
    14a4:	89 2b       	or	r24, r25
    14a6:	09 f4       	brne	.+2      	; 0x14aa <__vector_2+0x26>
    14a8:	54 c0       	rjmp	.+168    	; 0x1552 <__vector_2+0xce>
		if (iPINE&(1<<2)) {// Left
    14aa:	c2 ff       	sbrs	r28, 2
    14ac:	27 c0       	rjmp	.+78     	; 0x14fc <__vector_2+0x78>
			if (c_mode!=WAIT) {
    14ae:	80 91 d4 01 	lds	r24, 0x01D4
    14b2:	88 23       	and	r24, r24
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <__vector_2+0x3c>
				c_mode=WAIT;
    14b6:	10 92 d4 01 	sts	0x01D4, r1
				lf_stop_speed();
    14ba:	0e 94 bf 09 	call	0x137e	; 0x137e <lf_stop_speed>
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <__vector_2+0x46>
			}
			else {
				initial=true;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	80 93 e6 01 	sts	0x01E6, r24
				c_mode=TEST;
    14c6:	80 93 d4 01 	sts	0x01D4, r24
			}
			#ifdef debug
			fprintf_P(stderr,PSTR("\nCurrent Mode (T/W) = %d"),c_mode);
    14ca:	80 91 d4 01 	lds	r24, 0x01D4
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	9f 93       	push	r25
    14d2:	8f 93       	push	r24
    14d4:	84 ee       	ldi	r24, 0xE4	; 228
    14d6:	92 e0       	ldi	r25, 0x02	; 2
    14d8:	9f 93       	push	r25
    14da:	8f 93       	push	r24
    14dc:	80 91 ec 01 	lds	r24, 0x01EC
    14e0:	90 91 ed 01 	lds	r25, 0x01ED
    14e4:	9f 93       	push	r25
    14e6:	8f 93       	push	r24
    14e8:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
    14ec:	8d b7       	in	r24, 0x3d	; 61
    14ee:	9e b7       	in	r25, 0x3e	; 62
    14f0:	06 96       	adiw	r24, 0x06	; 6
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	9e bf       	out	0x3e, r25	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	8d bf       	out	0x3d, r24	; 61
			#endif
		}
		if (iPINE&(1<<3)) {// Right
    14fc:	c3 ff       	sbrs	r28, 3
    14fe:	39 c0       	rjmp	.+114    	; 0x1572 <__vector_2+0xee>
			if (c_mode!=WAIT) {
    1500:	80 91 d4 01 	lds	r24, 0x01D4
    1504:	88 23       	and	r24, r24
    1506:	29 f0       	breq	.+10     	; 0x1512 <__vector_2+0x8e>
				c_mode=WAIT;
    1508:	10 92 d4 01 	sts	0x01D4, r1
				lf_stop_speed();
    150c:	0e 94 bf 09 	call	0x137e	; 0x137e <lf_stop_speed>
    1510:	06 c0       	rjmp	.+12     	; 0x151e <__vector_2+0x9a>
			}
			else {
				initial=true;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 e6 01 	sts	0x01E6, r24
				c_mode=FOLLOW;
    1518:	82 e0       	ldi	r24, 0x02	; 2
    151a:	80 93 d4 01 	sts	0x01D4, r24
			}
			#ifdef debug	
			fprintf_P(stderr,PSTR("\nCurrent Mode (F/W)= %d"),c_mode);
    151e:	80 91 d4 01 	lds	r24, 0x01D4
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9f 93       	push	r25
    1526:	8f 93       	push	r24
    1528:	8c ec       	ldi	r24, 0xCC	; 204
    152a:	92 e0       	ldi	r25, 0x02	; 2
    152c:	9f 93       	push	r25
    152e:	8f 93       	push	r24
    1530:	80 91 ec 01 	lds	r24, 0x01EC
    1534:	90 91 ed 01 	lds	r25, 0x01ED
    1538:	9f 93       	push	r25
    153a:	8f 93       	push	r24
    153c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
    1540:	8d b7       	in	r24, 0x3d	; 61
    1542:	9e b7       	in	r25, 0x3e	; 62
    1544:	06 96       	adiw	r24, 0x06	; 6
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	9e bf       	out	0x3e, r25	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	8d bf       	out	0x3d, r24	; 61
    1550:	10 c0       	rjmp	.+32     	; 0x1572 <__vector_2+0xee>
			#endif
		}
	}
	#ifdef debug
	else
		fprintf_P(stderr,PSTR("\n[debug] PE? Released"));
    1552:	86 eb       	ldi	r24, 0xB6	; 182
    1554:	92 e0       	ldi	r25, 0x02	; 2
    1556:	9f 93       	push	r25
    1558:	8f 93       	push	r24
    155a:	80 91 ec 01 	lds	r24, 0x01EC
    155e:	90 91 ed 01 	lds	r25, 0x01ED
    1562:	9f 93       	push	r25
    1564:	8f 93       	push	r24
    1566:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <fprintf_P>
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
	#endif
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	9f 91       	pop	r25
    1578:	8f 91       	pop	r24
    157a:	0f 90       	pop	r0
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	0f 90       	pop	r0
    1580:	1f 90       	pop	r1
    1582:	18 95       	reti

00001584 <fprintf>:
    1584:	a0 e0       	ldi	r26, 0x00	; 0
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 ec       	ldi	r30, 0xC8	; 200
    158a:	fa e0       	ldi	r31, 0x0A	; 10
    158c:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__prologue_saves__+0x20>
    1590:	ce 01       	movw	r24, r28
    1592:	09 96       	adiw	r24, 0x09	; 9
    1594:	ac 01       	movw	r20, r24
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	9e 81       	ldd	r25, Y+6	; 0x06
    159e:	0e 94 35 0b 	call	0x166a	; 0x166a <vfprintf>
    15a2:	20 96       	adiw	r28, 0x00	; 0
    15a4:	e2 e0       	ldi	r30, 0x02	; 2
    15a6:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__epilogue_restores__+0x20>

000015aa <fprintf_P>:
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb ed       	ldi	r30, 0xDB	; 219
    15b0:	fa e0       	ldi	r31, 0x0A	; 10
    15b2:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__prologue_saves__+0x1c>
    15b6:	0f 81       	ldd	r16, Y+7	; 0x07
    15b8:	18 85       	ldd	r17, Y+8	; 0x08
    15ba:	9e 01       	movw	r18, r28
    15bc:	25 5f       	subi	r18, 0xF5	; 245
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	f8 01       	movw	r30, r16
    15c2:	83 81       	ldd	r24, Z+3	; 0x03
    15c4:	88 60       	ori	r24, 0x08	; 8
    15c6:	83 83       	std	Z+3, r24	; 0x03
    15c8:	a9 01       	movw	r20, r18
    15ca:	69 85       	ldd	r22, Y+9	; 0x09
    15cc:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ce:	c8 01       	movw	r24, r16
    15d0:	0e 94 35 0b 	call	0x166a	; 0x166a <vfprintf>
    15d4:	f8 01       	movw	r30, r16
    15d6:	23 81       	ldd	r18, Z+3	; 0x03
    15d8:	27 7f       	andi	r18, 0xF7	; 247
    15da:	23 83       	std	Z+3, r18	; 0x03
    15dc:	20 96       	adiw	r28, 0x00	; 0
    15de:	e4 e0       	ldi	r30, 0x04	; 4
    15e0:	0c 94 05 0e 	jmp	0x1c0a	; 0x1c0a <__epilogue_restores__+0x1c>

000015e4 <printf>:
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 ef       	ldi	r30, 0xF8	; 248
    15ea:	fa e0       	ldi	r31, 0x0A	; 10
    15ec:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__prologue_saves__+0x20>
    15f0:	fe 01       	movw	r30, r28
    15f2:	35 96       	adiw	r30, 0x05	; 5
    15f4:	61 91       	ld	r22, Z+
    15f6:	71 91       	ld	r23, Z+
    15f8:	af 01       	movw	r20, r30
    15fa:	80 91 ea 01 	lds	r24, 0x01EA
    15fe:	90 91 eb 01 	lds	r25, 0x01EB
    1602:	0e 94 35 0b 	call	0x166a	; 0x166a <vfprintf>
    1606:	20 96       	adiw	r28, 0x00	; 0
    1608:	e2 e0       	ldi	r30, 0x02	; 2
    160a:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__epilogue_restores__+0x20>

0000160e <printf_P>:
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ed e0       	ldi	r30, 0x0D	; 13
    1614:	fb e0       	ldi	r31, 0x0B	; 11
    1616:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__prologue_saves__+0x20>
    161a:	9e 01       	movw	r18, r28
    161c:	2b 5f       	subi	r18, 0xFB	; 251
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	f9 01       	movw	r30, r18
    1622:	61 91       	ld	r22, Z+
    1624:	71 91       	ld	r23, Z+
    1626:	9f 01       	movw	r18, r30
    1628:	a0 91 ea 01 	lds	r26, 0x01EA
    162c:	b0 91 eb 01 	lds	r27, 0x01EB
    1630:	fd 01       	movw	r30, r26
    1632:	83 81       	ldd	r24, Z+3	; 0x03
    1634:	88 60       	ori	r24, 0x08	; 8
    1636:	83 83       	std	Z+3, r24	; 0x03
    1638:	a9 01       	movw	r20, r18
    163a:	80 91 ea 01 	lds	r24, 0x01EA
    163e:	90 91 eb 01 	lds	r25, 0x01EB
    1642:	0e 94 35 0b 	call	0x166a	; 0x166a <vfprintf>
    1646:	e0 91 ea 01 	lds	r30, 0x01EA
    164a:	f0 91 eb 01 	lds	r31, 0x01EB
    164e:	23 81       	ldd	r18, Z+3	; 0x03
    1650:	27 7f       	andi	r18, 0xF7	; 247
    1652:	23 83       	std	Z+3, r18	; 0x03
    1654:	20 96       	adiw	r28, 0x00	; 0
    1656:	e2 e0       	ldi	r30, 0x02	; 2
    1658:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__epilogue_restores__+0x20>

0000165c <putchar>:
    165c:	60 91 ea 01 	lds	r22, 0x01EA
    1660:	70 91 eb 01 	lds	r23, 0x01EB
    1664:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    1668:	08 95       	ret

0000166a <vfprintf>:
    166a:	ab e0       	ldi	r26, 0x0B	; 11
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	fb e0       	ldi	r31, 0x0B	; 11
    1672:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <__prologue_saves__>
    1676:	3c 01       	movw	r6, r24
    1678:	2b 01       	movw	r4, r22
    167a:	5a 01       	movw	r10, r20
    167c:	fc 01       	movw	r30, r24
    167e:	17 82       	std	Z+7, r1	; 0x07
    1680:	16 82       	std	Z+6, r1	; 0x06
    1682:	83 81       	ldd	r24, Z+3	; 0x03
    1684:	81 fd       	sbrc	r24, 1
    1686:	03 c0       	rjmp	.+6      	; 0x168e <vfprintf+0x24>
    1688:	6f ef       	ldi	r22, 0xFF	; 255
    168a:	7f ef       	ldi	r23, 0xFF	; 255
    168c:	c8 c1       	rjmp	.+912    	; 0x1a1e <vfprintf+0x3b4>
    168e:	9a e0       	ldi	r25, 0x0A	; 10
    1690:	89 2e       	mov	r8, r25
    1692:	1e 01       	movw	r2, r28
    1694:	08 94       	sec
    1696:	21 1c       	adc	r2, r1
    1698:	31 1c       	adc	r3, r1
    169a:	f3 01       	movw	r30, r6
    169c:	23 81       	ldd	r18, Z+3	; 0x03
    169e:	f2 01       	movw	r30, r4
    16a0:	23 fd       	sbrc	r18, 3
    16a2:	85 91       	lpm	r24, Z+
    16a4:	23 ff       	sbrs	r18, 3
    16a6:	81 91       	ld	r24, Z+
    16a8:	2f 01       	movw	r4, r30
    16aa:	88 23       	and	r24, r24
    16ac:	09 f4       	brne	.+2      	; 0x16b0 <vfprintf+0x46>
    16ae:	b4 c1       	rjmp	.+872    	; 0x1a18 <vfprintf+0x3ae>
    16b0:	85 32       	cpi	r24, 0x25	; 37
    16b2:	39 f4       	brne	.+14     	; 0x16c2 <vfprintf+0x58>
    16b4:	23 fd       	sbrc	r18, 3
    16b6:	85 91       	lpm	r24, Z+
    16b8:	23 ff       	sbrs	r18, 3
    16ba:	81 91       	ld	r24, Z+
    16bc:	2f 01       	movw	r4, r30
    16be:	85 32       	cpi	r24, 0x25	; 37
    16c0:	29 f4       	brne	.+10     	; 0x16cc <vfprintf+0x62>
    16c2:	b3 01       	movw	r22, r6
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    16ca:	e7 cf       	rjmp	.-50     	; 0x169a <vfprintf+0x30>
    16cc:	98 2f       	mov	r25, r24
    16ce:	dd 24       	eor	r13, r13
    16d0:	cc 24       	eor	r12, r12
    16d2:	99 24       	eor	r9, r9
    16d4:	ff e1       	ldi	r31, 0x1F	; 31
    16d6:	fd 15       	cp	r31, r13
    16d8:	d0 f0       	brcs	.+52     	; 0x170e <vfprintf+0xa4>
    16da:	9b 32       	cpi	r25, 0x2B	; 43
    16dc:	69 f0       	breq	.+26     	; 0x16f8 <vfprintf+0x8e>
    16de:	9c 32       	cpi	r25, 0x2C	; 44
    16e0:	28 f4       	brcc	.+10     	; 0x16ec <vfprintf+0x82>
    16e2:	90 32       	cpi	r25, 0x20	; 32
    16e4:	59 f0       	breq	.+22     	; 0x16fc <vfprintf+0x92>
    16e6:	93 32       	cpi	r25, 0x23	; 35
    16e8:	91 f4       	brne	.+36     	; 0x170e <vfprintf+0xa4>
    16ea:	0e c0       	rjmp	.+28     	; 0x1708 <vfprintf+0x9e>
    16ec:	9d 32       	cpi	r25, 0x2D	; 45
    16ee:	49 f0       	breq	.+18     	; 0x1702 <vfprintf+0x98>
    16f0:	90 33       	cpi	r25, 0x30	; 48
    16f2:	69 f4       	brne	.+26     	; 0x170e <vfprintf+0xa4>
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	24 c0       	rjmp	.+72     	; 0x1740 <vfprintf+0xd6>
    16f8:	52 e0       	ldi	r21, 0x02	; 2
    16fa:	d5 2a       	or	r13, r21
    16fc:	84 e0       	ldi	r24, 0x04	; 4
    16fe:	d8 2a       	or	r13, r24
    1700:	28 c0       	rjmp	.+80     	; 0x1752 <vfprintf+0xe8>
    1702:	98 e0       	ldi	r25, 0x08	; 8
    1704:	d9 2a       	or	r13, r25
    1706:	25 c0       	rjmp	.+74     	; 0x1752 <vfprintf+0xe8>
    1708:	e0 e1       	ldi	r30, 0x10	; 16
    170a:	de 2a       	or	r13, r30
    170c:	22 c0       	rjmp	.+68     	; 0x1752 <vfprintf+0xe8>
    170e:	d7 fc       	sbrc	r13, 7
    1710:	29 c0       	rjmp	.+82     	; 0x1764 <vfprintf+0xfa>
    1712:	89 2f       	mov	r24, r25
    1714:	80 53       	subi	r24, 0x30	; 48
    1716:	8a 30       	cpi	r24, 0x0A	; 10
    1718:	70 f4       	brcc	.+28     	; 0x1736 <vfprintf+0xcc>
    171a:	d6 fe       	sbrs	r13, 6
    171c:	05 c0       	rjmp	.+10     	; 0x1728 <vfprintf+0xbe>
    171e:	98 9c       	mul	r9, r8
    1720:	90 2c       	mov	r9, r0
    1722:	11 24       	eor	r1, r1
    1724:	98 0e       	add	r9, r24
    1726:	15 c0       	rjmp	.+42     	; 0x1752 <vfprintf+0xe8>
    1728:	c8 9c       	mul	r12, r8
    172a:	c0 2c       	mov	r12, r0
    172c:	11 24       	eor	r1, r1
    172e:	c8 0e       	add	r12, r24
    1730:	f0 e2       	ldi	r31, 0x20	; 32
    1732:	df 2a       	or	r13, r31
    1734:	0e c0       	rjmp	.+28     	; 0x1752 <vfprintf+0xe8>
    1736:	9e 32       	cpi	r25, 0x2E	; 46
    1738:	29 f4       	brne	.+10     	; 0x1744 <vfprintf+0xda>
    173a:	d6 fc       	sbrc	r13, 6
    173c:	6d c1       	rjmp	.+730    	; 0x1a18 <vfprintf+0x3ae>
    173e:	40 e4       	ldi	r20, 0x40	; 64
    1740:	d4 2a       	or	r13, r20
    1742:	07 c0       	rjmp	.+14     	; 0x1752 <vfprintf+0xe8>
    1744:	9c 36       	cpi	r25, 0x6C	; 108
    1746:	19 f4       	brne	.+6      	; 0x174e <vfprintf+0xe4>
    1748:	50 e8       	ldi	r21, 0x80	; 128
    174a:	d5 2a       	or	r13, r21
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0xe8>
    174e:	98 36       	cpi	r25, 0x68	; 104
    1750:	49 f4       	brne	.+18     	; 0x1764 <vfprintf+0xfa>
    1752:	f2 01       	movw	r30, r4
    1754:	23 fd       	sbrc	r18, 3
    1756:	95 91       	lpm	r25, Z+
    1758:	23 ff       	sbrs	r18, 3
    175a:	91 91       	ld	r25, Z+
    175c:	2f 01       	movw	r4, r30
    175e:	99 23       	and	r25, r25
    1760:	09 f0       	breq	.+2      	; 0x1764 <vfprintf+0xfa>
    1762:	b8 cf       	rjmp	.-144    	; 0x16d4 <vfprintf+0x6a>
    1764:	89 2f       	mov	r24, r25
    1766:	85 54       	subi	r24, 0x45	; 69
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	18 f0       	brcs	.+6      	; 0x1772 <vfprintf+0x108>
    176c:	80 52       	subi	r24, 0x20	; 32
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	38 f4       	brcc	.+14     	; 0x1780 <vfprintf+0x116>
    1772:	44 e0       	ldi	r20, 0x04	; 4
    1774:	50 e0       	ldi	r21, 0x00	; 0
    1776:	a4 0e       	add	r10, r20
    1778:	b5 1e       	adc	r11, r21
    177a:	5f e3       	ldi	r21, 0x3F	; 63
    177c:	59 83       	std	Y+1, r21	; 0x01
    177e:	0f c0       	rjmp	.+30     	; 0x179e <vfprintf+0x134>
    1780:	93 36       	cpi	r25, 0x63	; 99
    1782:	31 f0       	breq	.+12     	; 0x1790 <vfprintf+0x126>
    1784:	93 37       	cpi	r25, 0x73	; 115
    1786:	79 f0       	breq	.+30     	; 0x17a6 <vfprintf+0x13c>
    1788:	93 35       	cpi	r25, 0x53	; 83
    178a:	09 f0       	breq	.+2      	; 0x178e <vfprintf+0x124>
    178c:	56 c0       	rjmp	.+172    	; 0x183a <vfprintf+0x1d0>
    178e:	20 c0       	rjmp	.+64     	; 0x17d0 <vfprintf+0x166>
    1790:	f5 01       	movw	r30, r10
    1792:	80 81       	ld	r24, Z
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	42 e0       	ldi	r20, 0x02	; 2
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	a4 0e       	add	r10, r20
    179c:	b5 1e       	adc	r11, r21
    179e:	71 01       	movw	r14, r2
    17a0:	01 e0       	ldi	r16, 0x01	; 1
    17a2:	10 e0       	ldi	r17, 0x00	; 0
    17a4:	12 c0       	rjmp	.+36     	; 0x17ca <vfprintf+0x160>
    17a6:	f5 01       	movw	r30, r10
    17a8:	e0 80       	ld	r14, Z
    17aa:	f1 80       	ldd	r15, Z+1	; 0x01
    17ac:	d6 fc       	sbrc	r13, 6
    17ae:	03 c0       	rjmp	.+6      	; 0x17b6 <vfprintf+0x14c>
    17b0:	6f ef       	ldi	r22, 0xFF	; 255
    17b2:	7f ef       	ldi	r23, 0xFF	; 255
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <vfprintf+0x150>
    17b6:	69 2d       	mov	r22, r9
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	42 e0       	ldi	r20, 0x02	; 2
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	a4 0e       	add	r10, r20
    17c0:	b5 1e       	adc	r11, r21
    17c2:	c7 01       	movw	r24, r14
    17c4:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <strnlen>
    17c8:	8c 01       	movw	r16, r24
    17ca:	5f e7       	ldi	r21, 0x7F	; 127
    17cc:	d5 22       	and	r13, r21
    17ce:	14 c0       	rjmp	.+40     	; 0x17f8 <vfprintf+0x18e>
    17d0:	f5 01       	movw	r30, r10
    17d2:	e0 80       	ld	r14, Z
    17d4:	f1 80       	ldd	r15, Z+1	; 0x01
    17d6:	d6 fc       	sbrc	r13, 6
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <vfprintf+0x176>
    17da:	6f ef       	ldi	r22, 0xFF	; 255
    17dc:	7f ef       	ldi	r23, 0xFF	; 255
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <vfprintf+0x17a>
    17e0:	69 2d       	mov	r22, r9
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	42 e0       	ldi	r20, 0x02	; 2
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	a4 0e       	add	r10, r20
    17ea:	b5 1e       	adc	r11, r21
    17ec:	c7 01       	movw	r24, r14
    17ee:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <strnlen_P>
    17f2:	8c 01       	movw	r16, r24
    17f4:	50 e8       	ldi	r21, 0x80	; 128
    17f6:	d5 2a       	or	r13, r21
    17f8:	d3 fe       	sbrs	r13, 3
    17fa:	07 c0       	rjmp	.+14     	; 0x180a <vfprintf+0x1a0>
    17fc:	1a c0       	rjmp	.+52     	; 0x1832 <vfprintf+0x1c8>
    17fe:	b3 01       	movw	r22, r6
    1800:	80 e2       	ldi	r24, 0x20	; 32
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    1808:	ca 94       	dec	r12
    180a:	8c 2d       	mov	r24, r12
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	08 17       	cp	r16, r24
    1810:	19 07       	cpc	r17, r25
    1812:	a8 f3       	brcs	.-22     	; 0x17fe <vfprintf+0x194>
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <vfprintf+0x1c8>
    1816:	f7 01       	movw	r30, r14
    1818:	d7 fc       	sbrc	r13, 7
    181a:	85 91       	lpm	r24, Z+
    181c:	d7 fe       	sbrs	r13, 7
    181e:	81 91       	ld	r24, Z+
    1820:	7f 01       	movw	r14, r30
    1822:	b3 01       	movw	r22, r6
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    182a:	c1 10       	cpse	r12, r1
    182c:	ca 94       	dec	r12
    182e:	01 50       	subi	r16, 0x01	; 1
    1830:	10 40       	sbci	r17, 0x00	; 0
    1832:	01 15       	cp	r16, r1
    1834:	11 05       	cpc	r17, r1
    1836:	79 f7       	brne	.-34     	; 0x1816 <vfprintf+0x1ac>
    1838:	ec c0       	rjmp	.+472    	; 0x1a12 <vfprintf+0x3a8>
    183a:	94 36       	cpi	r25, 0x64	; 100
    183c:	11 f0       	breq	.+4      	; 0x1842 <vfprintf+0x1d8>
    183e:	99 36       	cpi	r25, 0x69	; 105
    1840:	71 f5       	brne	.+92     	; 0x189e <vfprintf+0x234>
    1842:	d7 fe       	sbrs	r13, 7
    1844:	08 c0       	rjmp	.+16     	; 0x1856 <vfprintf+0x1ec>
    1846:	f5 01       	movw	r30, r10
    1848:	e0 80       	ld	r14, Z
    184a:	f1 80       	ldd	r15, Z+1	; 0x01
    184c:	02 81       	ldd	r16, Z+2	; 0x02
    184e:	13 81       	ldd	r17, Z+3	; 0x03
    1850:	44 e0       	ldi	r20, 0x04	; 4
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	0a c0       	rjmp	.+20     	; 0x186a <vfprintf+0x200>
    1856:	f5 01       	movw	r30, r10
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	7c 01       	movw	r14, r24
    185e:	00 27       	eor	r16, r16
    1860:	f7 fc       	sbrc	r15, 7
    1862:	00 95       	com	r16
    1864:	10 2f       	mov	r17, r16
    1866:	42 e0       	ldi	r20, 0x02	; 2
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	a4 0e       	add	r10, r20
    186c:	b5 1e       	adc	r11, r21
    186e:	5f e6       	ldi	r21, 0x6F	; 111
    1870:	d5 22       	and	r13, r21
    1872:	17 ff       	sbrs	r17, 7
    1874:	0a c0       	rjmp	.+20     	; 0x188a <vfprintf+0x220>
    1876:	10 95       	com	r17
    1878:	00 95       	com	r16
    187a:	f0 94       	com	r15
    187c:	e0 94       	com	r14
    187e:	e1 1c       	adc	r14, r1
    1880:	f1 1c       	adc	r15, r1
    1882:	01 1d       	adc	r16, r1
    1884:	11 1d       	adc	r17, r1
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	d8 2a       	or	r13, r24
    188a:	2a e0       	ldi	r18, 0x0A	; 10
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	a1 01       	movw	r20, r2
    1890:	c8 01       	movw	r24, r16
    1892:	b7 01       	movw	r22, r14
    1894:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__ultoa_invert>
    1898:	f8 2e       	mov	r15, r24
    189a:	f2 18       	sub	r15, r2
    189c:	40 c0       	rjmp	.+128    	; 0x191e <vfprintf+0x2b4>
    189e:	95 37       	cpi	r25, 0x75	; 117
    18a0:	29 f4       	brne	.+10     	; 0x18ac <vfprintf+0x242>
    18a2:	1d 2d       	mov	r17, r13
    18a4:	1f 7e       	andi	r17, 0xEF	; 239
    18a6:	2a e0       	ldi	r18, 0x0A	; 10
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	1d c0       	rjmp	.+58     	; 0x18e6 <vfprintf+0x27c>
    18ac:	1d 2d       	mov	r17, r13
    18ae:	19 7f       	andi	r17, 0xF9	; 249
    18b0:	9f 36       	cpi	r25, 0x6F	; 111
    18b2:	61 f0       	breq	.+24     	; 0x18cc <vfprintf+0x262>
    18b4:	90 37       	cpi	r25, 0x70	; 112
    18b6:	20 f4       	brcc	.+8      	; 0x18c0 <vfprintf+0x256>
    18b8:	98 35       	cpi	r25, 0x58	; 88
    18ba:	09 f0       	breq	.+2      	; 0x18be <vfprintf+0x254>
    18bc:	ad c0       	rjmp	.+346    	; 0x1a18 <vfprintf+0x3ae>
    18be:	0f c0       	rjmp	.+30     	; 0x18de <vfprintf+0x274>
    18c0:	90 37       	cpi	r25, 0x70	; 112
    18c2:	39 f0       	breq	.+14     	; 0x18d2 <vfprintf+0x268>
    18c4:	98 37       	cpi	r25, 0x78	; 120
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x260>
    18c8:	a7 c0       	rjmp	.+334    	; 0x1a18 <vfprintf+0x3ae>
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <vfprintf+0x26a>
    18cc:	28 e0       	ldi	r18, 0x08	; 8
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	0a c0       	rjmp	.+20     	; 0x18e6 <vfprintf+0x27c>
    18d2:	10 61       	ori	r17, 0x10	; 16
    18d4:	14 fd       	sbrc	r17, 4
    18d6:	14 60       	ori	r17, 0x04	; 4
    18d8:	20 e1       	ldi	r18, 0x10	; 16
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <vfprintf+0x27c>
    18de:	14 fd       	sbrc	r17, 4
    18e0:	16 60       	ori	r17, 0x06	; 6
    18e2:	20 e1       	ldi	r18, 0x10	; 16
    18e4:	32 e0       	ldi	r19, 0x02	; 2
    18e6:	17 ff       	sbrs	r17, 7
    18e8:	08 c0       	rjmp	.+16     	; 0x18fa <vfprintf+0x290>
    18ea:	f5 01       	movw	r30, r10
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	44 e0       	ldi	r20, 0x04	; 4
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	08 c0       	rjmp	.+16     	; 0x190a <vfprintf+0x2a0>
    18fa:	f5 01       	movw	r30, r10
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	bc 01       	movw	r22, r24
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	42 e0       	ldi	r20, 0x02	; 2
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	a4 0e       	add	r10, r20
    190c:	b5 1e       	adc	r11, r21
    190e:	a1 01       	movw	r20, r2
    1910:	0e 94 56 0d 	call	0x1aac	; 0x1aac <__ultoa_invert>
    1914:	f8 2e       	mov	r15, r24
    1916:	f2 18       	sub	r15, r2
    1918:	8f e7       	ldi	r24, 0x7F	; 127
    191a:	d8 2e       	mov	r13, r24
    191c:	d1 22       	and	r13, r17
    191e:	d6 fe       	sbrs	r13, 6
    1920:	0b c0       	rjmp	.+22     	; 0x1938 <vfprintf+0x2ce>
    1922:	5e ef       	ldi	r21, 0xFE	; 254
    1924:	d5 22       	and	r13, r21
    1926:	f9 14       	cp	r15, r9
    1928:	38 f4       	brcc	.+14     	; 0x1938 <vfprintf+0x2ce>
    192a:	d4 fe       	sbrs	r13, 4
    192c:	07 c0       	rjmp	.+14     	; 0x193c <vfprintf+0x2d2>
    192e:	d2 fc       	sbrc	r13, 2
    1930:	05 c0       	rjmp	.+10     	; 0x193c <vfprintf+0x2d2>
    1932:	8f ee       	ldi	r24, 0xEF	; 239
    1934:	d8 22       	and	r13, r24
    1936:	02 c0       	rjmp	.+4      	; 0x193c <vfprintf+0x2d2>
    1938:	1f 2d       	mov	r17, r15
    193a:	01 c0       	rjmp	.+2      	; 0x193e <vfprintf+0x2d4>
    193c:	19 2d       	mov	r17, r9
    193e:	d4 fe       	sbrs	r13, 4
    1940:	0d c0       	rjmp	.+26     	; 0x195c <vfprintf+0x2f2>
    1942:	fe 01       	movw	r30, r28
    1944:	ef 0d       	add	r30, r15
    1946:	f1 1d       	adc	r31, r1
    1948:	80 81       	ld	r24, Z
    194a:	80 33       	cpi	r24, 0x30	; 48
    194c:	19 f4       	brne	.+6      	; 0x1954 <vfprintf+0x2ea>
    194e:	99 ee       	ldi	r25, 0xE9	; 233
    1950:	d9 22       	and	r13, r25
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <vfprintf+0x2fa>
    1954:	1f 5f       	subi	r17, 0xFF	; 255
    1956:	d2 fe       	sbrs	r13, 2
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <vfprintf+0x2fa>
    195a:	03 c0       	rjmp	.+6      	; 0x1962 <vfprintf+0x2f8>
    195c:	8d 2d       	mov	r24, r13
    195e:	86 78       	andi	r24, 0x86	; 134
    1960:	09 f0       	breq	.+2      	; 0x1964 <vfprintf+0x2fa>
    1962:	1f 5f       	subi	r17, 0xFF	; 255
    1964:	0d 2d       	mov	r16, r13
    1966:	d3 fc       	sbrc	r13, 3
    1968:	14 c0       	rjmp	.+40     	; 0x1992 <vfprintf+0x328>
    196a:	d0 fe       	sbrs	r13, 0
    196c:	0f c0       	rjmp	.+30     	; 0x198c <vfprintf+0x322>
    196e:	1c 15       	cp	r17, r12
    1970:	10 f0       	brcs	.+4      	; 0x1976 <vfprintf+0x30c>
    1972:	9f 2c       	mov	r9, r15
    1974:	0b c0       	rjmp	.+22     	; 0x198c <vfprintf+0x322>
    1976:	9f 2c       	mov	r9, r15
    1978:	9c 0c       	add	r9, r12
    197a:	91 1a       	sub	r9, r17
    197c:	1c 2d       	mov	r17, r12
    197e:	06 c0       	rjmp	.+12     	; 0x198c <vfprintf+0x322>
    1980:	b3 01       	movw	r22, r6
    1982:	80 e2       	ldi	r24, 0x20	; 32
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    198a:	1f 5f       	subi	r17, 0xFF	; 255
    198c:	1c 15       	cp	r17, r12
    198e:	c0 f3       	brcs	.-16     	; 0x1980 <vfprintf+0x316>
    1990:	04 c0       	rjmp	.+8      	; 0x199a <vfprintf+0x330>
    1992:	1c 15       	cp	r17, r12
    1994:	10 f4       	brcc	.+4      	; 0x199a <vfprintf+0x330>
    1996:	c1 1a       	sub	r12, r17
    1998:	01 c0       	rjmp	.+2      	; 0x199c <vfprintf+0x332>
    199a:	cc 24       	eor	r12, r12
    199c:	04 ff       	sbrs	r16, 4
    199e:	10 c0       	rjmp	.+32     	; 0x19c0 <vfprintf+0x356>
    19a0:	b3 01       	movw	r22, r6
    19a2:	80 e3       	ldi	r24, 0x30	; 48
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    19aa:	02 ff       	sbrs	r16, 2
    19ac:	1e c0       	rjmp	.+60     	; 0x19ea <vfprintf+0x380>
    19ae:	01 fd       	sbrc	r16, 1
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <vfprintf+0x34e>
    19b2:	88 e7       	ldi	r24, 0x78	; 120
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <vfprintf+0x352>
    19b8:	88 e5       	ldi	r24, 0x58	; 88
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	b3 01       	movw	r22, r6
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <vfprintf+0x36e>
    19c0:	80 2f       	mov	r24, r16
    19c2:	86 78       	andi	r24, 0x86	; 134
    19c4:	91 f0       	breq	.+36     	; 0x19ea <vfprintf+0x380>
    19c6:	01 ff       	sbrs	r16, 1
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <vfprintf+0x364>
    19ca:	8b e2       	ldi	r24, 0x2B	; 43
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <vfprintf+0x366>
    19ce:	80 e2       	ldi	r24, 0x20	; 32
    19d0:	d7 fc       	sbrc	r13, 7
    19d2:	8d e2       	ldi	r24, 0x2D	; 45
    19d4:	b3 01       	movw	r22, r6
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    19dc:	06 c0       	rjmp	.+12     	; 0x19ea <vfprintf+0x380>
    19de:	b3 01       	movw	r22, r6
    19e0:	80 e3       	ldi	r24, 0x30	; 48
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    19e8:	9a 94       	dec	r9
    19ea:	f9 14       	cp	r15, r9
    19ec:	c0 f3       	brcs	.-16     	; 0x19de <vfprintf+0x374>
    19ee:	fa 94       	dec	r15
    19f0:	f1 01       	movw	r30, r2
    19f2:	ef 0d       	add	r30, r15
    19f4:	f1 1d       	adc	r31, r1
    19f6:	b3 01       	movw	r22, r6
    19f8:	80 81       	ld	r24, Z
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    1a00:	ff 20       	and	r15, r15
    1a02:	a9 f7       	brne	.-22     	; 0x19ee <vfprintf+0x384>
    1a04:	06 c0       	rjmp	.+12     	; 0x1a12 <vfprintf+0x3a8>
    1a06:	b3 01       	movw	r22, r6
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <fputc>
    1a10:	ca 94       	dec	r12
    1a12:	cc 20       	and	r12, r12
    1a14:	c1 f7       	brne	.-16     	; 0x1a06 <vfprintf+0x39c>
    1a16:	41 ce       	rjmp	.-894    	; 0x169a <vfprintf+0x30>
    1a18:	f3 01       	movw	r30, r6
    1a1a:	66 81       	ldd	r22, Z+6	; 0x06
    1a1c:	77 81       	ldd	r23, Z+7	; 0x07
    1a1e:	cb 01       	movw	r24, r22
    1a20:	2b 96       	adiw	r28, 0x0b	; 11
    1a22:	e2 e1       	ldi	r30, 0x12	; 18
    1a24:	0c 94 f7 0d 	jmp	0x1bee	; 0x1bee <__epilogue_restores__>

00001a28 <strnlen_P>:
    1a28:	fc 01       	movw	r30, r24
    1a2a:	05 90       	lpm	r0, Z+
    1a2c:	61 50       	subi	r22, 0x01	; 1
    1a2e:	70 40       	sbci	r23, 0x00	; 0
    1a30:	01 10       	cpse	r0, r1
    1a32:	d8 f7       	brcc	.-10     	; 0x1a2a <strnlen_P+0x2>
    1a34:	80 95       	com	r24
    1a36:	90 95       	com	r25
    1a38:	8e 0f       	add	r24, r30
    1a3a:	9f 1f       	adc	r25, r31
    1a3c:	08 95       	ret

00001a3e <strnlen>:
    1a3e:	fc 01       	movw	r30, r24
    1a40:	61 50       	subi	r22, 0x01	; 1
    1a42:	70 40       	sbci	r23, 0x00	; 0
    1a44:	01 90       	ld	r0, Z+
    1a46:	01 10       	cpse	r0, r1
    1a48:	d8 f7       	brcc	.-10     	; 0x1a40 <strnlen+0x2>
    1a4a:	80 95       	com	r24
    1a4c:	90 95       	com	r25
    1a4e:	8e 0f       	add	r24, r30
    1a50:	9f 1f       	adc	r25, r31
    1a52:	08 95       	ret

00001a54 <fputc>:
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	8c 01       	movw	r16, r24
    1a5e:	eb 01       	movw	r28, r22
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	81 ff       	sbrs	r24, 1
    1a64:	1b c0       	rjmp	.+54     	; 0x1a9c <fputc+0x48>
    1a66:	82 ff       	sbrs	r24, 2
    1a68:	0d c0       	rjmp	.+26     	; 0x1a84 <fputc+0x30>
    1a6a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a6c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a70:	9d 81       	ldd	r25, Y+5	; 0x05
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	64 f4       	brge	.+24     	; 0x1a90 <fputc+0x3c>
    1a78:	e8 81       	ld	r30, Y
    1a7a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a7c:	01 93       	st	Z+, r16
    1a7e:	f9 83       	std	Y+1, r31	; 0x01
    1a80:	e8 83       	st	Y, r30
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <fputc+0x3c>
    1a84:	e8 85       	ldd	r30, Y+8	; 0x08
    1a86:	f9 85       	ldd	r31, Y+9	; 0x09
    1a88:	80 2f       	mov	r24, r16
    1a8a:	09 95       	icall
    1a8c:	89 2b       	or	r24, r25
    1a8e:	31 f4       	brne	.+12     	; 0x1a9c <fputc+0x48>
    1a90:	8e 81       	ldd	r24, Y+6	; 0x06
    1a92:	9f 81       	ldd	r25, Y+7	; 0x07
    1a94:	01 96       	adiw	r24, 0x01	; 1
    1a96:	9f 83       	std	Y+7, r25	; 0x07
    1a98:	8e 83       	std	Y+6, r24	; 0x06
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <fputc+0x4c>
    1a9c:	0f ef       	ldi	r16, 0xFF	; 255
    1a9e:	1f ef       	ldi	r17, 0xFF	; 255
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret

00001aac <__ultoa_invert>:
    1aac:	fa 01       	movw	r30, r20
    1aae:	aa 27       	eor	r26, r26
    1ab0:	28 30       	cpi	r18, 0x08	; 8
    1ab2:	51 f1       	breq	.+84     	; 0x1b08 <__ultoa_invert+0x5c>
    1ab4:	20 31       	cpi	r18, 0x10	; 16
    1ab6:	81 f1       	breq	.+96     	; 0x1b18 <__ultoa_invert+0x6c>
    1ab8:	e8 94       	clt
    1aba:	6f 93       	push	r22
    1abc:	6e 7f       	andi	r22, 0xFE	; 254
    1abe:	6e 5f       	subi	r22, 0xFE	; 254
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	af 4f       	sbci	r26, 0xFF	; 255
    1ac8:	b1 e0       	ldi	r27, 0x01	; 1
    1aca:	3e d0       	rcall	.+124    	; 0x1b48 <__ultoa_invert+0x9c>
    1acc:	b4 e0       	ldi	r27, 0x04	; 4
    1ace:	3c d0       	rcall	.+120    	; 0x1b48 <__ultoa_invert+0x9c>
    1ad0:	67 0f       	add	r22, r23
    1ad2:	78 1f       	adc	r23, r24
    1ad4:	89 1f       	adc	r24, r25
    1ad6:	9a 1f       	adc	r25, r26
    1ad8:	a1 1d       	adc	r26, r1
    1ada:	68 0f       	add	r22, r24
    1adc:	79 1f       	adc	r23, r25
    1ade:	8a 1f       	adc	r24, r26
    1ae0:	91 1d       	adc	r25, r1
    1ae2:	a1 1d       	adc	r26, r1
    1ae4:	6a 0f       	add	r22, r26
    1ae6:	71 1d       	adc	r23, r1
    1ae8:	81 1d       	adc	r24, r1
    1aea:	91 1d       	adc	r25, r1
    1aec:	a1 1d       	adc	r26, r1
    1aee:	20 d0       	rcall	.+64     	; 0x1b30 <__ultoa_invert+0x84>
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <__ultoa_invert+0x48>
    1af2:	68 94       	set
    1af4:	3f 91       	pop	r19
    1af6:	2a e0       	ldi	r18, 0x0A	; 10
    1af8:	26 9f       	mul	r18, r22
    1afa:	11 24       	eor	r1, r1
    1afc:	30 19       	sub	r19, r0
    1afe:	30 5d       	subi	r19, 0xD0	; 208
    1b00:	31 93       	st	Z+, r19
    1b02:	de f6       	brtc	.-74     	; 0x1aba <__ultoa_invert+0xe>
    1b04:	cf 01       	movw	r24, r30
    1b06:	08 95       	ret
    1b08:	46 2f       	mov	r20, r22
    1b0a:	47 70       	andi	r20, 0x07	; 7
    1b0c:	40 5d       	subi	r20, 0xD0	; 208
    1b0e:	41 93       	st	Z+, r20
    1b10:	b3 e0       	ldi	r27, 0x03	; 3
    1b12:	0f d0       	rcall	.+30     	; 0x1b32 <__ultoa_invert+0x86>
    1b14:	c9 f7       	brne	.-14     	; 0x1b08 <__ultoa_invert+0x5c>
    1b16:	f6 cf       	rjmp	.-20     	; 0x1b04 <__ultoa_invert+0x58>
    1b18:	46 2f       	mov	r20, r22
    1b1a:	4f 70       	andi	r20, 0x0F	; 15
    1b1c:	40 5d       	subi	r20, 0xD0	; 208
    1b1e:	4a 33       	cpi	r20, 0x3A	; 58
    1b20:	18 f0       	brcs	.+6      	; 0x1b28 <__ultoa_invert+0x7c>
    1b22:	49 5d       	subi	r20, 0xD9	; 217
    1b24:	31 fd       	sbrc	r19, 1
    1b26:	40 52       	subi	r20, 0x20	; 32
    1b28:	41 93       	st	Z+, r20
    1b2a:	02 d0       	rcall	.+4      	; 0x1b30 <__ultoa_invert+0x84>
    1b2c:	a9 f7       	brne	.-22     	; 0x1b18 <__ultoa_invert+0x6c>
    1b2e:	ea cf       	rjmp	.-44     	; 0x1b04 <__ultoa_invert+0x58>
    1b30:	b4 e0       	ldi	r27, 0x04	; 4
    1b32:	a6 95       	lsr	r26
    1b34:	97 95       	ror	r25
    1b36:	87 95       	ror	r24
    1b38:	77 95       	ror	r23
    1b3a:	67 95       	ror	r22
    1b3c:	ba 95       	dec	r27
    1b3e:	c9 f7       	brne	.-14     	; 0x1b32 <__ultoa_invert+0x86>
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	61 05       	cpc	r22, r1
    1b44:	71 05       	cpc	r23, r1
    1b46:	08 95       	ret
    1b48:	9b 01       	movw	r18, r22
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	0a 2e       	mov	r0, r26
    1b4e:	06 94       	lsr	r0
    1b50:	57 95       	ror	r21
    1b52:	47 95       	ror	r20
    1b54:	37 95       	ror	r19
    1b56:	27 95       	ror	r18
    1b58:	ba 95       	dec	r27
    1b5a:	c9 f7       	brne	.-14     	; 0x1b4e <__ultoa_invert+0xa2>
    1b5c:	62 0f       	add	r22, r18
    1b5e:	73 1f       	adc	r23, r19
    1b60:	84 1f       	adc	r24, r20
    1b62:	95 1f       	adc	r25, r21
    1b64:	a0 1d       	adc	r26, r0
    1b66:	08 95       	ret

00001b68 <__divmodhi4>:
    1b68:	97 fb       	bst	r25, 7
    1b6a:	09 2e       	mov	r0, r25
    1b6c:	07 26       	eor	r0, r23
    1b6e:	0a d0       	rcall	.+20     	; 0x1b84 <__divmodhi4_neg1>
    1b70:	77 fd       	sbrc	r23, 7
    1b72:	04 d0       	rcall	.+8      	; 0x1b7c <__divmodhi4_neg2>
    1b74:	0c d0       	rcall	.+24     	; 0x1b8e <__udivmodhi4>
    1b76:	06 d0       	rcall	.+12     	; 0x1b84 <__divmodhi4_neg1>
    1b78:	00 20       	and	r0, r0
    1b7a:	1a f4       	brpl	.+6      	; 0x1b82 <__divmodhi4_exit>

00001b7c <__divmodhi4_neg2>:
    1b7c:	70 95       	com	r23
    1b7e:	61 95       	neg	r22
    1b80:	7f 4f       	sbci	r23, 0xFF	; 255

00001b82 <__divmodhi4_exit>:
    1b82:	08 95       	ret

00001b84 <__divmodhi4_neg1>:
    1b84:	f6 f7       	brtc	.-4      	; 0x1b82 <__divmodhi4_exit>
    1b86:	90 95       	com	r25
    1b88:	81 95       	neg	r24
    1b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b8c:	08 95       	ret

00001b8e <__udivmodhi4>:
    1b8e:	aa 1b       	sub	r26, r26
    1b90:	bb 1b       	sub	r27, r27
    1b92:	51 e1       	ldi	r21, 0x11	; 17
    1b94:	07 c0       	rjmp	.+14     	; 0x1ba4 <__udivmodhi4_ep>

00001b96 <__udivmodhi4_loop>:
    1b96:	aa 1f       	adc	r26, r26
    1b98:	bb 1f       	adc	r27, r27
    1b9a:	a6 17       	cp	r26, r22
    1b9c:	b7 07       	cpc	r27, r23
    1b9e:	10 f0       	brcs	.+4      	; 0x1ba4 <__udivmodhi4_ep>
    1ba0:	a6 1b       	sub	r26, r22
    1ba2:	b7 0b       	sbc	r27, r23

00001ba4 <__udivmodhi4_ep>:
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	5a 95       	dec	r21
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <__udivmodhi4_loop>
    1bac:	80 95       	com	r24
    1bae:	90 95       	com	r25
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	08 95       	ret

00001bb6 <__prologue_saves__>:
    1bb6:	2f 92       	push	r2
    1bb8:	3f 92       	push	r3
    1bba:	4f 92       	push	r4
    1bbc:	5f 92       	push	r5
    1bbe:	6f 92       	push	r6
    1bc0:	7f 92       	push	r7
    1bc2:	8f 92       	push	r8
    1bc4:	9f 92       	push	r9
    1bc6:	af 92       	push	r10
    1bc8:	bf 92       	push	r11
    1bca:	cf 92       	push	r12
    1bcc:	df 92       	push	r13
    1bce:	ef 92       	push	r14
    1bd0:	ff 92       	push	r15
    1bd2:	0f 93       	push	r16
    1bd4:	1f 93       	push	r17
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	ca 1b       	sub	r28, r26
    1be0:	db 0b       	sbc	r29, r27
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	de bf       	out	0x3e, r29	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	cd bf       	out	0x3d, r28	; 61
    1bec:	09 94       	ijmp

00001bee <__epilogue_restores__>:
    1bee:	2a 88       	ldd	r2, Y+18	; 0x12
    1bf0:	39 88       	ldd	r3, Y+17	; 0x11
    1bf2:	48 88       	ldd	r4, Y+16	; 0x10
    1bf4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bf6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bf8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bfa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bfc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bfe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c00:	b9 84       	ldd	r11, Y+9	; 0x09
    1c02:	c8 84       	ldd	r12, Y+8	; 0x08
    1c04:	df 80       	ldd	r13, Y+7	; 0x07
    1c06:	ee 80       	ldd	r14, Y+6	; 0x06
    1c08:	fd 80       	ldd	r15, Y+5	; 0x05
    1c0a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c0c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c0e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c10:	b9 81       	ldd	r27, Y+1	; 0x01
    1c12:	ce 0f       	add	r28, r30
    1c14:	d1 1d       	adc	r29, r1
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	ed 01       	movw	r28, r26
    1c22:	08 95       	ret

00001c24 <_exit>:
    1c24:	f8 94       	cli

00001c26 <__stop_program>:
    1c26:	ff cf       	rjmp	.-2      	; 0x1c26 <__stop_program>
