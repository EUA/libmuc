
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000019c0  00001a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  00800142  00001a02  00001a76  2**0
                  ALLOC
  3 .stab         00004f2c  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002412  00000000  00000000  000069a4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__ctors_end>
       4:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
       8:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__vector_2>
       c:	0c 94 d1 08 	jmp	0x11a2	; 0x11a2 <__vector_3>
      10:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      14:	0c 94 66 06 	jmp	0xccc	; 0xccc <__vector_5>
      18:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_6>
      1c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_7>
      20:	0c 94 fb 05 	jmp	0xbf6	; 0xbf6 <__vector_8>
      24:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__vector_9>
      28:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      2c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      30:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      34:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      38:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      3c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      40:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      44:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      48:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      4c:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_19>
      50:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      54:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>
      58:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__bad_interrupt>

0000005c <__c.1747>:
      5c:	0a 0a 49 6e 76 61 6c 69 64 20 49 6e 74 65 72 75     ..Invalid Interu
      6c:	70 74 20 45 6e 61 62 6c 65 64 0a 00                 pt Enabled..

00000078 <__c.1702>:
      78:	0a 49 6e 69 74 3a 20 44 6f 6e 65 0a 0a 00           .Init: Done...

00000086 <__c.1824>:
      86:	09 5b 64 6f 6e 65 5d 00                             .[done].

0000008e <__c.1822>:
      8e:	0a 61 64 63 3a 20 69 6e 69 74 3a 20 73 65 74 75     .adc: init: setu
      9e:	70 20 63 6f 6e 76 65 72 74 69 6f 6e 73 00           p convertions.

000000ac <__c.1820>:
      ac:	0a 61 64 63 3a 20 69 6e 69 74 00                    .adc: init.

000000b7 <__c.1813>:
      b7:	0a 5b 64 65 62 75 67 5d 20 57 61 72 6e 69 6e 67     .[debug] Warning
      c7:	3a 20 75 6e 69 6d 70 6c 69 6d 65 6e 74 65 64 20     : unimplimented 
      d7:	66 75 6e 63 74 69 6f 6e 20 61 64 63 5f 63 61 6c     function adc_cal
      e7:	69 62 72 61 74 65 5f 73 74 6f 72 65 20 63 61 6c     ibrate_store cal
      f7:	6c 65 64 00                                         led.

000000fb <__c.1756>:
      fb:	0a 5b 64 65 62 75 67 5d 20 41 44 43 20 4f 46 46     .[debug] ADC OFF
     10b:	53 45 54 53 3a 20 00                                SETS: .

00000112 <__c.1743>:
     112:	0a 5b 64 65 62 75 67 5d 20 46 49 58 45 44 20 41     .[debug] FIXED A
     122:	44 43 3a 20 00                                      DC: .

00000127 <__c.1737>:
     127:	0a 5b 64 65 62 75 67 5d 20 20 20 52 41 57 20 41     .[debug]   RAW A
     137:	44 43 3a 20 00                                      DC: .

0000013c <__c.1601>:
     13c:	0a 75 73 61 72 74 3a 20 69 6e 69 74 20 75 73 61     .usart: init usa
     14c:	72 74 30 09 5b 64 6f 6e 65 5d 00                    rt0.[done].

00000157 <__c.1666>:
     157:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 09 5b     .timers: init:.[
     167:	64 6f 6e 65 5d 00                                   done].

0000016d <__c.1664>:
     16d:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 73     .timers: init: s
     17d:	74 61 72 74 2e 00                                   tart..

00000183 <__c.1585>:
     183:	09 5b 64 6f 6e 65 5d 00                             .[done].

0000018b <__c.1578>:
     18b:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 74     .timers: init: t
     19b:	69 6d 65 72 31 00                                   imer1.

000001a1 <__c.1568>:
     1a1:	0a 4d 6f 64 65 3a 20 25 64 00                       .Mode: %d.

000001ab <__c.1529>:
     1ab:	09 5b 64 6f 6e 65 5d 00                             .[done].

000001b3 <__c.1521>:
     1b3:	0a 74 69 6d 65 72 73 3a 20 69 6e 69 74 3a 20 74     .timers: init: t
     1c3:	69 6d 65 72 32 00                                   imer2.

000001c9 <__c.1685>:
     1c9:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     1d9:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     1e9:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

000001f7 <__c.1670>:
     1f7:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     207:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     217:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

00000225 <__c.1648>:
     225:	0a 5b 65 72 72 6f 72 5d 20 4d 6f 74 6f 72 3a 20     .[error] Motor: 
     235:	49 6e 76 61 6c 69 64 20 4d 6f 74 6f 72 20 4e 75     Invalid Motor Nu
     245:	6d 62 65 72 3a 20 25 64 20 5b 25 73 5d 00           mber: %d [%s].

00000253 <__c.1568>:
     253:	0a 5b 64 65 62 75 67 5d 20 50 42 3f 20 52 65 6c     .[debug] PB? Rel
     263:	65 61 73 65 64 00                                   eased.

00000269 <__c.1551>:
     269:	0a 5b 64 65 62 75 67 5d 20 50 45 3f 20 52 65 6c     .[debug] PE? Rel
     279:	65 61 73 65 64 00                                   eased.

0000027f <__c.1549>:
     27f:	0a 43 75 72 72 65 6e 74 20 4d 6f 64 65 20 28 46     .Current Mode (F
     28f:	2f 57 29 3d 20 25 64 00                             /W)= %d.

00000297 <__c.1547>:
     297:	0a 43 75 72 72 65 6e 74 20 4d 6f 64 65 20 28 54     .Current Mode (T
     2a7:	2f 57 29 20 3d 20 25 64 00                          /W) = %d.

000002b0 <__ctors_end>:
     2b0:	11 24       	eor	r1, r1
     2b2:	1f be       	out	0x3f, r1	; 63
     2b4:	cf ef       	ldi	r28, 0xFF	; 255
     2b6:	d4 e0       	ldi	r29, 0x04	; 4
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	cd bf       	out	0x3d, r28	; 61

000002bc <__do_copy_data>:
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	a0 e0       	ldi	r26, 0x00	; 0
     2c0:	b1 e0       	ldi	r27, 0x01	; 1
     2c2:	e0 ec       	ldi	r30, 0xC0	; 192
     2c4:	f9 e1       	ldi	r31, 0x19	; 25
     2c6:	02 c0       	rjmp	.+4      	; 0x2cc <.do_copy_data_start>

000002c8 <.do_copy_data_loop>:
     2c8:	05 90       	lpm	r0, Z+
     2ca:	0d 92       	st	X+, r0

000002cc <.do_copy_data_start>:
     2cc:	a2 34       	cpi	r26, 0x42	; 66
     2ce:	b1 07       	cpc	r27, r17
     2d0:	d9 f7       	brne	.-10     	; 0x2c8 <.do_copy_data_loop>

000002d2 <__do_clear_bss>:
     2d2:	11 e0       	ldi	r17, 0x01	; 1
     2d4:	a2 e4       	ldi	r26, 0x42	; 66
     2d6:	b1 e0       	ldi	r27, 0x01	; 1
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <.do_clear_bss_start>

000002da <.do_clear_bss_loop>:
     2da:	1d 92       	st	X+, r1

000002dc <.do_clear_bss_start>:
     2dc:	ab 3e       	cpi	r26, 0xEB	; 235
     2de:	b1 07       	cpc	r27, r17
     2e0:	e1 f7       	brne	.-8      	; 0x2da <.do_clear_bss_loop>
     2e2:	0e 94 c4 01 	call	0x388	; 0x388 <main>
     2e6:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <_exit>

000002ea <__bad_interrupt>:
     2ea:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_default>

000002ee <clock_init>:
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	20 e8       	ldi	r18, 0x80	; 128
     2f4:	0f b6       	in	r0, 0x3f	; 63
     2f6:	f8 94       	cli
     2f8:	20 93 61 00 	sts	0x0061, r18
     2fc:	80 93 61 00 	sts	0x0061, r24
     300:	0f be       	out	0x3f, r0	; 63
	#else
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}
     302:	08 95       	ret

00000304 <__vector_default>:
			++sp;
		}
	}	
} 
		
ISR(BADISR_vect) {
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	8f 93       	push	r24
     310:	9f 93       	push	r25
	fprintf_P(stderr,PSTR("\n\nInvalid Interupt Enabled\n"));
     312:	8c e5       	ldi	r24, 0x5C	; 92
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9f 93       	push	r25
     318:	8f 93       	push	r24
     31a:	80 91 e9 01 	lds	r24, 0x01E9
     31e:	90 91 ea 01 	lds	r25, 0x01EA
     322:	9f 93       	push	r25
     324:	8f 93       	push	r24
     326:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
}
     332:	9f 91       	pop	r25
     334:	8f 91       	pop	r24
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <init>:
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
	cli(); // Starts with interrupts disabled?
     340:	f8 94       	cli
	power_all_disable();
     342:	e4 e6       	ldi	r30, 0x64	; 100
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	8f 61       	ori	r24, 0x1F	; 31
     34a:	80 83       	st	Z, r24
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	20 e8       	ldi	r18, 0x80	; 128
     352:	0f b6       	in	r0, 0x3f	; 63
     354:	f8 94       	cli
     356:	20 93 61 00 	sts	0x0061, r18
     35a:	80 93 61 00 	sts	0x0061, r24
     35e:	0f be       	out	0x3f, r0	; 63

void init(void) {
	cli(); // Starts with interrupts disabled?
	power_all_disable();
	clock_init();
	joy_init();
     360:	0e 94 bc 08 	call	0x1178	; 0x1178 <joy_init>
	usart_init();
     364:	0e 94 ca 05 	call	0xb94	; 0xb94 <usart_init>
	adc_init();
     368:	0e 94 79 02 	call	0x4f2	; 0x4f2 <adc_init>
	timers_init();
     36c:	0e 94 ee 06 	call	0xddc	; 0xddc <timers_init>
	motors_init();
     370:	0e 94 a3 08 	call	0x1146	; 0x1146 <motors_init>
	sei();
     374:	78 94       	sei
	#ifdef debug
	printf_P(PSTR("\nInit: Done\n\n"));
     376:	88 e7       	ldi	r24, 0x78	; 120
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	9f 93       	push	r25
     37c:	8f 93       	push	r24
     37e:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <printf_P>
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
	#endif
}
     386:	08 95       	ret

00000388 <main>:



int main(void) {
	init();
     388:	0e 94 a0 01 	call	0x340	; 0x340 <init>
	c_mode=WAIT;
     38c:	10 92 d2 01 	sts	0x01D2, r1
	initial=true;
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	80 93 e4 01 	sts	0x01E4, r24
     396:	ff cf       	rjmp	.-2      	; 0x396 <main+0xe>

00000398 <print_bin>:
	#endif
	
	//OSCAL set by the bootloader.
}

void  print_bin(uint8_t inp) {
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	c7 e0       	ldi	r28, 0x07	; 7
     3a6:	d0 e0       	ldi	r29, 0x00	; 0
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	e9 2e       	mov	r14, r25
     3ac:	f1 2c       	mov	r15, r1
     3ae:	08 2f       	mov	r16, r24
     3b0:	10 e0       	ldi	r17, 0x00	; 0
     3b2:	c7 01       	movw	r24, r14
     3b4:	0c 2e       	mov	r0, r28
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <print_bin+0x24>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <print_bin+0x20>
     3c0:	80 23       	and	r24, r16
     3c2:	91 23       	and	r25, r17
     3c4:	0c 2e       	mov	r0, r28
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <print_bin+0x34>
     3c8:	95 95       	asr	r25
     3ca:	87 95       	ror	r24
     3cc:	0a 94       	dec	r0
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <print_bin+0x30>
     3d0:	c0 96       	adiw	r24, 0x30	; 48
     3d2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <putchar>
     3d6:	21 97       	sbiw	r28, 0x01	; 1
	
	//OSCAL set by the bootloader.
}

void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	cf 3f       	cpi	r28, 0xFF	; 255
     3dc:	d8 07       	cpc	r29, r24
     3de:	49 f7       	brne	.-46     	; 0x3b2 <print_bin+0x1a>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	1f 91       	pop	r17
     3e6:	0f 91       	pop	r16
     3e8:	ff 90       	pop	r15
     3ea:	ef 90       	pop	r14
     3ec:	08 95       	ret

000003ee <copysign>:
     The copysign() function returns \a __x but with the sign of \a __y.
     They work even if \a __x or \a __y are NaN or zero.
 */
__ATTR_CONST__ extern inline double copysign (double __x, double __y)
{
    __asm__ (
     3ee:	57 fb       	bst	r21, 7
     3f0:	97 f9       	bld	r25, 7
	"bst	%D2, 7	\n\t"
	"bld	%D0, 7	"
	: "=r" (__x)
	: "0" (__x), "r" (__y) );
    return __x;
}
     3f2:	08 95       	ret

000003f4 <isfinite>:
     not plus or minus infinity, and not NaN.
  */
__ATTR_CONST__ extern inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
     3f4:	68 2f       	mov	r22, r24
     3f6:	66 0f       	add	r22, r22
     3f8:	69 2f       	mov	r22, r25
     3fa:	66 1f       	adc	r22, r22
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	6f 3f       	cpi	r22, 0xFF	; 255
     402:	11 f0       	breq	.+4      	; 0x408 <isfinite+0x14>
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	30 e0       	ldi	r19, 0x00	; 0
	"mov	%0, %D1		\n\t"
	"rol	%0		"
	: "=r" (__exp)
	: "r" (__x)	);
    return __exp != 0xff;
}
     408:	c9 01       	movw	r24, r18
     40a:	08 95       	ret

0000040c <max>:
#include "joystick.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
     40c:	86 2f       	mov	r24, r22


void clock_init(void) {
	
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
     40e:	08 95       	ret

00000410 <adc_get_val>:
	for(int8_t j=7; j>=0; --j) {
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
     410:	e8 2f       	mov	r30, r24
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	ee 0f       	add	r30, r30
     416:	ff 1f       	adc	r31, r31
     418:	df 01       	movw	r26, r30
     41a:	a6 53       	subi	r26, 0x36	; 54
     41c:	be 4f       	sbci	r27, 0xFE	; 254
     41e:	ed 52       	subi	r30, 0x2D	; 45
     420:	fe 4f       	sbci	r31, 0xFE	; 254
     422:	20 81       	ld	r18, Z
     424:	31 81       	ldd	r19, Z+1	; 0x01
     426:	8d 91       	ld	r24, X+
     428:	9c 91       	ld	r25, X
     42a:	28 0f       	add	r18, r24
     42c:	39 1f       	adc	r19, r25
	cli(); // Starts with interrupts disabled?
     42e:	c9 01       	movw	r24, r18
     430:	08 95       	ret

00000432 <adc_set_channel>:
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
				//lf_full_speed();
				dir=FWD;
			}
			*/

     432:	ac e7       	ldi	r26, 0x7C	; 124
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	9c 91       	ld	r25, X
     438:	ee e0       	ldi	r30, 0x0E	; 14
     43a:	f1 e0       	ldi	r31, 0x01	; 1
     43c:	e8 0f       	add	r30, r24
     43e:	f1 1d       	adc	r31, r1
     440:	90 7e       	andi	r25, 0xE0	; 224
     442:	80 81       	ld	r24, Z
     444:	98 2b       	or	r25, r24
     446:	9c 93       	st	X, r25
			_delay_ms(200);
			// do at every adc calc or pwm vector.
		}
     448:	08 95       	ret

0000044a <__vector_19>:
		else if	(c_mode==TEST) {
			if (initial) {
				motor_mode(MOTOR_L_FWD,LEFT);
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	8f 93       	push	r24
     45c:	9f 93       	push	r25
     45e:	af 93       	push	r26
     460:	bf 93       	push	r27
     462:	ef 93       	push	r30
     464:	ff 93       	push	r31
				motor_mode(MOTOR_R_FWD,RIGHT);
				initial=false;
			}
     466:	40 91 78 00 	lds	r20, 0x0078
			static uint16_t sp;
     46a:	30 91 79 00 	lds	r19, 0x0079
			
			motor_set_speed(sp,LEFT);
			motor_set_speed(sp,RIGHT);
     46e:	80 91 42 01 	lds	r24, 0x0142
     472:	8f 5f       	subi	r24, 0xFF	; 255
     474:	80 93 42 01 	sts	0x0142, r24
			_delay_ms(2);
			//if (!(sp%0x100))
			//	printf("\nsp=%x",sp);
     478:	20 91 db 01 	lds	r18, 0x01DB
     47c:	22 23       	and	r18, r18
     47e:	11 f4       	brne	.+4      	; 0x484 <__vector_19+0x3a>
     480:	e3 e0       	ldi	r30, 0x03	; 3
     482:	02 c0       	rjmp	.+4      	; 0x488 <__vector_19+0x3e>
			++sp;
     484:	e2 2f       	mov	r30, r18
     486:	e1 50       	subi	r30, 0x01	; 1
		}
	}	
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	ee 0f       	add	r30, r30
     48c:	ff 1f       	adc	r31, r31
     48e:	df 01       	movw	r26, r30
     490:	a6 53       	subi	r26, 0x36	; 54
     492:	be 4f       	sbci	r27, 0xFE	; 254
     494:	93 2f       	mov	r25, r19
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	84 0f       	add	r24, r20
     49a:	91 1d       	adc	r25, r1
     49c:	8d 93       	st	X+, r24
     49e:	9c 93       	st	X, r25
} 
     4a0:	e4 52       	subi	r30, 0x24	; 36
     4a2:	fe 4f       	sbci	r31, 0xFE	; 254
     4a4:	80 81       	ld	r24, Z
     4a6:	91 81       	ldd	r25, Z+1	; 0x01
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	91 83       	std	Z+1, r25	; 0x01
     4ac:	80 83       	st	Z, r24
		
ISR(BADISR_vect) {
	fprintf_P(stderr,PSTR("\n\nInvalid Interupt Enabled\n"));
     4ae:	82 2f       	mov	r24, r18
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	80 93 db 01 	sts	0x01DB, r24
     4b6:	84 30       	cpi	r24, 0x04	; 4
     4b8:	10 f0       	brcs	.+4      	; 0x4be <__vector_19+0x74>
     4ba:	10 92 db 01 	sts	0x01DB, r1
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
				//lf_full_speed();
				dir=FWD;
			}
			*/

     4be:	80 91 7c 00 	lds	r24, 0x007C
     4c2:	e0 91 db 01 	lds	r30, 0x01DB
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	e2 5f       	subi	r30, 0xF2	; 242
     4ca:	fe 4f       	sbci	r31, 0xFE	; 254
     4cc:	80 7e       	andi	r24, 0xE0	; 224
     4ce:	90 81       	ld	r25, Z
     4d0:	89 2b       	or	r24, r25
     4d2:	80 93 7c 00 	sts	0x007C, r24
     4d6:	ff 91       	pop	r31
     4d8:	ef 91       	pop	r30
     4da:	bf 91       	pop	r27
     4dc:	af 91       	pop	r26
     4de:	9f 91       	pop	r25
     4e0:	8f 91       	pop	r24
     4e2:	4f 91       	pop	r20
     4e4:	3f 91       	pop	r19
     4e6:	2f 91       	pop	r18
     4e8:	0f 90       	pop	r0
     4ea:	0f be       	out	0x3f, r0	; 63
     4ec:	0f 90       	pop	r0
     4ee:	1f 90       	pop	r1
     4f0:	18 95       	reti

000004f2 <adc_init>:
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
				}
			}
     4f2:	ef 92       	push	r14
     4f4:	ff 92       	push	r15
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
			
			#ifdef debug
     4fa:	8c ea       	ldi	r24, 0xAC	; 172
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9f 93       	push	r25
     500:	8f 93       	push	r24
     502:	80 91 e9 01 	lds	r24, 0x01E9
     506:	90 91 ea 01 	lds	r25, 0x01EA
     50a:	9f 93       	push	r25
     50c:	8f 93       	push	r24
     50e:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
     512:	e4 e6       	ldi	r30, 0x64	; 100
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	8e 7f       	andi	r24, 0xFE	; 254
     51a:	80 83       	st	Z, r24
			#endif

			int8_t turn_i;			
     51c:	0c e7       	ldi	r16, 0x7C	; 124
     51e:	10 e0       	ldi	r17, 0x00	; 0
     520:	f8 01       	movw	r30, r16
     522:	80 81       	ld	r24, Z
     524:	80 64       	ori	r24, 0x40	; 64
     526:	80 83       	st	Z, r24
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
     528:	80 81       	ld	r24, Z
     52a:	8f 77       	andi	r24, 0x7F	; 127
     52c:	80 83       	st	Z, r24
			
			// Correction needed for even numbers of sensors.
			#if (!(channel_amt%2))
			if (turn_i>0)
				++turn_i;	
     52e:	2a e7       	ldi	r18, 0x7A	; 122
     530:	e2 2e       	mov	r14, r18
     532:	f1 2c       	mov	r15, r1
     534:	f7 01       	movw	r30, r14
     536:	80 81       	ld	r24, Z
     538:	88 6a       	ori	r24, 0xA8	; 168
     53a:	80 83       	st	Z, r24
			#endif
     53c:	80 81       	ld	r24, Z
     53e:	88 7f       	andi	r24, 0xF8	; 248
     540:	86 60       	ori	r24, 0x06	; 6
     542:	80 83       	st	Z, r24

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
			
     544:	eb e7       	ldi	r30, 0x7B	; 123
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	80 68       	ori	r24, 0x80	; 128
     54c:	80 83       	st	Z, r24
			
     54e:	80 81       	ld	r24, Z
     550:	88 7f       	andi	r24, 0xF8	; 248
     552:	80 83       	st	Z, r24
			//0=LEFT, 3=RIGHT
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
     554:	ee e7       	ldi	r30, 0x7E	; 126
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	80 6f       	ori	r24, 0xF0	; 240
     55c:	80 83       	st	Z, r24
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
     55e:	83 b7       	in	r24, 0x33	; 51
     560:	81 7f       	andi	r24, 0xF1	; 241
     562:	82 60       	ori	r24, 0x02	; 2
     564:	83 bf       	out	0x33, r24	; 51
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
     566:	8e e8       	ldi	r24, 0x8E	; 142
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	80 91 e9 01 	lds	r24, 0x01E9
     572:	90 91 ea 01 	lds	r25, 0x01EA
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
     57e:	20 91 db 01 	lds	r18, 0x01DB
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
				//lf_full_speed();
				dir=FWD;
			}
			*/

     582:	f8 01       	movw	r30, r16
     584:	80 81       	ld	r24, Z
     586:	ae e0       	ldi	r26, 0x0E	; 14
     588:	b1 e0       	ldi	r27, 0x01	; 1
     58a:	fd 01       	movw	r30, r26
     58c:	e2 0f       	add	r30, r18
     58e:	f1 1d       	adc	r31, r1
     590:	80 7e       	andi	r24, 0xE0	; 224
     592:	90 81       	ld	r25, Z
     594:	89 2b       	or	r24, r25
     596:	f8 01       	movw	r30, r16
     598:	80 83       	st	Z, r24
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
     59a:	f7 01       	movw	r30, r14
     59c:	80 81       	ld	r24, Z
     59e:	80 64       	ori	r24, 0x40	; 64
     5a0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	01 97       	sbiw	r24, 0x01	; 1
     5a8:	f1 f7       	brne	.-4      	; 0x5a6 <__stack+0xa7>
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
			}
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
     5aa:	2f 5f       	subi	r18, 0xFF	; 255
     5ac:	20 93 db 01 	sts	0x01DB, r18
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
				//lf_full_speed();
				dir=FWD;
			}
			*/

     5b0:	f8 01       	movw	r30, r16
     5b2:	80 81       	ld	r24, Z
     5b4:	a2 0f       	add	r26, r18
     5b6:	b1 1d       	adc	r27, r1
     5b8:	80 7e       	andi	r24, 0xE0	; 224
     5ba:	9c 91       	ld	r25, X
     5bc:	89 2b       	or	r24, r25
     5be:	80 83       	st	Z, r24
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
     5c0:	86 e8       	ldi	r24, 0x86	; 134
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	9f 93       	push	r25
     5c6:	8f 93       	push	r24
     5c8:	80 91 e9 01 	lds	r24, 0x01E9
     5cc:	90 91 ea 01 	lds	r25, 0x01EA
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     5d8:	8d b7       	in	r24, 0x3d	; 61
     5da:	9e b7       	in	r25, 0x3e	; 62
     5dc:	0c 96       	adiw	r24, 0x0c	; 12
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	9e bf       	out	0x3e, r25	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	8d bf       	out	0x3d, r24	; 61
				dir=FWD;
			}
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	08 95       	ret

000005f2 <adc_calibrate_store>:
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};

			uint16_t adc_vc[channel_amt];
			for (uint8_t i=0;i<channel_amt;++i) {
				adc_vc[i]=adc_get_val(i);
     5f2:	87 eb       	ldi	r24, 0xB7	; 183
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9f 93       	push	r25
     5f8:	8f 93       	push	r24
     5fa:	80 91 e9 01 	lds	r24, 0x01E9
     5fe:	90 91 ea 01 	lds	r25, 0x01EA
     602:	9f 93       	push	r25
     604:	8f 93       	push	r24
     606:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
			}
     612:	08 95       	ret

00000614 <adc_calibrate_clear>:
			
			uint8_t  maxi=channel_amt;
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
     614:	88 e0       	ldi	r24, 0x08	; 8
     616:	e3 ed       	ldi	r30, 0xD3	; 211
     618:	f1 e0       	ldi	r31, 0x01	; 1
     61a:	df 01       	movw	r26, r30
     61c:	1d 92       	st	X+, r1
     61e:	8a 95       	dec	r24
     620:	e9 f7       	brne	.-6      	; 0x61c <adc_calibrate_clear+0x8>
					maxi=i;
     622:	10 92 43 01 	sts	0x0143, r1
					maxv=adc_vc[i];
     626:	08 95       	ret

00000628 <adc_calibrate_update>:

void init(void) {
	cli(); // Starts with interrupts disabled?
	power_all_disable();
	clock_init();
	joy_init();
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	60 97       	sbiw	r28, 0x10	; 16
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
	usart_init();
	adc_init();
	timers_init();
     648:	de 01       	movw	r26, r28
     64a:	19 96       	adiw	r26, 0x09	; 9
     64c:	ea ec       	ldi	r30, 0xCA	; 202
     64e:	f1 e0       	ldi	r31, 0x01	; 1
     650:	88 e0       	ldi	r24, 0x08	; 8
     652:	01 90       	ld	r0, Z+
     654:	0d 92       	st	X+, r0
     656:	81 50       	subi	r24, 0x01	; 1
     658:	e1 f7       	brne	.-8      	; 0x652 <adc_calibrate_update+0x2a>



int main(void) {
	init();
	c_mode=WAIT;
     65a:	49 85       	ldd	r20, Y+9	; 0x09
     65c:	5a 85       	ldd	r21, Y+10	; 0x0a
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	8e 01       	movw	r16, r28
     664:	0f 5f       	subi	r16, 0xFF	; 255
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	be 01       	movw	r22, r28
     66a:	67 5f       	subi	r22, 0xF7	; 247
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	d8 01       	movw	r26, r16
     670:	a2 0f       	add	r26, r18
     672:	b3 1f       	adc	r27, r19
     674:	fb 01       	movw	r30, r22
     676:	e2 0f       	add	r30, r18
     678:	f3 1f       	adc	r31, r19
     67a:	80 81       	ld	r24, Z
     67c:	91 81       	ldd	r25, Z+1	; 0x01
     67e:	fa 01       	movw	r30, r20
     680:	e8 1b       	sub	r30, r24
     682:	f9 0b       	sbc	r31, r25
     684:	ed 93       	st	X+, r30
     686:	fc 93       	st	X, r31
     688:	2e 5f       	subi	r18, 0xFE	; 254
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
}



int main(void) {
	init();
     68c:	28 30       	cpi	r18, 0x08	; 8
     68e:	31 05       	cpc	r19, r1
     690:	71 f7       	brne	.-36     	; 0x66e <adc_calibrate_update+0x46>
	c_mode=WAIT;
	initial=true;
	
		
     692:	80 91 43 01 	lds	r24, 0x0143
     696:	9e 01       	movw	r18, r28
     698:	2f 5f       	subi	r18, 0xFF	; 255
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	88 23       	and	r24, r24
     69e:	49 f4       	brne	.+18     	; 0x6b2 <adc_calibrate_update+0x8a>
	for(;;) {
     6a0:	a3 ed       	ldi	r26, 0xD3	; 211
     6a2:	b1 e0       	ldi	r27, 0x01	; 1
     6a4:	f9 01       	movw	r30, r18
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	01 90       	ld	r0, Z+
     6aa:	0d 92       	st	X+, r0
     6ac:	81 50       	subi	r24, 0x01	; 1
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <adc_calibrate_update+0x80>
     6b0:	22 c0       	rjmp	.+68     	; 0x6f6 <adc_calibrate_update+0xce>
     6b2:	e3 ed       	ldi	r30, 0xD3	; 211
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	79 01       	movw	r14, r18
		if	(c_mode==FOLLOW) {	
			if (initial) {
				lf_full_speed();
     6b8:	08 2f       	mov	r16, r24
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	68 01       	movw	r12, r16
     6be:	08 94       	sec
     6c0:	c1 1c       	adc	r12, r1
     6c2:	d1 1c       	adc	r13, r1
     6c4:	80 81       	ld	r24, Z
     6c6:	91 81       	ldd	r25, Z+1	; 0x01
     6c8:	9c 01       	movw	r18, r24
     6ca:	02 9f       	mul	r16, r18
     6cc:	c0 01       	movw	r24, r0
     6ce:	03 9f       	mul	r16, r19
     6d0:	90 0d       	add	r25, r0
     6d2:	12 9f       	mul	r17, r18
     6d4:	90 0d       	add	r25, r0
     6d6:	11 24       	eor	r1, r1
     6d8:	d7 01       	movw	r26, r14
     6da:	2d 91       	ld	r18, X+
     6dc:	3d 91       	ld	r19, X+
     6de:	7d 01       	movw	r14, r26
     6e0:	82 0f       	add	r24, r18
     6e2:	93 1f       	adc	r25, r19
     6e4:	b6 01       	movw	r22, r12
     6e6:	0e 94 80 0c 	call	0x1900	; 0x1900 <__divmodhi4>
     6ea:	61 93       	st	Z+, r22
     6ec:	71 93       	st	Z+, r23
	initial=true;
	
		
	for(;;) {
		if	(c_mode==FOLLOW) {	
			if (initial) {
     6ee:	b1 e0       	ldi	r27, 0x01	; 1
     6f0:	eb 3d       	cpi	r30, 0xDB	; 219
     6f2:	fb 07       	cpc	r31, r27
     6f4:	39 f7       	brne	.-50     	; 0x6c4 <adc_calibrate_update+0x9c>
				lf_full_speed();
				initial=false;
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};
     6f6:	80 91 43 01 	lds	r24, 0x0143
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	80 93 43 01 	sts	0x0143, r24

     700:	60 96       	adiw	r28, 0x10	; 16
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	1f 91       	pop	r17
     712:	0f 91       	pop	r16
     714:	ff 90       	pop	r15
     716:	ef 90       	pop	r14
     718:	df 90       	pop	r13
     71a:	cf 90       	pop	r12
     71c:	08 95       	ret

0000071e <print_adc_calibration>:
	#else
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17

     722:	8b ef       	ldi	r24, 0xFB	; 251
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	80 91 e9 01 	lds	r24, 0x01E9
     72e:	90 91 ea 01 	lds	r25, 0x01EA
     732:	9f 93       	push	r25
     734:	8f 93       	push	r24
     736:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     73a:	80 91 d3 01 	lds	r24, 0x01D3
     73e:	90 91 d4 01 	lds	r25, 0x01D4
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	1f 92       	push	r1
     748:	1f 92       	push	r1
     74a:	00 e0       	ldi	r16, 0x00	; 0
     74c:	11 e0       	ldi	r17, 0x01	; 1
     74e:	1f 93       	push	r17
     750:	0f 93       	push	r16
     752:	80 91 e9 01 	lds	r24, 0x01E9
     756:	90 91 ea 01 	lds	r25, 0x01EA
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     762:	80 91 d5 01 	lds	r24, 0x01D5
     766:	90 91 d6 01 	lds	r25, 0x01D6
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	1f 93       	push	r17
     778:	0f 93       	push	r16
     77a:	80 91 e9 01 	lds	r24, 0x01E9
     77e:	90 91 ea 01 	lds	r25, 0x01EA
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     78a:	80 91 d7 01 	lds	r24, 0x01D7
     78e:	90 91 d8 01 	lds	r25, 0x01D8
     792:	9f 93       	push	r25
     794:	8f 93       	push	r24
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	1f 93       	push	r17
     7a0:	0f 93       	push	r16
     7a2:	80 91 e9 01 	lds	r24, 0x01E9
     7a6:	90 91 ea 01 	lds	r25, 0x01EA
     7aa:	9f 93       	push	r25
     7ac:	8f 93       	push	r24
     7ae:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     7b2:	80 91 d9 01 	lds	r24, 0x01D9
     7b6:	90 91 da 01 	lds	r25, 0x01DA
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	83 e0       	ldi	r24, 0x03	; 3
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	1f 93       	push	r17
     7c8:	0f 93       	push	r16
     7ca:	80 91 e9 01 	lds	r24, 0x01E9
     7ce:	90 91 ea 01 	lds	r25, 0x01EA
     7d2:	9f 93       	push	r25
     7d4:	8f 93       	push	r24
     7d6:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     7da:	8d b7       	in	r24, 0x3d	; 61
     7dc:	9e b7       	in	r25, 0x3e	; 62
     7de:	84 96       	adiw	r24, 0x24	; 36
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	9e bf       	out	0x3e, r25	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	8d bf       	out	0x3d, r24	; 61
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <print_adc_values>:
void clock_init(void) {
	
	#if   F_CPU == 1000000
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
	#elif F_CPU == 4000000
     800:	87 e2       	ldi	r24, 0x27	; 39
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	80 91 e9 01 	lds	r24, 0x01E9
     80c:	90 91 ea 01 	lds	r25, 0x01EA
     810:	9f 93       	push	r25
     812:	8f 93       	push	r24
     814:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
     818:	80 91 ca 01 	lds	r24, 0x01CA
     81c:	90 91 cb 01 	lds	r25, 0x01CB
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	1f 92       	push	r1
     826:	1f 92       	push	r1
     828:	00 e0       	ldi	r16, 0x00	; 0
     82a:	11 e0       	ldi	r17, 0x01	; 1
     82c:	1f 93       	push	r17
     82e:	0f 93       	push	r16
     830:	80 91 e9 01 	lds	r24, 0x01E9
     834:	90 91 ea 01 	lds	r25, 0x01EA
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     840:	80 91 cc 01 	lds	r24, 0x01CC
     844:	90 91 cd 01 	lds	r25, 0x01CD
     848:	9f 93       	push	r25
     84a:	8f 93       	push	r24
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	9f 93       	push	r25
     852:	8f 93       	push	r24
     854:	1f 93       	push	r17
     856:	0f 93       	push	r16
     858:	80 91 e9 01 	lds	r24, 0x01E9
     85c:	90 91 ea 01 	lds	r25, 0x01EA
     860:	9f 93       	push	r25
     862:	8f 93       	push	r24
     864:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     868:	80 91 ce 01 	lds	r24, 0x01CE
     86c:	90 91 cf 01 	lds	r25, 0x01CF
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	9f 93       	push	r25
     87a:	8f 93       	push	r24
     87c:	1f 93       	push	r17
     87e:	0f 93       	push	r16
     880:	80 91 e9 01 	lds	r24, 0x01E9
     884:	90 91 ea 01 	lds	r25, 0x01EA
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     890:	80 91 d0 01 	lds	r24, 0x01D0
     894:	90 91 d1 01 	lds	r25, 0x01D1
     898:	9f 93       	push	r25
     89a:	8f 93       	push	r24
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	1f 93       	push	r17
     8a6:	0f 93       	push	r16
     8a8:	80 91 e9 01 	lds	r24, 0x01E9
     8ac:	90 91 ea 01 	lds	r25, 0x01EA
     8b0:	9f 93       	push	r25
     8b2:	8f 93       	push	r24
     8b4:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
		clock_prescale_set(clock_div_1);	
	#else
     8b8:	8d b7       	in	r24, 0x3d	; 61
     8ba:	9e b7       	in	r25, 0x3e	; 62
     8bc:	84 96       	adiw	r24, 0x24	; 36
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	f8 94       	cli
     8c2:	9e bf       	out	0x3e, r25	; 62
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	8d bf       	out	0x3d, r24	; 61
     8c8:	82 e1       	ldi	r24, 0x12	; 18
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	9f 93       	push	r25
     8ce:	8f 93       	push	r24
     8d0:	80 91 e9 01 	lds	r24, 0x01E9
     8d4:	90 91 ea 01 	lds	r25, 0x01EA
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     8e0:	4a ec       	ldi	r20, 0xCA	; 202
     8e2:	c4 2e       	mov	r12, r20
     8e4:	41 e0       	ldi	r20, 0x01	; 1
     8e6:	d4 2e       	mov	r13, r20
     8e8:	33 ed       	ldi	r19, 0xD3	; 211
     8ea:	e3 2e       	mov	r14, r19
     8ec:	31 e0       	ldi	r19, 0x01	; 1
     8ee:	f3 2e       	mov	r15, r19
     8f0:	c0 e0       	ldi	r28, 0x00	; 0
     8f2:	d0 e0       	ldi	r29, 0x00	; 0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
		#error "F_CPU Unrecognized"
	#endif
     8fc:	f7 01       	movw	r30, r14
     8fe:	81 91       	ld	r24, Z+
     900:	91 91       	ld	r25, Z+
     902:	7f 01       	movw	r14, r30
     904:	f6 01       	movw	r30, r12
     906:	21 91       	ld	r18, Z+
     908:	31 91       	ld	r19, Z+
     90a:	6f 01       	movw	r12, r30
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	1f 93       	push	r17
     91a:	0f 93       	push	r16
     91c:	80 91 e9 01 	lds	r24, 0x01E9
     920:	90 91 ea 01 	lds	r25, 0x01EA
     924:	9f 93       	push	r25
     926:	8f 93       	push	r24
     928:	0e 94 8e 09 	call	0x131c	; 0x131c <fprintf>
     92c:	21 96       	adiw	r28, 0x01	; 1
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
     92e:	8d b7       	in	r24, 0x3d	; 61
     930:	9e b7       	in	r25, 0x3e	; 62
     932:	08 96       	adiw	r24, 0x08	; 8
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	9e bf       	out	0x3e, r25	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	8d bf       	out	0x3d, r24	; 61
     93e:	c4 30       	cpi	r28, 0x04	; 4
     940:	d1 05       	cpc	r29, r1
     942:	e1 f6       	brne	.-72     	; 0x8fc <print_adc_values+0x10c>
	#endif
	
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <usart0_putchar_direct>:
#include <util/delay.h>
#include <avr/pgmspace.h>
#include <stdlib.h>


void clock_init(void) {
     956:	1f 93       	push	r17
     958:	18 2f       	mov	r17, r24
	
     95a:	8a 30       	cpi	r24, 0x0A	; 10
     95c:	19 f4       	brne	.+6      	; 0x964 <usart0_putchar_direct+0xe>
	#if   F_CPU == 1000000
     95e:	8d e0       	ldi	r24, 0x0D	; 13
     960:	0e 94 ab 04 	call	0x956	; 0x956 <usart0_putchar_direct>
		clock_prescale_set(clock_div_8);	
     964:	80 91 c0 00 	lds	r24, 0x00C0
     968:	85 ff       	sbrs	r24, 5
     96a:	fc cf       	rjmp	.-8      	; 0x964 <usart0_putchar_direct+0xe>
	#elif F_CPU == 2000000
     96c:	10 93 c6 00 	sts	0x00C6, r17
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	1f 91       	pop	r17
     976:	08 95       	ret

00000978 <usart0_putchar>:
			
			//0=LEFT, 3=RIGHT
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
     978:	1f 93       	push	r17
     97a:	18 2f       	mov	r17, r24
			}
     97c:	8a 30       	cpi	r24, 0x0A	; 10
     97e:	19 f4       	brne	.+6      	; 0x986 <usart0_putchar+0xe>
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
     980:	8d e0       	ldi	r24, 0x0D	; 13
     982:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
     986:	80 91 c0 00 	lds	r24, 0x00C0
     98a:	85 ff       	sbrs	r24, 5
     98c:	fc cf       	rjmp	.-8      	; 0x986 <usart0_putchar+0xe>
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
     98e:	10 93 c6 00 	sts	0x00C6, r17
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	1f 91       	pop	r17
     998:	08 95       	ret

0000099a <usart0_getchar>:
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	7c 01       	movw	r14, r24
		#error "F_CPU Unrecognized"
	#endif
	
	//OSCAL set by the bootloader.
}

     9a8:	80 91 44 01 	lds	r24, 0x0144
     9ac:	90 91 45 01 	lds	r25, 0x0145
     9b0:	89 2b       	or	r24, r25
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <usart0_getchar+0x1c>
     9b4:	a0 c0       	rjmp	.+320    	; 0xaf6 <usart0_getchar+0x15c>
     9b6:	06 e4       	ldi	r16, 0x46	; 70
     9b8:	11 e0       	ldi	r17, 0x01	; 1
void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     9ba:	80 91 c0 00 	lds	r24, 0x00C0
     9be:	87 ff       	sbrs	r24, 7
     9c0:	fc cf       	rjmp	.-8      	; 0x9ba <usart0_getchar+0x20>
	   	printf("%c",((inp&(1<<j))>>j)+'0');
     9c2:	80 91 c0 00 	lds	r24, 0x00C0
     9c6:	84 ff       	sbrs	r24, 4
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <usart0_getchar+0x36>
     9ca:	2e ef       	ldi	r18, 0xFE	; 254
     9cc:	3f ef       	ldi	r19, 0xFF	; 255
     9ce:	a7 c0       	rjmp	.+334    	; 0xb1e <usart0_getchar+0x184>
	}
     9d0:	80 91 c0 00 	lds	r24, 0x00C0
     9d4:	83 fd       	sbrc	r24, 3
     9d6:	a1 c0       	rjmp	.+322    	; 0xb1a <usart0_getchar+0x180>
}
     9d8:	90 91 c6 00 	lds	r25, 0x00C6

void init(void) {
     9dc:	9d 30       	cpi	r25, 0x0D	; 13
     9de:	11 f0       	breq	.+4      	; 0x9e4 <usart0_getchar+0x4a>
	cli(); // Starts with interrupts disabled?
     9e0:	9a 30       	cpi	r25, 0x0A	; 10
     9e2:	69 f4       	brne	.+26     	; 0x9fe <usart0_getchar+0x64>
	power_all_disable();
     9e4:	8a e0       	ldi	r24, 0x0A	; 10
     9e6:	f8 01       	movw	r30, r16
     9e8:	80 83       	st	Z, r24
	clock_init();
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
	joy_init();
     9f0:	86 e4       	ldi	r24, 0x46	; 70
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	90 93 45 01 	sts	0x0145, r25
     9f8:	80 93 44 01 	sts	0x0144, r24
     9fc:	7c c0       	rjmp	.+248    	; 0xaf6 <usart0_getchar+0x15c>
	usart_init();
	adc_init();
	timers_init();
	motors_init();
     9fe:	99 30       	cpi	r25, 0x09	; 9
     a00:	09 f4       	brne	.+2      	; 0xa04 <usart0_getchar+0x6a>
     a02:	90 e2       	ldi	r25, 0x20	; 32
	sei();
	#ifdef debug
     a04:	89 2f       	mov	r24, r25
     a06:	80 52       	subi	r24, 0x20	; 32
     a08:	8f 35       	cpi	r24, 0x5F	; 95
     a0a:	10 f0       	brcs	.+4      	; 0xa10 <usart0_getchar+0x76>
     a0c:	90 3a       	cpi	r25, 0xA0	; 160
     a0e:	78 f0       	brcs	.+30     	; 0xa2e <usart0_getchar+0x94>
	printf_P(PSTR("\nInit: Done\n\n"));
     a10:	f1 e0       	ldi	r31, 0x01	; 1
     a12:	04 3c       	cpi	r16, 0xC4	; 196
     a14:	1f 07       	cpc	r17, r31
     a16:	19 f4       	brne	.+6      	; 0xa1e <usart0_getchar+0x84>
	#endif
     a18:	b7 01       	movw	r22, r14
     a1a:	87 e0       	ldi	r24, 0x07	; 7
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <usart0_getchar+0x8e>
}

     a1e:	f8 01       	movw	r30, r16
     a20:	91 93       	st	Z+, r25
     a22:	8f 01       	movw	r16, r30

     a24:	b7 01       	movw	r22, r14
     a26:	89 2f       	mov	r24, r25
     a28:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
     a2c:	c6 cf       	rjmp	.-116    	; 0x9ba <usart0_getchar+0x20>

int main(void) {
	init();
	c_mode=WAIT;
	initial=true;
     a2e:	92 31       	cpi	r25, 0x12	; 18
     a30:	39 f1       	breq	.+78     	; 0xa80 <usart0_getchar+0xe6>
     a32:	93 31       	cpi	r25, 0x13	; 19
     a34:	38 f4       	brcc	.+14     	; 0xa44 <usart0_getchar+0xaa>
     a36:	93 30       	cpi	r25, 0x03	; 3
     a38:	09 f4       	brne	.+2      	; 0xa3c <usart0_getchar+0xa2>
     a3a:	6f c0       	rjmp	.+222    	; 0xb1a <usart0_getchar+0x180>
     a3c:	98 30       	cpi	r25, 0x08	; 8
     a3e:	09 f0       	breq	.+2      	; 0xa42 <usart0_getchar+0xa8>
     a40:	bc cf       	rjmp	.-136    	; 0x9ba <usart0_getchar+0x20>
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <usart0_getchar+0xbc>
     a44:	97 31       	cpi	r25, 0x17	; 23
     a46:	09 f4       	brne	.+2      	; 0xa4a <usart0_getchar+0xb0>
     a48:	4b c0       	rjmp	.+150    	; 0xae0 <usart0_getchar+0x146>
     a4a:	9f 37       	cpi	r25, 0x7F	; 127
     a4c:	21 f0       	breq	.+8      	; 0xa56 <usart0_getchar+0xbc>
     a4e:	95 31       	cpi	r25, 0x15	; 21
     a50:	09 f0       	breq	.+2      	; 0xa54 <usart0_getchar+0xba>
     a52:	b3 cf       	rjmp	.-154    	; 0x9ba <usart0_getchar+0x20>
     a54:	32 c0       	rjmp	.+100    	; 0xaba <usart0_getchar+0x120>
	
		
	for(;;) {
		if	(c_mode==FOLLOW) {	
			if (initial) {
				lf_full_speed();
     a56:	f1 e0       	ldi	r31, 0x01	; 1
     a58:	06 34       	cpi	r16, 0x46	; 70
     a5a:	1f 07       	cpc	r17, r31
     a5c:	09 f0       	breq	.+2      	; 0xa60 <usart0_getchar+0xc6>
     a5e:	08 f4       	brcc	.+2      	; 0xa62 <usart0_getchar+0xc8>
     a60:	ac cf       	rjmp	.-168    	; 0x9ba <usart0_getchar+0x20>
				initial=false;
     a62:	b7 01       	movw	r22, r14
     a64:	88 e0       	ldi	r24, 0x08	; 8
     a66:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
			}
     a6a:	b7 01       	movw	r22, r14
     a6c:	80 e2       	ldi	r24, 0x20	; 32
     a6e:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};
     a72:	b7 01       	movw	r22, r14
     a74:	88 e0       	ldi	r24, 0x08	; 8
     a76:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>

     a7a:	01 50       	subi	r16, 0x01	; 1
     a7c:	10 40       	sbci	r17, 0x00	; 0
     a7e:	9d cf       	rjmp	.-198    	; 0x9ba <usart0_getchar+0x20>
			uint16_t adc_vc[channel_amt];
			for (uint8_t i=0;i<channel_amt;++i) {
				adc_vc[i]=adc_get_val(i);
			}
			
     a80:	b7 01       	movw	r22, r14
     a82:	8d e0       	ldi	r24, 0x0D	; 13
     a84:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
     a88:	c6 e4       	ldi	r28, 0x46	; 70
     a8a:	d1 e0       	ldi	r29, 0x01	; 1
     a8c:	04 c0       	rjmp	.+8      	; 0xa96 <usart0_getchar+0xfc>
			uint8_t  maxi=channel_amt;
			uint16_t maxv=0;
     a8e:	b7 01       	movw	r22, r14
     a90:	89 91       	ld	r24, Y+
     a92:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
			uint16_t adc_vc[channel_amt];
			for (uint8_t i=0;i<channel_amt;++i) {
				adc_vc[i]=adc_get_val(i);
			}
			
			uint8_t  maxi=channel_amt;
     a96:	c0 17       	cp	r28, r16
     a98:	d1 07       	cpc	r29, r17
     a9a:	c8 f3       	brcs	.-14     	; 0xa8e <usart0_getchar+0xf4>
     a9c:	8e cf       	rjmp	.-228    	; 0x9ba <usart0_getchar+0x20>
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
				}
     a9e:	b7 01       	movw	r22, r14
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
			}
     aa6:	b7 01       	movw	r22, r14
     aa8:	80 e2       	ldi	r24, 0x20	; 32
     aaa:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
			
     aae:	b7 01       	movw	r22, r14
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
			#ifdef debug
     ab6:	01 50       	subi	r16, 0x01	; 1
     ab8:	10 40       	sbci	r17, 0x00	; 0
			uint8_t  maxi=channel_amt;
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	06 34       	cpi	r16, 0x46	; 70
     abe:	18 07       	cpc	r17, r24
     ac0:	09 f0       	breq	.+2      	; 0xac4 <usart0_getchar+0x12a>
     ac2:	68 f7       	brcc	.-38     	; 0xa9e <usart0_getchar+0x104>
     ac4:	7a cf       	rjmp	.-268    	; 0x9ba <usart0_getchar+0x20>
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
     ac6:	b7 01       	movw	r22, r14
     ac8:	88 e0       	ldi	r24, 0x08	; 8
     aca:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
			
     ace:	b7 01       	movw	r22, r14
     ad0:	80 e2       	ldi	r24, 0x20	; 32
     ad2:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
			// Correction needed for even numbers of sensors.
     ad6:	b7 01       	movw	r22, r14
     ad8:	88 e0       	ldi	r24, 0x08	; 8
     ada:	0e 94 bc 04 	call	0x978	; 0x978 <usart0_putchar>
     ade:	8e 01       	movw	r16, r28
			#ifdef debug
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
     ae0:	e1 e0       	ldi	r30, 0x01	; 1
     ae2:	06 34       	cpi	r16, 0x46	; 70
     ae4:	1e 07       	cpc	r17, r30
     ae6:	09 f0       	breq	.+2      	; 0xaea <usart0_getchar+0x150>
     ae8:	08 f4       	brcc	.+2      	; 0xaec <usart0_getchar+0x152>
     aea:	67 cf       	rjmp	.-306    	; 0x9ba <usart0_getchar+0x20>
     aec:	e8 01       	movw	r28, r16
     aee:	8a 91       	ld	r24, -Y
     af0:	80 32       	cpi	r24, 0x20	; 32
     af2:	49 f7       	brne	.-46     	; 0xac6 <usart0_getchar+0x12c>
     af4:	62 cf       	rjmp	.-316    	; 0x9ba <usart0_getchar+0x20>
			if (turn_i>0)
				++turn_i;	
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
			
     af6:	e0 91 44 01 	lds	r30, 0x0144
     afa:	f0 91 45 01 	lds	r31, 0x0145
     afe:	81 91       	ld	r24, Z+
     b00:	f0 93 45 01 	sts	0x0145, r31
     b04:	e0 93 44 01 	sts	0x0144, r30
			
     b08:	8a 30       	cpi	r24, 0x0A	; 10
     b0a:	21 f4       	brne	.+8      	; 0xb14 <usart0_getchar+0x17a>
     b0c:	10 92 45 01 	sts	0x0145, r1
     b10:	10 92 44 01 	sts	0x0144, r1
			//0=LEFT, 3=RIGHT
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	02 c0       	rjmp	.+4      	; 0xb1e <usart0_getchar+0x184>
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	3f ef       	ldi	r19, 0xFF	; 255
			/*
     b1e:	c9 01       	movw	r24, r18
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	08 95       	ret

00000b2e <usart0_init>:
			++sp;
		}
	}	
} 
		
ISR(BADISR_vect) {
     b2e:	e4 e6       	ldi	r30, 0x64	; 100
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	80 81       	ld	r24, Z
     b34:	8d 7f       	andi	r24, 0xFD	; 253
     b36:	80 83       	st	Z, r24
	fprintf_P(stderr,PSTR("\n\nInvalid Interupt Enabled\n"));
}

     b38:	89 e1       	ldi	r24, 0x19	; 25
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	90 93 c5 00 	sts	0x00C5, r25
     b40:	80 93 c4 00 	sts	0x00C4, r24
     b44:	e0 ec       	ldi	r30, 0xC0	; 192
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	8d 7f       	andi	r24, 0xFD	; 253
     b4c:	80 83       	st	Z, r24
     b4e:	88 e1       	ldi	r24, 0x18	; 24
     b50:	80 93 c1 00 	sts	0x00C1, r24
     b54:	86 e0       	ldi	r24, 0x06	; 6
     b56:	80 93 c2 00 	sts	0x00C2, r24
     b5a:	82 e1       	ldi	r24, 0x12	; 18
     b5c:	91 e0       	ldi	r25, 0x01	; 1
     b5e:	90 93 e6 01 	sts	0x01E6, r25
     b62:	80 93 e5 01 	sts	0x01E5, r24
     b66:	90 93 e8 01 	sts	0x01E8, r25
     b6a:	80 93 e7 01 	sts	0x01E7, r24
     b6e:	20 e2       	ldi	r18, 0x20	; 32
     b70:	31 e0       	ldi	r19, 0x01	; 1
     b72:	30 93 ea 01 	sts	0x01EA, r19
     b76:	20 93 e9 01 	sts	0x01E9, r18
     b7a:	8c e3       	ldi	r24, 0x3C	; 60
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	9f 93       	push	r25
     b80:	8f 93       	push	r24
     b82:	3f 93       	push	r19
     b84:	2f 93       	push	r18
     b86:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	08 95       	ret

00000b94 <usart_init>:
     b94:	0e 94 97 05 	call	0xb2e	; 0xb2e <usart0_init>
     b98:	08 95       	ret

00000b9a <__vector_9>:
     b9a:	1f 92       	push	r1
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	8f 93       	push	r24
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	80 93 c7 01 	sts	0x01C7, r24
     bac:	8f 91       	pop	r24
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
     bb4:	1f 90       	pop	r1
     bb6:	18 95       	reti

00000bb8 <__vector_6>:
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	10 92 c7 01 	sts	0x01C7, r1
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <__vector_7>:
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	8f 93       	push	r24
     bdc:	80 91 c7 01 	lds	r24, 0x01C7
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	11 f4       	brne	.+4      	; 0xbe8 <__vector_7+0x18>
     be4:	2a 98       	cbi	0x05, 2	; 5
     be6:	01 c0       	rjmp	.+2      	; 0xbea <__vector_7+0x1a>
     be8:	2a 9a       	sbi	0x05, 2	; 5
     bea:	8f 91       	pop	r24
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f 90       	pop	r0
     bf2:	1f 90       	pop	r1
     bf4:	18 95       	reti

00000bf6 <__vector_8>:
     bf6:	1f 92       	push	r1
     bf8:	0f 92       	push	r0
     bfa:	0f b6       	in	r0, 0x3f	; 63
     bfc:	0f 92       	push	r0
     bfe:	11 24       	eor	r1, r1
     c00:	8f 93       	push	r24
     c02:	80 91 c7 01 	lds	r24, 0x01C7
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__vector_8+0x18>
     c0a:	2b 98       	cbi	0x05, 3	; 5
     c0c:	01 c0       	rjmp	.+2      	; 0xc10 <__vector_8+0x1a>
     c0e:	2b 9a       	sbi	0x05, 3	; 5
     c10:	8f 91       	pop	r24
     c12:	0f 90       	pop	r0
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	0f 90       	pop	r0
     c18:	1f 90       	pop	r1
     c1a:	18 95       	reti

00000c1c <timer1_init>:
			
			//0=LEFT, 3=RIGHT
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
     c1c:	8b e8       	ldi	r24, 0x8B	; 139
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	9f 93       	push	r25
     c22:	8f 93       	push	r24
     c24:	80 91 e9 01 	lds	r24, 0x01E9
     c28:	90 91 ea 01 	lds	r25, 0x01EA
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
     c34:	e4 e6       	ldi	r30, 0x64	; 100
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	87 7f       	andi	r24, 0xF7	; 247
     c3c:	80 83       	st	Z, r24
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
     c3e:	e0 e8       	ldi	r30, 0x80	; 128
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	8f 70       	andi	r24, 0x0F	; 15
     c46:	80 83       	st	Z, r24
			}
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
     c48:	80 81       	ld	r24, Z
     c4a:	82 60       	ori	r24, 0x02	; 2
     c4c:	80 83       	st	Z, r24
				//lf_full_speed();
     c4e:	80 81       	ld	r24, Z
     c50:	8d 7f       	andi	r24, 0xFD	; 253
     c52:	80 83       	st	Z, r24
				dir=FWD;
			}
     c54:	e1 e8       	ldi	r30, 0x81	; 129
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	80 62       	ori	r24, 0x20	; 32
     c5c:	80 83       	st	Z, r24
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     c5e:	80 81       	ld	r24, Z
     c60:	80 61       	ori	r24, 0x10	; 16
     c62:	80 83       	st	Z, r24
				//lf_full_speed();
     c64:	80 81       	ld	r24, Z
     c66:	87 7f       	andi	r24, 0xF7	; 247
     c68:	80 83       	st	Z, r24
				dir=FWD;
			}
			*/
     c6a:	80 81       	ld	r24, Z
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	80 83       	st	Z, r24

			_delay_ms(200);
			// do at every adc calc or pwm vector.
     c70:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c72:	f8 94       	cli
		}
     c74:	8f ef       	ldi	r24, 0xFF	; 255
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	90 93 87 00 	sts	0x0087, r25
     c7c:	80 93 86 00 	sts	0x0086, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c80:	2f bf       	out	0x3f, r18	; 63
			}
			static uint16_t sp;
			
			motor_set_speed(sp,LEFT);
			motor_set_speed(sp,RIGHT);
			_delay_ms(2);
     c82:	e1 e8       	ldi	r30, 0x81	; 129
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	80 81       	ld	r24, Z
     c88:	89 7f       	andi	r24, 0xF9	; 249
     c8a:	80 83       	st	Z, r24
			//if (!(sp%0x100))
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	80 83       	st	Z, r24
			//	printf("\nsp=%x",sp);
			++sp;
		}
	}	
} 
		
     c92:	ef e6       	ldi	r30, 0x6F	; 111
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	87 60       	ori	r24, 0x07	; 7
     c9a:	80 83       	st	Z, r24
ISR(BADISR_vect) {
	fprintf_P(stderr,PSTR("\n\nInvalid Interupt Enabled\n"));
     c9c:	84 b1       	in	r24, 0x04	; 4
     c9e:	8c 60       	ori	r24, 0x0C	; 12
     ca0:	84 b9       	out	0x04, r24	; 4
}

     ca2:	83 e8       	ldi	r24, 0x83	; 131
     ca4:	91 e0       	ldi	r25, 0x01	; 1
     ca6:	9f 93       	push	r25
     ca8:	8f 93       	push	r24
     caa:	80 91 e9 01 	lds	r24, 0x01E9
     cae:	90 91 ea 01 	lds	r25, 0x01EA
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     cba:	8d b7       	in	r24, 0x3d	; 61
     cbc:	9e b7       	in	r25, 0x3e	; 62
     cbe:	08 96       	adiw	r24, 0x08	; 8
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	9e bf       	out	0x3e, r25	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	8d bf       	out	0x3d, r24	; 61
     cca:	08 95       	ret

00000ccc <__vector_5>:
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
			
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
			// Correction needed for even numbers of sensors.
			#if (!(channel_amt%2))
     cda:	80 91 c5 01 	lds	r24, 0x01C5
     cde:	90 91 c6 01 	lds	r25, 0x01C6
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	90 93 c6 01 	sts	0x01C6, r25
     ce8:	80 93 c5 01 	sts	0x01C5, r24
			if (turn_i>0)
     cec:	80 91 d2 01 	lds	r24, 0x01D2
     cf0:	88 23       	and	r24, r24
     cf2:	b1 f4       	brne	.+44     	; 0xd20 <__vector_5+0x54>
				++turn_i;	
			#endif

     cf4:	1f 92       	push	r1
     cf6:	1f 92       	push	r1
     cf8:	81 ea       	ldi	r24, 0xA1	; 161
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	9f 93       	push	r25
     cfe:	8f 93       	push	r24
     d00:	80 91 e9 01 	lds	r24, 0x01E9
     d04:	90 91 ea 01 	lds	r25, 0x01EA
     d08:	9f 93       	push	r25
     d0a:	8f 93       	push	r24
     d0c:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     d10:	8d b7       	in	r24, 0x3d	; 61
     d12:	9e b7       	in	r25, 0x3e	; 62
     d14:	06 96       	adiw	r24, 0x06	; 6
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	9e bf       	out	0x3e, r25	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	8d bf       	out	0x3d, r24	; 61
			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
			
			
			//0=LEFT, 3=RIGHT
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <timer2_init>:
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <avr/pgmspace.h>
     d2e:	83 eb       	ldi	r24, 0xB3	; 179
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	9f 93       	push	r25
     d34:	8f 93       	push	r24
     d36:	80 91 e9 01 	lds	r24, 0x01E9
     d3a:	90 91 ea 01 	lds	r25, 0x01EA
     d3e:	9f 93       	push	r25
     d40:	8f 93       	push	r24
     d42:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
     d46:	80 91 70 00 	lds	r24, 0x0070
     d4a:	8c 7f       	andi	r24, 0xFC	; 252
     d4c:	80 93 70 00 	sts	0x0070, r24
	#endif
	
	//OSCAL set by the bootloader.
     d50:	80 91 b6 00 	lds	r24, 0x00B6
     d54:	8f 7e       	andi	r24, 0xEF	; 239
     d56:	80 93 b6 00 	sts	0x00B6, r24
}
     d5a:	80 91 b6 00 	lds	r24, 0x00B6
     d5e:	88 60       	ori	r24, 0x08	; 8
     d60:	80 93 b6 00 	sts	0x00B6, r24

void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     d64:	10 92 b2 00 	sts	0x00B2, r1
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
     d68:	80 91 b0 00 	lds	r24, 0x00B0
     d6c:	8f 77       	andi	r24, 0x7F	; 127
     d6e:	80 93 b0 00 	sts	0x00B0, r24
	joy_init();
	usart_init();
	adc_init();
	timers_init();
	motors_init();
	sei();
     d72:	80 91 b0 00 	lds	r24, 0x00B0
     d76:	87 7b       	andi	r24, 0xB7	; 183
     d78:	80 93 b0 00 	sts	0x00B0, r24



int main(void) {
	init();
	c_mode=WAIT;
     d7c:	80 91 b0 00 	lds	r24, 0x00B0
     d80:	8f 7c       	andi	r24, 0xCF	; 207
     d82:	80 93 b0 00 	sts	0x00B0, r24
				initial=false;
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};

			uint16_t adc_vc[channel_amt];
			for (uint8_t i=0;i<channel_amt;++i) {
     d86:	80 91 b0 00 	lds	r24, 0x00B0
     d8a:	85 60       	ori	r24, 0x05	; 5
     d8c:	80 93 b0 00 	sts	0x00B0, r24
				adc_vc[i]=adc_get_val(i);
     d90:	80 91 b0 00 	lds	r24, 0x00B0
     d94:	8d 7f       	andi	r24, 0xFD	; 253
     d96:	80 93 b0 00 	sts	0x00B0, r24
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
			}
			
			uint8_t  maxi=channel_amt;
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
     da2:	80 91 b6 00 	lds	r24, 0x00B6
     da6:	82 fd       	sbrc	r24, 2
     da8:	fc cf       	rjmp	.-8      	; 0xda2 <timer2_init+0x74>
				if (adc_vc[i]>maxv) {
     daa:	80 91 b6 00 	lds	r24, 0x00B6
     dae:	81 fd       	sbrc	r24, 1
     db0:	fc cf       	rjmp	.-8      	; 0xdaa <timer2_init+0x7c>
					maxi=i;
     db2:	80 91 b6 00 	lds	r24, 0x00B6
     db6:	80 fd       	sbrc	r24, 0
     db8:	fc cf       	rjmp	.-8      	; 0xdb2 <timer2_init+0x84>
					maxv=adc_vc[i];
				}
			}
			
			#ifdef debug
			print_adc_values();
     dba:	8b ea       	ldi	r24, 0xAB	; 171
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	80 91 e9 01 	lds	r24, 0x01E9
     dc6:	90 91 ea 01 	lds	r25, 0x01EA
     dca:	9f 93       	push	r25
     dcc:	8f 93       	push	r24
     dce:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     dd2:	0f 90       	pop	r0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif
     dda:	08 95       	ret

00000ddc <timers_init>:
     ddc:	8d e6       	ldi	r24, 0x6D	; 109
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	9f 93       	push	r25
     de2:	8f 93       	push	r24
     de4:	80 91 e9 01 	lds	r24, 0x01E9
     de8:	90 91 ea 01 	lds	r25, 0x01EA
     dec:	9f 93       	push	r25
     dee:	8f 93       	push	r24
     df0:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     df4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <timer1_init>
     df8:	0e 94 97 06 	call	0xd2e	; 0xd2e <timer2_init>
     dfc:	87 e5       	ldi	r24, 0x57	; 87
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	9f 93       	push	r25
     e02:	8f 93       	push	r24
     e04:	80 91 e9 01 	lds	r24, 0x01E9
     e08:	90 91 ea 01 	lds	r25, 0x01EA
     e0c:	9f 93       	push	r25
     e0e:	8f 93       	push	r24
     e10:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
     e14:	8d b7       	in	r24, 0x3d	; 61
     e16:	9e b7       	in	r25, 0x3e	; 62
     e18:	08 96       	adiw	r24, 0x08	; 8
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	9e bf       	out	0x3e, r25	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	8d bf       	out	0x3d, r24	; 61
     e24:	08 95       	ret

00000e26 <inc_limit>:
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
     e26:	fc 01       	movw	r30, r24
			
     e28:	20 81       	ld	r18, Z
     e2a:	31 81       	ldd	r19, Z+1	; 0x01
     e2c:	42 1b       	sub	r20, r18
     e2e:	53 0b       	sbc	r21, r19
			// Correction needed for even numbers of sensors.
     e30:	46 17       	cp	r20, r22
     e32:	57 07       	cpc	r21, r23
     e34:	48 f4       	brcc	.+18     	; 0xe48 <inc_limit+0x22>
			#if (!(channel_amt%2))
     e36:	24 0f       	add	r18, r20
     e38:	35 1f       	adc	r19, r21
     e3a:	31 83       	std	Z+1, r19	; 0x01
     e3c:	20 83       	st	Z, r18
			if (turn_i>0)
				++turn_i;	
     e3e:	cb 01       	movw	r24, r22
     e40:	84 1b       	sub	r24, r20
     e42:	95 0b       	sbc	r25, r21
     e44:	ac 01       	movw	r20, r24
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <inc_limit+0x2e>
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     e48:	26 0f       	add	r18, r22
     e4a:	37 1f       	adc	r19, r23
     e4c:	31 83       	std	Z+1, r19	; 0x01
     e4e:	20 83       	st	Z, r18
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	50 e0       	ldi	r21, 0x00	; 0
			
			
			//0=LEFT, 3=RIGHT
     e54:	ca 01       	movw	r24, r20
     e56:	08 95       	ret

00000e58 <dec_limit>:
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
     e58:	fc 01       	movw	r30, r24
     e5a:	cb 01       	movw	r24, r22
				lf_turn_inc(LF_INC_LARGE,NEG);
     e5c:	20 81       	ld	r18, Z
     e5e:	31 81       	ldd	r19, Z+1	; 0x01
     e60:	b9 01       	movw	r22, r18
     e62:	64 1b       	sub	r22, r20
     e64:	75 0b       	sbc	r23, r21
				dir=LEFT;
     e66:	68 17       	cp	r22, r24
     e68:	79 07       	cpc	r23, r25
     e6a:	48 f4       	brcc	.+18     	; 0xe7e <dec_limit+0x26>
			}
     e6c:	26 1b       	sub	r18, r22
     e6e:	37 0b       	sbc	r19, r23
     e70:	31 83       	std	Z+1, r19	; 0x01
     e72:	20 83       	st	Z, r18
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
     e74:	9c 01       	movw	r18, r24
     e76:	26 1b       	sub	r18, r22
     e78:	37 0b       	sbc	r19, r23
     e7a:	b9 01       	movw	r22, r18
     e7c:	06 c0       	rjmp	.+12     	; 0xe8a <dec_limit+0x32>
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
     e7e:	28 1b       	sub	r18, r24
     e80:	39 0b       	sbc	r19, r25
     e82:	31 83       	std	Z+1, r19	; 0x01
     e84:	20 83       	st	Z, r18
     e86:	60 e0       	ldi	r22, 0x00	; 0
     e88:	70 e0       	ldi	r23, 0x00	; 0
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
     e8a:	cb 01       	movw	r24, r22
     e8c:	08 95       	ret

00000e8e <motor_set_speed>:
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
	#else
		#error "F_CPU Unrecognized"
	#endif
     e8e:	66 23       	and	r22, r22
     e90:	31 f4       	brne	.+12     	; 0xe9e <motor_set_speed+0x10>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e92:	f8 94       	cli
	
	//OSCAL set by the bootloader.
     e94:	90 93 89 00 	sts	0x0089, r25
     e98:	80 93 88 00 	sts	0x0088, r24
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <motor_set_speed+0x1e>
}

     e9e:	61 30       	cpi	r22, 0x01	; 1
     ea0:	39 f4       	brne	.+14     	; 0xeb0 <motor_set_speed+0x22>
     ea2:	f8 94       	cli
void  print_bin(uint8_t inp) {
	for(int8_t j=7; j>=0; --j) {
     ea4:	90 93 8b 00 	sts	0x008B, r25
     ea8:	80 93 8a 00 	sts	0x008A, r24
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     eac:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     eae:	08 95       	ret
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}
     eb0:	8b e2       	ldi	r24, 0x2B	; 43
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9f 93       	push	r25
     eb6:	8f 93       	push	r24
     eb8:	86 2f       	mov	r24, r22
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9f 93       	push	r25
     ebe:	8f 93       	push	r24
     ec0:	87 ef       	ldi	r24, 0xF7	; 247
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <printf_P>
     ecc:	8d b7       	in	r24, 0x3d	; 61
     ece:	9e b7       	in	r25, 0x3e	; 62
     ed0:	06 96       	adiw	r24, 0x06	; 6
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	9e bf       	out	0x3e, r25	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	8d bf       	out	0x3d, r24	; 61
     edc:	08 95       	ret

00000ede <motor_get_speed>:
#include "timers.h"
#include "joystick.h"
#include <avr/power.h>
#include <stdio.h>
#include <avr/io.h>
#include <avr/interrupt.h>
     ede:	28 2f       	mov	r18, r24
#include <util/delay.h>
#include <avr/pgmspace.h>
     ee0:	88 23       	and	r24, r24
     ee2:	31 f4       	brne	.+12     	; 0xef0 <motor_get_speed+0x12>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     ee4:	f8 94       	cli
#include <stdlib.h>

     ee6:	20 91 88 00 	lds	r18, 0x0088
     eea:	30 91 89 00 	lds	r19, 0x0089
     eee:	07 c0       	rjmp	.+14     	; 0xefe <motor_get_speed+0x20>

void clock_init(void) {
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	39 f4       	brne	.+14     	; 0xf02 <motor_get_speed+0x24>
     ef4:	f8 94       	cli
	
	#if   F_CPU == 1000000
     ef6:	20 91 8a 00 	lds	r18, 0x008A
     efa:	30 91 8b 00 	lds	r19, 0x008B
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
     efe:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
     f00:	18 c0       	rjmp	.+48     	; 0xf32 <motor_get_speed+0x54>
		clock_prescale_set(clock_div_8);	
	#elif F_CPU == 2000000
		clock_prescale_set(clock_div_4);	
     f02:	8b e1       	ldi	r24, 0x1B	; 27
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9f 93       	push	r25
     f08:	8f 93       	push	r24
     f0a:	82 2f       	mov	r24, r18
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	9f 93       	push	r25
     f10:	8f 93       	push	r24
     f12:	85 e2       	ldi	r24, 0x25	; 37
     f14:	92 e0       	ldi	r25, 0x02	; 2
     f16:	9f 93       	push	r25
     f18:	8f 93       	push	r24
     f1a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <printf_P>
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	8d b7       	in	r24, 0x3d	; 61
     f24:	9e b7       	in	r25, 0x3e	; 62
     f26:	06 96       	adiw	r24, 0x06	; 6
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	f8 94       	cli
     f2c:	9e bf       	out	0x3e, r25	; 62
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	8d bf       	out	0x3d, r24	; 61
	#elif F_CPU == 4000000
		clock_prescale_set(clock_div_2);	
	#elif F_CPU == 8000000
		clock_prescale_set(clock_div_1);	
     f32:	c9 01       	movw	r24, r18
     f34:	08 95       	ret

00000f36 <lf_turn_inc>:
			}
			else if	((adc_vc[2]>adc_vc[0])&&(adc_vc[2]>adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				lf_turn_inc(LF_INC_SMALL,NEG);
				dir=LEFT;
			}
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	7c 01       	movw	r14, r24
     f46:	d6 2e       	mov	r13, r22
				lf_turn_inc(LF_INC_LARGE,POS);
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 6f 07 	call	0xede	; 0xede <motor_get_speed>
     f4e:	8c 01       	movw	r16, r24
				dir=RIGHT;
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	0e 94 6f 07 	call	0xede	; 0xede <motor_get_speed>
     f56:	ec 01       	movw	r28, r24
			}
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	d8 16       	cp	r13, r24
     f5c:	e9 f4       	brne	.+58     	; 0xf98 <lf_turn_inc+0x62>
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
			
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 ec       	ldi	r25, 0xC0	; 192
     f62:	8c 1b       	sub	r24, r28
     f64:	9d 0b       	sbc	r25, r29
			// Correction needed for even numbers of sensors.
     f66:	8e 15       	cp	r24, r14
     f68:	9f 05       	cpc	r25, r15
     f6a:	30 f4       	brcc	.+12     	; 0xf78 <lf_turn_inc+0x42>
			#if (!(channel_amt%2))
			if (turn_i>0)
				++turn_i;	
     f6c:	97 01       	movw	r18, r14
     f6e:	28 1b       	sub	r18, r24
     f70:	39 0b       	sbc	r19, r25
     f72:	c0 e0       	ldi	r28, 0x00	; 0
     f74:	d0 ec       	ldi	r29, 0xC0	; 192
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <lf_turn_inc+0x4a>
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     f78:	ce 0d       	add	r28, r14
     f7a:	df 1d       	adc	r29, r15
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
			
			//0=LEFT, 3=RIGHT
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
     f80:	c8 01       	movw	r24, r16
     f82:	80 50       	subi	r24, 0x00	; 0
     f84:	95 40       	sbci	r25, 0x05	; 5
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	18 f4       	brcc	.+6      	; 0xf92 <lf_turn_inc+0x5c>
     f8c:	00 e0       	ldi	r16, 0x00	; 0
     f8e:	15 e0       	ldi	r17, 0x05	; 5
     f90:	21 c0       	rjmp	.+66     	; 0xfd4 <lf_turn_inc+0x9e>
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
     f92:	02 1b       	sub	r16, r18
     f94:	13 0b       	sbc	r17, r19
     f96:	1e c0       	rjmp	.+60     	; 0xfd4 <lf_turn_inc+0x9e>
			else if ((adc_vc[1]>adc_vc[0])&&(adc_vc[1]>adc_vc[2])&&(adc_vc[1]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
     f98:	dd 20       	and	r13, r13
     f9a:	e1 f4       	brne	.+56     	; 0xfd4 <lf_turn_inc+0x9e>
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif

			int8_t turn_i;			
			turn_i = maxi-channel_amt/2; // Needs to work for even numbers....
			
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 ec       	ldi	r25, 0xC0	; 192
     fa0:	80 1b       	sub	r24, r16
     fa2:	91 0b       	sbc	r25, r17
			// Correction needed for even numbers of sensors.
     fa4:	8e 15       	cp	r24, r14
     fa6:	9f 05       	cpc	r25, r15
     fa8:	30 f4       	brcc	.+12     	; 0xfb6 <lf_turn_inc+0x80>
			#if (!(channel_amt%2))
			if (turn_i>0)
				++turn_i;	
     faa:	97 01       	movw	r18, r14
     fac:	28 1b       	sub	r18, r24
     fae:	39 0b       	sbc	r19, r25
     fb0:	00 e0       	ldi	r16, 0x00	; 0
     fb2:	10 ec       	ldi	r17, 0xC0	; 192
     fb4:	04 c0       	rjmp	.+8      	; 0xfbe <lf_turn_inc+0x88>
			#endif

			lf_turn_inc(abs(LF_INC_SMALL*turn_i),turn_i>=0);
     fb6:	0e 0d       	add	r16, r14
     fb8:	1f 1d       	adc	r17, r15
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
			
			//0=LEFT, 3=RIGHT
			/*
			if		((adc_vc[0]>adc_vc[1])&&(adc_vc[0]>adc_vc[2])&&(adc_vc[0]>adc_vc[3])) {
				lf_turn_inc(LF_INC_LARGE,NEG);
				dir=LEFT;
     fbe:	ce 01       	movw	r24, r28
     fc0:	80 50       	subi	r24, 0x00	; 0
     fc2:	95 40       	sbci	r25, 0x05	; 5
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	18 f4       	brcc	.+6      	; 0xfd0 <lf_turn_inc+0x9a>
     fca:	c0 e0       	ldi	r28, 0x00	; 0
     fcc:	d5 e0       	ldi	r29, 0x05	; 5
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <lf_turn_inc+0x9e>
			}
			else if ((adc_vc[3]>adc_vc[0])&&(adc_vc[3]>adc_vc[1])&&(adc_vc[3]>adc_vc[2])) {
				lf_turn_inc(LF_INC_LARGE,POS);
				dir=RIGHT;
			}
     fd0:	c2 1b       	sub	r28, r18
     fd2:	d3 0b       	sbc	r29, r19
				dir=RIGHT;
			}
			else if ((adc_vc[0]<adc_vc[1])&&(adc_vc[2]>adc_vc[3])) {
				//lf_full_speed();
				dir=FWD;
			}
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	c8 01       	movw	r24, r16
     fd8:	0e 94 47 07 	call	0xe8e	; 0xe8e <motor_set_speed>
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
     fdc:	60 e0       	ldi	r22, 0x00	; 0
     fde:	ce 01       	movw	r24, r28
     fe0:	0e 94 47 07 	call	0xe8e	; 0xe8e <motor_set_speed>
				//lf_full_speed();
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	08 95       	ret

00000ff4 <motor_mode>:
	   	printf("%c",((inp&(1<<j))>>j)+'0');
	}
}

void init(void) {
	cli(); // Starts with interrupts disabled?
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	78 2f       	mov	r23, r24
	power_all_disable();
	clock_init();
	joy_init();
	usart_init();
     ffa:	66 23       	and	r22, r22
     ffc:	b9 f0       	breq	.+46     	; 0x102c <motor_mode+0x38>
	adc_init();
	timers_init();
	motors_init();
	sei();
	#ifdef debug
     ffe:	61 30       	cpi	r22, 0x01	; 1
    1000:	29 f4       	brne	.+10     	; 0x100c <motor_mode+0x18>
    1002:	55 e0       	ldi	r21, 0x05	; 5
    1004:	e7 e0       	ldi	r30, 0x07	; 7
    1006:	c9 ec       	ldi	r28, 0xC9	; 201
    1008:	d1 e0       	ldi	r29, 0x01	; 1
    100a:	14 c0       	rjmp	.+40     	; 0x1034 <motor_mode+0x40>
	printf_P(PSTR("\nInit: Done\n\n"));
	#endif
}



    100c:	8d e3       	ldi	r24, 0x3D	; 61
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9f 93       	push	r25
    1012:	8f 93       	push	r24
    1014:	86 2f       	mov	r24, r22
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9f 93       	push	r25
    101a:	8f 93       	push	r24
    101c:	89 ec       	ldi	r24, 0xC9	; 201
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	9f 93       	push	r25
    1022:	8f 93       	push	r24
    1024:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <printf_P>
    1028:	87 e0       	ldi	r24, 0x07	; 7
    102a:	6e c0       	rjmp	.+220    	; 0x1108 <motor_mode+0x114>
int main(void) {
    102c:	51 e0       	ldi	r21, 0x01	; 1
    102e:	e3 e0       	ldi	r30, 0x03	; 3
    1030:	c8 ec       	ldi	r28, 0xC8	; 200
    1032:	d1 e0       	ldi	r29, 0x01	; 1
	init();
	c_mode=WAIT;
	initial=true;
    1034:	72 30       	cpi	r23, 0x02	; 2
    1036:	a1 f4       	brne	.+40     	; 0x1060 <motor_mode+0x6c>
	
    1038:	4b b1       	in	r20, 0x0b	; 11
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	c9 01       	movw	r24, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <motor_mode+0x52>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	5a 95       	dec	r21
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <motor_mode+0x4e>
    104a:	80 95       	com	r24
    104c:	84 23       	and	r24, r20
    104e:	8b b9       	out	0x0b, r24	; 11
		
    1050:	8b b1       	in	r24, 0x0b	; 11
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <motor_mode+0x64>
    1054:	22 0f       	add	r18, r18
    1056:	33 1f       	adc	r19, r19
    1058:	ea 95       	dec	r30
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <motor_mode+0x60>
    105c:	82 2b       	or	r24, r18
    105e:	29 c0       	rjmp	.+82     	; 0x10b2 <motor_mode+0xbe>
	for(;;) {
		if	(c_mode==FOLLOW) {	
			if (initial) {
    1060:	71 30       	cpi	r23, 0x01	; 1
    1062:	a1 f4       	brne	.+40     	; 0x108c <motor_mode+0x98>
				lf_full_speed();
    1064:	4b b1       	in	r20, 0x0b	; 11
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9c 01       	movw	r18, r24
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <motor_mode+0x7e>
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	5a 95       	dec	r21
    1074:	e2 f7       	brpl	.-8      	; 0x106e <motor_mode+0x7a>
    1076:	42 2b       	or	r20, r18
    1078:	4b b9       	out	0x0b, r20	; 11
				initial=false;
    107a:	2b b1       	in	r18, 0x0b	; 11
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <motor_mode+0x8e>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	ea 95       	dec	r30
    1084:	e2 f7       	brpl	.-8      	; 0x107e <motor_mode+0x8a>
    1086:	80 95       	com	r24
    1088:	82 23       	and	r24, r18
    108a:	13 c0       	rjmp	.+38     	; 0x10b2 <motor_mode+0xbe>
			}
//			uint16_t c_speed [2] = {motor_get_speed(LEFT),motor_get_speed(RIGHT)};

    108c:	73 30       	cpi	r23, 0x03	; 3
    108e:	99 f4       	brne	.+38     	; 0x10b6 <motor_mode+0xc2>
			uint16_t adc_vc[channel_amt];
    1090:	4b b1       	in	r20, 0x0b	; 11
    1092:	21 e0       	ldi	r18, 0x01	; 1
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	c9 01       	movw	r24, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <motor_mode+0xaa>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	ea 95       	dec	r30
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <motor_mode+0xa6>
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <motor_mode+0xb4>
    10a4:	22 0f       	add	r18, r18
    10a6:	33 1f       	adc	r19, r19
    10a8:	5a 95       	dec	r21
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <motor_mode+0xb0>
    10ac:	82 2b       	or	r24, r18
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8b b9       	out	0x0b, r24	; 11
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <motor_mode+0xea>
			for (uint8_t i=0;i<channel_amt;++i) {
				adc_vc[i]=adc_get_val(i);
			}
    10b6:	74 30       	cpi	r23, 0x04	; 4
    10b8:	99 f4       	brne	.+38     	; 0x10e0 <motor_mode+0xec>
			
    10ba:	8b b1       	in	r24, 0x0b	; 11
    10bc:	21 e0       	ldi	r18, 0x01	; 1
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	d9 01       	movw	r26, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <motor_mode+0xd4>
    10c4:	aa 0f       	add	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	5a 95       	dec	r21
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <motor_mode+0xd0>
    10cc:	ad 01       	movw	r20, r26
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <motor_mode+0xe0>
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	ea 95       	dec	r30
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <motor_mode+0xdc>
    10d8:	42 2b       	or	r20, r18
    10da:	48 2b       	or	r20, r24
    10dc:	4b b9       	out	0x0b, r20	; 11
			uint8_t  maxi=channel_amt;
    10de:	78 83       	st	Y, r23
			uint16_t maxv=0;
			for (uint8_t i=0;i<channel_amt;++i) {
				if (adc_vc[i]>maxv) {
					maxi=i;
					maxv=adc_vc[i];
    10e0:	66 23       	and	r22, r22
    10e2:	11 f0       	breq	.+4      	; 0x10e8 <motor_mode+0xf4>
    10e4:	22 e5       	ldi	r18, 0x52	; 82
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <motor_mode+0xf6>
    10e8:	2c e4       	ldi	r18, 0x4C	; 76
				}
			}
			
			#ifdef debug
    10ea:	88 81       	ld	r24, Y
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	82 2f       	mov	r24, r18
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9f 93       	push	r25
    10f8:	8f 93       	push	r24
    10fa:	8e e2       	ldi	r24, 0x2E	; 46
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	9f 93       	push	r25
    1100:	8f 93       	push	r24
    1102:	0e 94 be 09 	call	0x137c	; 0x137c <printf>
			print_adc_values();
			printf_P(PSTR("\nMax Channel [L 0 1 2 3 R]: %d;v=%d"),maxi,maxv);
			#endif
    1106:	88 81       	ld	r24, Y
    1108:	2d b7       	in	r18, 0x3d	; 61
    110a:	3e b7       	in	r19, 0x3e	; 62
    110c:	2a 5f       	subi	r18, 0xFA	; 250
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	3e bf       	out	0x3e, r19	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	2d bf       	out	0x3d, r18	; 61

    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <lf_stop_speed>:
			_delay_ms(200);
			// do at every adc calc or pwm vector.
		}
		else if	(c_mode==TEST) {
			if (initial) {
				motor_mode(MOTOR_L_FWD,LEFT);
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	83 e0       	ldi	r24, 0x03	; 3
    1124:	0e 94 fa 07 	call	0xff4	; 0xff4 <motor_mode>
				motor_mode(MOTOR_R_FWD,RIGHT);
    1128:	61 e0       	ldi	r22, 0x01	; 1
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	0e 94 fa 07 	call	0xff4	; 0xff4 <motor_mode>
				initial=false;
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	95 e0       	ldi	r25, 0x05	; 5
    1136:	0e 94 47 07 	call	0xe8e	; 0xe8e <motor_set_speed>
			}
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	95 e0       	ldi	r25, 0x05	; 5
    1140:	0e 94 47 07 	call	0xe8e	; 0xe8e <motor_set_speed>
			static uint16_t sp;
    1144:	08 95       	ret

00001146 <motors_init>:
			
			motor_set_speed(sp,LEFT);
			motor_set_speed(sp,RIGHT);
    1146:	8a b1       	in	r24, 0x0a	; 10
    1148:	8a 6a       	ori	r24, 0xAA	; 170
    114a:	8a b9       	out	0x0a, r24	; 10
			_delay_ms(2);
    114c:	0e 94 90 08 	call	0x1120	; 0x1120 <lf_stop_speed>
			//if (!(sp%0x100))
    1150:	08 95       	ret

00001152 <lf_full_speed>:
			}
			else if ((adc_vc[0]==adc_vc[1])&&(adc_vc[1]==adc_vc[2])&&(adc_vc[2]==adc_vc[3])){
				//lf_full_speed();
				dir=FWD;
			}
			*/
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 ec       	ldi	r25, 0xC0	; 192
    1158:	0e 94 47 07 	call	0xe8e	; 0xe8e <motor_set_speed>

    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 ec       	ldi	r25, 0xC0	; 192
    1162:	0e 94 47 07 	call	0xe8e	; 0xe8e <motor_set_speed>
			_delay_ms(200);
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	0e 94 fa 07 	call	0xff4	; 0xff4 <motor_mode>
			// do at every adc calc or pwm vector.
    116e:	61 e0       	ldi	r22, 0x01	; 1
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 fa 07 	call	0xff4	; 0xff4 <motor_mode>
		}
    1176:	08 95       	ret

00001178 <joy_init>:
#include <avr/interrupt.h>
#include <avr/pgmspace.h>

void joy_init(void) {
	// Set pins as inputs.
	DDRB&=(uint8_t)~((1<<4)|(1<<6)|(1<<7));
    1178:	84 b1       	in	r24, 0x04	; 4
    117a:	8f 72       	andi	r24, 0x2F	; 47
    117c:	84 b9       	out	0x04, r24	; 4
	DDRE&=(uint8_t)~((1<<2)|(1<<3));
    117e:	8d b1       	in	r24, 0x0d	; 13
    1180:	83 7f       	andi	r24, 0xF3	; 243
    1182:	8d b9       	out	0x0d, r24	; 13
	// Enable pullup resistors.
	PORTB|=((1<<4)|(1<<6)|(1<<7));
    1184:	85 b1       	in	r24, 0x05	; 5
    1186:	80 6d       	ori	r24, 0xD0	; 208
    1188:	85 b9       	out	0x05, r24	; 5
	PORTE|=((1<<2)|(1<<3));
    118a:	8e b1       	in	r24, 0x0e	; 14
    118c:	8c 60       	ori	r24, 0x0C	; 12
    118e:	8e b9       	out	0x0e, r24	; 14
	//IN	= PINB&(1<<4)
	
	// Enable Pin Change interupts. Disable INT0
	//EIMSK|=((1<<PCIE1)|(1<<PCIE0));
	//EIMSK&=(uint8_t)~(1<<INT0);
	EIMSK=(1<<PCIE1)|(1<<PCIE0);
    1190:	80 ec       	ldi	r24, 0xC0	; 192
    1192:	8d bb       	out	0x1d, r24	; 29
	PCMSK1=(1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
    1194:	80 ed       	ldi	r24, 0xD0	; 208
    1196:	80 93 6c 00 	sts	0x006C, r24
	PCMSK0=(1<<PCINT3)|(1<<PCINT2);	
    119a:	8c e0       	ldi	r24, 0x0C	; 12
    119c:	80 93 6b 00 	sts	0x006B, r24
	
}
    11a0:	08 95       	ret

000011a2 <__vector_3>:
	else
		fprintf_P(stderr,PSTR("\n[debug] PE? Released"));
	#endif
}

ISR(PCINT1_vect) {
    11a2:	1f 92       	push	r1
    11a4:	0f 92       	push	r0
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	0f 92       	push	r0
    11aa:	11 24       	eor	r1, r1
    11ac:	1f 93       	push	r17
    11ae:	8f 93       	push	r24
    11b0:	9f 93       	push	r25
	//PB7,4,6
	uint8_t iPINB = (uint8_t)~PINB;
    11b2:	93 b1       	in	r25, 0x03	; 3
    11b4:	90 95       	com	r25
	if (iPINB&((1<<7)|(1<<6)|(1<<4))) {
    11b6:	19 2f       	mov	r17, r25
    11b8:	89 2f       	mov	r24, r25
    11ba:	80 7d       	andi	r24, 0xD0	; 208
    11bc:	b9 f0       	breq	.+46     	; 0x11ec <__vector_3+0x4a>
		if (iPINB&(1<<7)) {// Down
    11be:	97 ff       	sbrs	r25, 7
    11c0:	06 c0       	rjmp	.+12     	; 0x11ce <__vector_3+0x2c>
			adc_calibrate_update();
    11c2:	0e 94 14 03 	call	0x628	; 0x628 <adc_calibrate_update>
			#ifdef debug
			print_adc_calibration();
    11c6:	0e 94 8f 03 	call	0x71e	; 0x71e <print_adc_calibration>
			print_adc_values();
    11ca:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <print_adc_values>
			#endif
		}
		if (iPINB&(1<<4)) {// In
    11ce:	14 ff       	sbrs	r17, 4
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <__vector_3+0x38>
			#ifdef debug
			print_adc_calibration();
    11d2:	0e 94 8f 03 	call	0x71e	; 0x71e <print_adc_calibration>
			print_adc_values();
    11d6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <print_adc_values>
			#endif
		}
		if (iPINB&(1<<6)) {// Up
    11da:	16 ff       	sbrs	r17, 6
    11dc:	17 c0       	rjmp	.+46     	; 0x120c <__vector_3+0x6a>
			adc_calibrate_clear();
    11de:	0e 94 0a 03 	call	0x614	; 0x614 <adc_calibrate_clear>
			#ifdef debug
			print_adc_calibration();
    11e2:	0e 94 8f 03 	call	0x71e	; 0x71e <print_adc_calibration>
			print_adc_values();
    11e6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <print_adc_values>
    11ea:	10 c0       	rjmp	.+32     	; 0x120c <__vector_3+0x6a>
			#endif
		}
	}
	#ifdef debug
	else
		fprintf_P(stderr,PSTR("\n[debug] PB? Released"));
    11ec:	83 e5       	ldi	r24, 0x53	; 83
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	9f 93       	push	r25
    11f2:	8f 93       	push	r24
    11f4:	80 91 e9 01 	lds	r24, 0x01E9
    11f8:	90 91 ea 01 	lds	r25, 0x01EA
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
	#endif
}
    120c:	9f 91       	pop	r25
    120e:	8f 91       	pop	r24
    1210:	1f 91       	pop	r17
    1212:	0f 90       	pop	r0
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	0f 90       	pop	r0
    1218:	1f 90       	pop	r1
    121a:	18 95       	reti

0000121c <__vector_2>:
	PCMSK1=(1<<PCINT15)|(1<<PCINT14)|(1<<PCINT12);
	PCMSK0=(1<<PCINT3)|(1<<PCINT2);	
	
}

ISR(PCINT0_vect) {
    121c:	1f 92       	push	r1
    121e:	0f 92       	push	r0
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	0f 92       	push	r0
    1224:	11 24       	eor	r1, r1
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
	//PE2,3
	uint8_t iPINE = (uint8_t)~PINE;
    122e:	8c b1       	in	r24, 0x0c	; 12
	if (iPINE&((1<<2)|(1<<3))) {
    1230:	80 95       	com	r24
    1232:	c8 2f       	mov	r28, r24
    1234:	d0 e0       	ldi	r29, 0x00	; 0
    1236:	ce 01       	movw	r24, r28
    1238:	8c 70       	andi	r24, 0x0C	; 12
    123a:	90 70       	andi	r25, 0x00	; 0
    123c:	89 2b       	or	r24, r25
    123e:	09 f4       	brne	.+2      	; 0x1242 <__vector_2+0x26>
    1240:	54 c0       	rjmp	.+168    	; 0x12ea <__vector_2+0xce>
		if (iPINE&(1<<2)) {// Left
    1242:	c2 ff       	sbrs	r28, 2
    1244:	27 c0       	rjmp	.+78     	; 0x1294 <__vector_2+0x78>
			if (c_mode!=WAIT) {
    1246:	80 91 d2 01 	lds	r24, 0x01D2
    124a:	88 23       	and	r24, r24
    124c:	29 f0       	breq	.+10     	; 0x1258 <__vector_2+0x3c>
				c_mode=WAIT;
    124e:	10 92 d2 01 	sts	0x01D2, r1
				lf_stop_speed();
    1252:	0e 94 90 08 	call	0x1120	; 0x1120 <lf_stop_speed>
    1256:	05 c0       	rjmp	.+10     	; 0x1262 <__vector_2+0x46>
			}
			else {
				initial=true;
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	80 93 e4 01 	sts	0x01E4, r24
				c_mode=TEST;
    125e:	80 93 d2 01 	sts	0x01D2, r24
			}
			#ifdef debug
			fprintf_P(stderr,PSTR("\nCurrent Mode (T/W) = %d"),c_mode);
    1262:	80 91 d2 01 	lds	r24, 0x01D2
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9f 93       	push	r25
    126a:	8f 93       	push	r24
    126c:	87 e9       	ldi	r24, 0x97	; 151
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	80 91 e9 01 	lds	r24, 0x01E9
    1278:	90 91 ea 01 	lds	r25, 0x01EA
    127c:	9f 93       	push	r25
    127e:	8f 93       	push	r24
    1280:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
    1284:	8d b7       	in	r24, 0x3d	; 61
    1286:	9e b7       	in	r25, 0x3e	; 62
    1288:	06 96       	adiw	r24, 0x06	; 6
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	9e bf       	out	0x3e, r25	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	8d bf       	out	0x3d, r24	; 61
			#endif
		}
		if (iPINE&(1<<3)) {// Right
    1294:	c3 ff       	sbrs	r28, 3
    1296:	39 c0       	rjmp	.+114    	; 0x130a <__vector_2+0xee>
			if (c_mode!=WAIT) {
    1298:	80 91 d2 01 	lds	r24, 0x01D2
    129c:	88 23       	and	r24, r24
    129e:	29 f0       	breq	.+10     	; 0x12aa <__vector_2+0x8e>
				c_mode=WAIT;
    12a0:	10 92 d2 01 	sts	0x01D2, r1
				lf_stop_speed();
    12a4:	0e 94 90 08 	call	0x1120	; 0x1120 <lf_stop_speed>
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <__vector_2+0x9a>
			}
			else {
				initial=true;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	80 93 e4 01 	sts	0x01E4, r24
				c_mode=FOLLOW;
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	80 93 d2 01 	sts	0x01D2, r24
			}
			#ifdef debug	
			fprintf_P(stderr,PSTR("\nCurrent Mode (F/W)= %d"),c_mode);
    12b6:	80 91 d2 01 	lds	r24, 0x01D2
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9f 93       	push	r25
    12be:	8f 93       	push	r24
    12c0:	8f e7       	ldi	r24, 0x7F	; 127
    12c2:	92 e0       	ldi	r25, 0x02	; 2
    12c4:	9f 93       	push	r25
    12c6:	8f 93       	push	r24
    12c8:	80 91 e9 01 	lds	r24, 0x01E9
    12cc:	90 91 ea 01 	lds	r25, 0x01EA
    12d0:	9f 93       	push	r25
    12d2:	8f 93       	push	r24
    12d4:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
    12d8:	8d b7       	in	r24, 0x3d	; 61
    12da:	9e b7       	in	r25, 0x3e	; 62
    12dc:	06 96       	adiw	r24, 0x06	; 6
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	9e bf       	out	0x3e, r25	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	8d bf       	out	0x3d, r24	; 61
    12e8:	10 c0       	rjmp	.+32     	; 0x130a <__vector_2+0xee>
			#endif
		}
	}
	#ifdef debug
	else
		fprintf_P(stderr,PSTR("\n[debug] PE? Released"));
    12ea:	89 e6       	ldi	r24, 0x69	; 105
    12ec:	92 e0       	ldi	r25, 0x02	; 2
    12ee:	9f 93       	push	r25
    12f0:	8f 93       	push	r24
    12f2:	80 91 e9 01 	lds	r24, 0x01E9
    12f6:	90 91 ea 01 	lds	r25, 0x01EA
    12fa:	9f 93       	push	r25
    12fc:	8f 93       	push	r24
    12fe:	0e 94 a1 09 	call	0x1342	; 0x1342 <fprintf_P>
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
	#endif
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	0f 90       	pop	r0
    1318:	1f 90       	pop	r1
    131a:	18 95       	reti

0000131c <fprintf>:
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e9       	ldi	r30, 0x94	; 148
    1322:	f9 e0       	ldi	r31, 0x09	; 9
    1324:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__prologue_saves__+0x20>
    1328:	ce 01       	movw	r24, r28
    132a:	09 96       	adiw	r24, 0x09	; 9
    132c:	ac 01       	movw	r20, r24
    132e:	6f 81       	ldd	r22, Y+7	; 0x07
    1330:	78 85       	ldd	r23, Y+8	; 0x08
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	0e 94 01 0a 	call	0x1402	; 0x1402 <vfprintf>
    133a:	20 96       	adiw	r28, 0x00	; 0
    133c:	e2 e0       	ldi	r30, 0x02	; 2
    133e:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__epilogue_restores__+0x20>

00001342 <fprintf_P>:
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e7 ea       	ldi	r30, 0xA7	; 167
    1348:	f9 e0       	ldi	r31, 0x09	; 9
    134a:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__prologue_saves__+0x1c>
    134e:	0f 81       	ldd	r16, Y+7	; 0x07
    1350:	18 85       	ldd	r17, Y+8	; 0x08
    1352:	9e 01       	movw	r18, r28
    1354:	25 5f       	subi	r18, 0xF5	; 245
    1356:	3f 4f       	sbci	r19, 0xFF	; 255
    1358:	f8 01       	movw	r30, r16
    135a:	83 81       	ldd	r24, Z+3	; 0x03
    135c:	88 60       	ori	r24, 0x08	; 8
    135e:	83 83       	std	Z+3, r24	; 0x03
    1360:	a9 01       	movw	r20, r18
    1362:	69 85       	ldd	r22, Y+9	; 0x09
    1364:	7a 85       	ldd	r23, Y+10	; 0x0a
    1366:	c8 01       	movw	r24, r16
    1368:	0e 94 01 0a 	call	0x1402	; 0x1402 <vfprintf>
    136c:	f8 01       	movw	r30, r16
    136e:	23 81       	ldd	r18, Z+3	; 0x03
    1370:	27 7f       	andi	r18, 0xF7	; 247
    1372:	23 83       	std	Z+3, r18	; 0x03
    1374:	20 96       	adiw	r28, 0x00	; 0
    1376:	e4 e0       	ldi	r30, 0x04	; 4
    1378:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__epilogue_restores__+0x1c>

0000137c <printf>:
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	e4 ec       	ldi	r30, 0xC4	; 196
    1382:	f9 e0       	ldi	r31, 0x09	; 9
    1384:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__prologue_saves__+0x20>
    1388:	fe 01       	movw	r30, r28
    138a:	35 96       	adiw	r30, 0x05	; 5
    138c:	61 91       	ld	r22, Z+
    138e:	71 91       	ld	r23, Z+
    1390:	af 01       	movw	r20, r30
    1392:	80 91 e7 01 	lds	r24, 0x01E7
    1396:	90 91 e8 01 	lds	r25, 0x01E8
    139a:	0e 94 01 0a 	call	0x1402	; 0x1402 <vfprintf>
    139e:	20 96       	adiw	r28, 0x00	; 0
    13a0:	e2 e0       	ldi	r30, 0x02	; 2
    13a2:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__epilogue_restores__+0x20>

000013a6 <printf_P>:
    13a6:	a0 e0       	ldi	r26, 0x00	; 0
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e9 ed       	ldi	r30, 0xD9	; 217
    13ac:	f9 e0       	ldi	r31, 0x09	; 9
    13ae:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__prologue_saves__+0x20>
    13b2:	9e 01       	movw	r18, r28
    13b4:	2b 5f       	subi	r18, 0xFB	; 251
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	f9 01       	movw	r30, r18
    13ba:	61 91       	ld	r22, Z+
    13bc:	71 91       	ld	r23, Z+
    13be:	9f 01       	movw	r18, r30
    13c0:	a0 91 e7 01 	lds	r26, 0x01E7
    13c4:	b0 91 e8 01 	lds	r27, 0x01E8
    13c8:	fd 01       	movw	r30, r26
    13ca:	83 81       	ldd	r24, Z+3	; 0x03
    13cc:	88 60       	ori	r24, 0x08	; 8
    13ce:	83 83       	std	Z+3, r24	; 0x03
    13d0:	a9 01       	movw	r20, r18
    13d2:	80 91 e7 01 	lds	r24, 0x01E7
    13d6:	90 91 e8 01 	lds	r25, 0x01E8
    13da:	0e 94 01 0a 	call	0x1402	; 0x1402 <vfprintf>
    13de:	e0 91 e7 01 	lds	r30, 0x01E7
    13e2:	f0 91 e8 01 	lds	r31, 0x01E8
    13e6:	23 81       	ldd	r18, Z+3	; 0x03
    13e8:	27 7f       	andi	r18, 0xF7	; 247
    13ea:	23 83       	std	Z+3, r18	; 0x03
    13ec:	20 96       	adiw	r28, 0x00	; 0
    13ee:	e2 e0       	ldi	r30, 0x02	; 2
    13f0:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__epilogue_restores__+0x20>

000013f4 <putchar>:
    13f4:	60 91 e7 01 	lds	r22, 0x01E7
    13f8:	70 91 e8 01 	lds	r23, 0x01E8
    13fc:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    1400:	08 95       	ret

00001402 <vfprintf>:
    1402:	ab e0       	ldi	r26, 0x0B	; 11
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e0       	ldi	r30, 0x07	; 7
    1408:	fa e0       	ldi	r31, 0x0A	; 10
    140a:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__prologue_saves__>
    140e:	3c 01       	movw	r6, r24
    1410:	2b 01       	movw	r4, r22
    1412:	5a 01       	movw	r10, r20
    1414:	fc 01       	movw	r30, r24
    1416:	17 82       	std	Z+7, r1	; 0x07
    1418:	16 82       	std	Z+6, r1	; 0x06
    141a:	83 81       	ldd	r24, Z+3	; 0x03
    141c:	81 fd       	sbrc	r24, 1
    141e:	03 c0       	rjmp	.+6      	; 0x1426 <vfprintf+0x24>
    1420:	6f ef       	ldi	r22, 0xFF	; 255
    1422:	7f ef       	ldi	r23, 0xFF	; 255
    1424:	c8 c1       	rjmp	.+912    	; 0x17b6 <vfprintf+0x3b4>
    1426:	9a e0       	ldi	r25, 0x0A	; 10
    1428:	89 2e       	mov	r8, r25
    142a:	1e 01       	movw	r2, r28
    142c:	08 94       	sec
    142e:	21 1c       	adc	r2, r1
    1430:	31 1c       	adc	r3, r1
    1432:	f3 01       	movw	r30, r6
    1434:	23 81       	ldd	r18, Z+3	; 0x03
    1436:	f2 01       	movw	r30, r4
    1438:	23 fd       	sbrc	r18, 3
    143a:	85 91       	lpm	r24, Z+
    143c:	23 ff       	sbrs	r18, 3
    143e:	81 91       	ld	r24, Z+
    1440:	2f 01       	movw	r4, r30
    1442:	88 23       	and	r24, r24
    1444:	09 f4       	brne	.+2      	; 0x1448 <vfprintf+0x46>
    1446:	b4 c1       	rjmp	.+872    	; 0x17b0 <vfprintf+0x3ae>
    1448:	85 32       	cpi	r24, 0x25	; 37
    144a:	39 f4       	brne	.+14     	; 0x145a <vfprintf+0x58>
    144c:	23 fd       	sbrc	r18, 3
    144e:	85 91       	lpm	r24, Z+
    1450:	23 ff       	sbrs	r18, 3
    1452:	81 91       	ld	r24, Z+
    1454:	2f 01       	movw	r4, r30
    1456:	85 32       	cpi	r24, 0x25	; 37
    1458:	29 f4       	brne	.+10     	; 0x1464 <vfprintf+0x62>
    145a:	b3 01       	movw	r22, r6
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    1462:	e7 cf       	rjmp	.-50     	; 0x1432 <vfprintf+0x30>
    1464:	98 2f       	mov	r25, r24
    1466:	dd 24       	eor	r13, r13
    1468:	cc 24       	eor	r12, r12
    146a:	99 24       	eor	r9, r9
    146c:	ff e1       	ldi	r31, 0x1F	; 31
    146e:	fd 15       	cp	r31, r13
    1470:	d0 f0       	brcs	.+52     	; 0x14a6 <vfprintf+0xa4>
    1472:	9b 32       	cpi	r25, 0x2B	; 43
    1474:	69 f0       	breq	.+26     	; 0x1490 <vfprintf+0x8e>
    1476:	9c 32       	cpi	r25, 0x2C	; 44
    1478:	28 f4       	brcc	.+10     	; 0x1484 <vfprintf+0x82>
    147a:	90 32       	cpi	r25, 0x20	; 32
    147c:	59 f0       	breq	.+22     	; 0x1494 <vfprintf+0x92>
    147e:	93 32       	cpi	r25, 0x23	; 35
    1480:	91 f4       	brne	.+36     	; 0x14a6 <vfprintf+0xa4>
    1482:	0e c0       	rjmp	.+28     	; 0x14a0 <vfprintf+0x9e>
    1484:	9d 32       	cpi	r25, 0x2D	; 45
    1486:	49 f0       	breq	.+18     	; 0x149a <vfprintf+0x98>
    1488:	90 33       	cpi	r25, 0x30	; 48
    148a:	69 f4       	brne	.+26     	; 0x14a6 <vfprintf+0xa4>
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	24 c0       	rjmp	.+72     	; 0x14d8 <vfprintf+0xd6>
    1490:	52 e0       	ldi	r21, 0x02	; 2
    1492:	d5 2a       	or	r13, r21
    1494:	84 e0       	ldi	r24, 0x04	; 4
    1496:	d8 2a       	or	r13, r24
    1498:	28 c0       	rjmp	.+80     	; 0x14ea <vfprintf+0xe8>
    149a:	98 e0       	ldi	r25, 0x08	; 8
    149c:	d9 2a       	or	r13, r25
    149e:	25 c0       	rjmp	.+74     	; 0x14ea <vfprintf+0xe8>
    14a0:	e0 e1       	ldi	r30, 0x10	; 16
    14a2:	de 2a       	or	r13, r30
    14a4:	22 c0       	rjmp	.+68     	; 0x14ea <vfprintf+0xe8>
    14a6:	d7 fc       	sbrc	r13, 7
    14a8:	29 c0       	rjmp	.+82     	; 0x14fc <vfprintf+0xfa>
    14aa:	89 2f       	mov	r24, r25
    14ac:	80 53       	subi	r24, 0x30	; 48
    14ae:	8a 30       	cpi	r24, 0x0A	; 10
    14b0:	70 f4       	brcc	.+28     	; 0x14ce <vfprintf+0xcc>
    14b2:	d6 fe       	sbrs	r13, 6
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <vfprintf+0xbe>
    14b6:	98 9c       	mul	r9, r8
    14b8:	90 2c       	mov	r9, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	98 0e       	add	r9, r24
    14be:	15 c0       	rjmp	.+42     	; 0x14ea <vfprintf+0xe8>
    14c0:	c8 9c       	mul	r12, r8
    14c2:	c0 2c       	mov	r12, r0
    14c4:	11 24       	eor	r1, r1
    14c6:	c8 0e       	add	r12, r24
    14c8:	f0 e2       	ldi	r31, 0x20	; 32
    14ca:	df 2a       	or	r13, r31
    14cc:	0e c0       	rjmp	.+28     	; 0x14ea <vfprintf+0xe8>
    14ce:	9e 32       	cpi	r25, 0x2E	; 46
    14d0:	29 f4       	brne	.+10     	; 0x14dc <vfprintf+0xda>
    14d2:	d6 fc       	sbrc	r13, 6
    14d4:	6d c1       	rjmp	.+730    	; 0x17b0 <vfprintf+0x3ae>
    14d6:	40 e4       	ldi	r20, 0x40	; 64
    14d8:	d4 2a       	or	r13, r20
    14da:	07 c0       	rjmp	.+14     	; 0x14ea <vfprintf+0xe8>
    14dc:	9c 36       	cpi	r25, 0x6C	; 108
    14de:	19 f4       	brne	.+6      	; 0x14e6 <vfprintf+0xe4>
    14e0:	50 e8       	ldi	r21, 0x80	; 128
    14e2:	d5 2a       	or	r13, r21
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <vfprintf+0xe8>
    14e6:	98 36       	cpi	r25, 0x68	; 104
    14e8:	49 f4       	brne	.+18     	; 0x14fc <vfprintf+0xfa>
    14ea:	f2 01       	movw	r30, r4
    14ec:	23 fd       	sbrc	r18, 3
    14ee:	95 91       	lpm	r25, Z+
    14f0:	23 ff       	sbrs	r18, 3
    14f2:	91 91       	ld	r25, Z+
    14f4:	2f 01       	movw	r4, r30
    14f6:	99 23       	and	r25, r25
    14f8:	09 f0       	breq	.+2      	; 0x14fc <vfprintf+0xfa>
    14fa:	b8 cf       	rjmp	.-144    	; 0x146c <vfprintf+0x6a>
    14fc:	89 2f       	mov	r24, r25
    14fe:	85 54       	subi	r24, 0x45	; 69
    1500:	83 30       	cpi	r24, 0x03	; 3
    1502:	18 f0       	brcs	.+6      	; 0x150a <vfprintf+0x108>
    1504:	80 52       	subi	r24, 0x20	; 32
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	38 f4       	brcc	.+14     	; 0x1518 <vfprintf+0x116>
    150a:	44 e0       	ldi	r20, 0x04	; 4
    150c:	50 e0       	ldi	r21, 0x00	; 0
    150e:	a4 0e       	add	r10, r20
    1510:	b5 1e       	adc	r11, r21
    1512:	5f e3       	ldi	r21, 0x3F	; 63
    1514:	59 83       	std	Y+1, r21	; 0x01
    1516:	0f c0       	rjmp	.+30     	; 0x1536 <vfprintf+0x134>
    1518:	93 36       	cpi	r25, 0x63	; 99
    151a:	31 f0       	breq	.+12     	; 0x1528 <vfprintf+0x126>
    151c:	93 37       	cpi	r25, 0x73	; 115
    151e:	79 f0       	breq	.+30     	; 0x153e <vfprintf+0x13c>
    1520:	93 35       	cpi	r25, 0x53	; 83
    1522:	09 f0       	breq	.+2      	; 0x1526 <vfprintf+0x124>
    1524:	56 c0       	rjmp	.+172    	; 0x15d2 <vfprintf+0x1d0>
    1526:	20 c0       	rjmp	.+64     	; 0x1568 <vfprintf+0x166>
    1528:	f5 01       	movw	r30, r10
    152a:	80 81       	ld	r24, Z
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	42 e0       	ldi	r20, 0x02	; 2
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	a4 0e       	add	r10, r20
    1534:	b5 1e       	adc	r11, r21
    1536:	71 01       	movw	r14, r2
    1538:	01 e0       	ldi	r16, 0x01	; 1
    153a:	10 e0       	ldi	r17, 0x00	; 0
    153c:	12 c0       	rjmp	.+36     	; 0x1562 <vfprintf+0x160>
    153e:	f5 01       	movw	r30, r10
    1540:	e0 80       	ld	r14, Z
    1542:	f1 80       	ldd	r15, Z+1	; 0x01
    1544:	d6 fc       	sbrc	r13, 6
    1546:	03 c0       	rjmp	.+6      	; 0x154e <vfprintf+0x14c>
    1548:	6f ef       	ldi	r22, 0xFF	; 255
    154a:	7f ef       	ldi	r23, 0xFF	; 255
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <vfprintf+0x150>
    154e:	69 2d       	mov	r22, r9
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	42 e0       	ldi	r20, 0x02	; 2
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	a4 0e       	add	r10, r20
    1558:	b5 1e       	adc	r11, r21
    155a:	c7 01       	movw	r24, r14
    155c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <strnlen>
    1560:	8c 01       	movw	r16, r24
    1562:	5f e7       	ldi	r21, 0x7F	; 127
    1564:	d5 22       	and	r13, r21
    1566:	14 c0       	rjmp	.+40     	; 0x1590 <vfprintf+0x18e>
    1568:	f5 01       	movw	r30, r10
    156a:	e0 80       	ld	r14, Z
    156c:	f1 80       	ldd	r15, Z+1	; 0x01
    156e:	d6 fc       	sbrc	r13, 6
    1570:	03 c0       	rjmp	.+6      	; 0x1578 <vfprintf+0x176>
    1572:	6f ef       	ldi	r22, 0xFF	; 255
    1574:	7f ef       	ldi	r23, 0xFF	; 255
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0x17a>
    1578:	69 2d       	mov	r22, r9
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	a4 0e       	add	r10, r20
    1582:	b5 1e       	adc	r11, r21
    1584:	c7 01       	movw	r24, r14
    1586:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <strnlen_P>
    158a:	8c 01       	movw	r16, r24
    158c:	50 e8       	ldi	r21, 0x80	; 128
    158e:	d5 2a       	or	r13, r21
    1590:	d3 fe       	sbrs	r13, 3
    1592:	07 c0       	rjmp	.+14     	; 0x15a2 <vfprintf+0x1a0>
    1594:	1a c0       	rjmp	.+52     	; 0x15ca <vfprintf+0x1c8>
    1596:	b3 01       	movw	r22, r6
    1598:	80 e2       	ldi	r24, 0x20	; 32
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    15a0:	ca 94       	dec	r12
    15a2:	8c 2d       	mov	r24, r12
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	08 17       	cp	r16, r24
    15a8:	19 07       	cpc	r17, r25
    15aa:	a8 f3       	brcs	.-22     	; 0x1596 <vfprintf+0x194>
    15ac:	0e c0       	rjmp	.+28     	; 0x15ca <vfprintf+0x1c8>
    15ae:	f7 01       	movw	r30, r14
    15b0:	d7 fc       	sbrc	r13, 7
    15b2:	85 91       	lpm	r24, Z+
    15b4:	d7 fe       	sbrs	r13, 7
    15b6:	81 91       	ld	r24, Z+
    15b8:	7f 01       	movw	r14, r30
    15ba:	b3 01       	movw	r22, r6
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    15c2:	c1 10       	cpse	r12, r1
    15c4:	ca 94       	dec	r12
    15c6:	01 50       	subi	r16, 0x01	; 1
    15c8:	10 40       	sbci	r17, 0x00	; 0
    15ca:	01 15       	cp	r16, r1
    15cc:	11 05       	cpc	r17, r1
    15ce:	79 f7       	brne	.-34     	; 0x15ae <vfprintf+0x1ac>
    15d0:	ec c0       	rjmp	.+472    	; 0x17aa <vfprintf+0x3a8>
    15d2:	94 36       	cpi	r25, 0x64	; 100
    15d4:	11 f0       	breq	.+4      	; 0x15da <vfprintf+0x1d8>
    15d6:	99 36       	cpi	r25, 0x69	; 105
    15d8:	71 f5       	brne	.+92     	; 0x1636 <vfprintf+0x234>
    15da:	d7 fe       	sbrs	r13, 7
    15dc:	08 c0       	rjmp	.+16     	; 0x15ee <vfprintf+0x1ec>
    15de:	f5 01       	movw	r30, r10
    15e0:	e0 80       	ld	r14, Z
    15e2:	f1 80       	ldd	r15, Z+1	; 0x01
    15e4:	02 81       	ldd	r16, Z+2	; 0x02
    15e6:	13 81       	ldd	r17, Z+3	; 0x03
    15e8:	44 e0       	ldi	r20, 0x04	; 4
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	0a c0       	rjmp	.+20     	; 0x1602 <vfprintf+0x200>
    15ee:	f5 01       	movw	r30, r10
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	7c 01       	movw	r14, r24
    15f6:	00 27       	eor	r16, r16
    15f8:	f7 fc       	sbrc	r15, 7
    15fa:	00 95       	com	r16
    15fc:	10 2f       	mov	r17, r16
    15fe:	42 e0       	ldi	r20, 0x02	; 2
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	a4 0e       	add	r10, r20
    1604:	b5 1e       	adc	r11, r21
    1606:	5f e6       	ldi	r21, 0x6F	; 111
    1608:	d5 22       	and	r13, r21
    160a:	17 ff       	sbrs	r17, 7
    160c:	0a c0       	rjmp	.+20     	; 0x1622 <vfprintf+0x220>
    160e:	10 95       	com	r17
    1610:	00 95       	com	r16
    1612:	f0 94       	com	r15
    1614:	e0 94       	com	r14
    1616:	e1 1c       	adc	r14, r1
    1618:	f1 1c       	adc	r15, r1
    161a:	01 1d       	adc	r16, r1
    161c:	11 1d       	adc	r17, r1
    161e:	80 e8       	ldi	r24, 0x80	; 128
    1620:	d8 2a       	or	r13, r24
    1622:	2a e0       	ldi	r18, 0x0A	; 10
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	a1 01       	movw	r20, r2
    1628:	c8 01       	movw	r24, r16
    162a:	b7 01       	movw	r22, r14
    162c:	0e 94 22 0c 	call	0x1844	; 0x1844 <__ultoa_invert>
    1630:	f8 2e       	mov	r15, r24
    1632:	f2 18       	sub	r15, r2
    1634:	40 c0       	rjmp	.+128    	; 0x16b6 <vfprintf+0x2b4>
    1636:	95 37       	cpi	r25, 0x75	; 117
    1638:	29 f4       	brne	.+10     	; 0x1644 <vfprintf+0x242>
    163a:	1d 2d       	mov	r17, r13
    163c:	1f 7e       	andi	r17, 0xEF	; 239
    163e:	2a e0       	ldi	r18, 0x0A	; 10
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	1d c0       	rjmp	.+58     	; 0x167e <vfprintf+0x27c>
    1644:	1d 2d       	mov	r17, r13
    1646:	19 7f       	andi	r17, 0xF9	; 249
    1648:	9f 36       	cpi	r25, 0x6F	; 111
    164a:	61 f0       	breq	.+24     	; 0x1664 <vfprintf+0x262>
    164c:	90 37       	cpi	r25, 0x70	; 112
    164e:	20 f4       	brcc	.+8      	; 0x1658 <vfprintf+0x256>
    1650:	98 35       	cpi	r25, 0x58	; 88
    1652:	09 f0       	breq	.+2      	; 0x1656 <vfprintf+0x254>
    1654:	ad c0       	rjmp	.+346    	; 0x17b0 <vfprintf+0x3ae>
    1656:	0f c0       	rjmp	.+30     	; 0x1676 <vfprintf+0x274>
    1658:	90 37       	cpi	r25, 0x70	; 112
    165a:	39 f0       	breq	.+14     	; 0x166a <vfprintf+0x268>
    165c:	98 37       	cpi	r25, 0x78	; 120
    165e:	09 f0       	breq	.+2      	; 0x1662 <vfprintf+0x260>
    1660:	a7 c0       	rjmp	.+334    	; 0x17b0 <vfprintf+0x3ae>
    1662:	04 c0       	rjmp	.+8      	; 0x166c <vfprintf+0x26a>
    1664:	28 e0       	ldi	r18, 0x08	; 8
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	0a c0       	rjmp	.+20     	; 0x167e <vfprintf+0x27c>
    166a:	10 61       	ori	r17, 0x10	; 16
    166c:	14 fd       	sbrc	r17, 4
    166e:	14 60       	ori	r17, 0x04	; 4
    1670:	20 e1       	ldi	r18, 0x10	; 16
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <vfprintf+0x27c>
    1676:	14 fd       	sbrc	r17, 4
    1678:	16 60       	ori	r17, 0x06	; 6
    167a:	20 e1       	ldi	r18, 0x10	; 16
    167c:	32 e0       	ldi	r19, 0x02	; 2
    167e:	17 ff       	sbrs	r17, 7
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <vfprintf+0x290>
    1682:	f5 01       	movw	r30, r10
    1684:	60 81       	ld	r22, Z
    1686:	71 81       	ldd	r23, Z+1	; 0x01
    1688:	82 81       	ldd	r24, Z+2	; 0x02
    168a:	93 81       	ldd	r25, Z+3	; 0x03
    168c:	44 e0       	ldi	r20, 0x04	; 4
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <vfprintf+0x2a0>
    1692:	f5 01       	movw	r30, r10
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	bc 01       	movw	r22, r24
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	42 e0       	ldi	r20, 0x02	; 2
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	a4 0e       	add	r10, r20
    16a4:	b5 1e       	adc	r11, r21
    16a6:	a1 01       	movw	r20, r2
    16a8:	0e 94 22 0c 	call	0x1844	; 0x1844 <__ultoa_invert>
    16ac:	f8 2e       	mov	r15, r24
    16ae:	f2 18       	sub	r15, r2
    16b0:	8f e7       	ldi	r24, 0x7F	; 127
    16b2:	d8 2e       	mov	r13, r24
    16b4:	d1 22       	and	r13, r17
    16b6:	d6 fe       	sbrs	r13, 6
    16b8:	0b c0       	rjmp	.+22     	; 0x16d0 <vfprintf+0x2ce>
    16ba:	5e ef       	ldi	r21, 0xFE	; 254
    16bc:	d5 22       	and	r13, r21
    16be:	f9 14       	cp	r15, r9
    16c0:	38 f4       	brcc	.+14     	; 0x16d0 <vfprintf+0x2ce>
    16c2:	d4 fe       	sbrs	r13, 4
    16c4:	07 c0       	rjmp	.+14     	; 0x16d4 <vfprintf+0x2d2>
    16c6:	d2 fc       	sbrc	r13, 2
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <vfprintf+0x2d2>
    16ca:	8f ee       	ldi	r24, 0xEF	; 239
    16cc:	d8 22       	and	r13, r24
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <vfprintf+0x2d2>
    16d0:	1f 2d       	mov	r17, r15
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <vfprintf+0x2d4>
    16d4:	19 2d       	mov	r17, r9
    16d6:	d4 fe       	sbrs	r13, 4
    16d8:	0d c0       	rjmp	.+26     	; 0x16f4 <vfprintf+0x2f2>
    16da:	fe 01       	movw	r30, r28
    16dc:	ef 0d       	add	r30, r15
    16de:	f1 1d       	adc	r31, r1
    16e0:	80 81       	ld	r24, Z
    16e2:	80 33       	cpi	r24, 0x30	; 48
    16e4:	19 f4       	brne	.+6      	; 0x16ec <vfprintf+0x2ea>
    16e6:	99 ee       	ldi	r25, 0xE9	; 233
    16e8:	d9 22       	and	r13, r25
    16ea:	08 c0       	rjmp	.+16     	; 0x16fc <vfprintf+0x2fa>
    16ec:	1f 5f       	subi	r17, 0xFF	; 255
    16ee:	d2 fe       	sbrs	r13, 2
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <vfprintf+0x2fa>
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <vfprintf+0x2f8>
    16f4:	8d 2d       	mov	r24, r13
    16f6:	86 78       	andi	r24, 0x86	; 134
    16f8:	09 f0       	breq	.+2      	; 0x16fc <vfprintf+0x2fa>
    16fa:	1f 5f       	subi	r17, 0xFF	; 255
    16fc:	0d 2d       	mov	r16, r13
    16fe:	d3 fc       	sbrc	r13, 3
    1700:	14 c0       	rjmp	.+40     	; 0x172a <vfprintf+0x328>
    1702:	d0 fe       	sbrs	r13, 0
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <vfprintf+0x322>
    1706:	1c 15       	cp	r17, r12
    1708:	10 f0       	brcs	.+4      	; 0x170e <vfprintf+0x30c>
    170a:	9f 2c       	mov	r9, r15
    170c:	0b c0       	rjmp	.+22     	; 0x1724 <vfprintf+0x322>
    170e:	9f 2c       	mov	r9, r15
    1710:	9c 0c       	add	r9, r12
    1712:	91 1a       	sub	r9, r17
    1714:	1c 2d       	mov	r17, r12
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <vfprintf+0x322>
    1718:	b3 01       	movw	r22, r6
    171a:	80 e2       	ldi	r24, 0x20	; 32
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    1722:	1f 5f       	subi	r17, 0xFF	; 255
    1724:	1c 15       	cp	r17, r12
    1726:	c0 f3       	brcs	.-16     	; 0x1718 <vfprintf+0x316>
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <vfprintf+0x330>
    172a:	1c 15       	cp	r17, r12
    172c:	10 f4       	brcc	.+4      	; 0x1732 <vfprintf+0x330>
    172e:	c1 1a       	sub	r12, r17
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <vfprintf+0x332>
    1732:	cc 24       	eor	r12, r12
    1734:	04 ff       	sbrs	r16, 4
    1736:	10 c0       	rjmp	.+32     	; 0x1758 <vfprintf+0x356>
    1738:	b3 01       	movw	r22, r6
    173a:	80 e3       	ldi	r24, 0x30	; 48
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    1742:	02 ff       	sbrs	r16, 2
    1744:	1e c0       	rjmp	.+60     	; 0x1782 <vfprintf+0x380>
    1746:	01 fd       	sbrc	r16, 1
    1748:	03 c0       	rjmp	.+6      	; 0x1750 <vfprintf+0x34e>
    174a:	88 e7       	ldi	r24, 0x78	; 120
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <vfprintf+0x352>
    1750:	88 e5       	ldi	r24, 0x58	; 88
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	b3 01       	movw	r22, r6
    1756:	0c c0       	rjmp	.+24     	; 0x1770 <vfprintf+0x36e>
    1758:	80 2f       	mov	r24, r16
    175a:	86 78       	andi	r24, 0x86	; 134
    175c:	91 f0       	breq	.+36     	; 0x1782 <vfprintf+0x380>
    175e:	01 ff       	sbrs	r16, 1
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x364>
    1762:	8b e2       	ldi	r24, 0x2B	; 43
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <vfprintf+0x366>
    1766:	80 e2       	ldi	r24, 0x20	; 32
    1768:	d7 fc       	sbrc	r13, 7
    176a:	8d e2       	ldi	r24, 0x2D	; 45
    176c:	b3 01       	movw	r22, r6
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    1774:	06 c0       	rjmp	.+12     	; 0x1782 <vfprintf+0x380>
    1776:	b3 01       	movw	r22, r6
    1778:	80 e3       	ldi	r24, 0x30	; 48
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    1780:	9a 94       	dec	r9
    1782:	f9 14       	cp	r15, r9
    1784:	c0 f3       	brcs	.-16     	; 0x1776 <vfprintf+0x374>
    1786:	fa 94       	dec	r15
    1788:	f1 01       	movw	r30, r2
    178a:	ef 0d       	add	r30, r15
    178c:	f1 1d       	adc	r31, r1
    178e:	b3 01       	movw	r22, r6
    1790:	80 81       	ld	r24, Z
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    1798:	ff 20       	and	r15, r15
    179a:	a9 f7       	brne	.-22     	; 0x1786 <vfprintf+0x384>
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <vfprintf+0x3a8>
    179e:	b3 01       	movw	r22, r6
    17a0:	80 e2       	ldi	r24, 0x20	; 32
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <fputc>
    17a8:	ca 94       	dec	r12
    17aa:	cc 20       	and	r12, r12
    17ac:	c1 f7       	brne	.-16     	; 0x179e <vfprintf+0x39c>
    17ae:	41 ce       	rjmp	.-894    	; 0x1432 <vfprintf+0x30>
    17b0:	f3 01       	movw	r30, r6
    17b2:	66 81       	ldd	r22, Z+6	; 0x06
    17b4:	77 81       	ldd	r23, Z+7	; 0x07
    17b6:	cb 01       	movw	r24, r22
    17b8:	2b 96       	adiw	r28, 0x0b	; 11
    17ba:	e2 e1       	ldi	r30, 0x12	; 18
    17bc:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <__epilogue_restores__>

000017c0 <strnlen_P>:
    17c0:	fc 01       	movw	r30, r24
    17c2:	05 90       	lpm	r0, Z+
    17c4:	61 50       	subi	r22, 0x01	; 1
    17c6:	70 40       	sbci	r23, 0x00	; 0
    17c8:	01 10       	cpse	r0, r1
    17ca:	d8 f7       	brcc	.-10     	; 0x17c2 <strnlen_P+0x2>
    17cc:	80 95       	com	r24
    17ce:	90 95       	com	r25
    17d0:	8e 0f       	add	r24, r30
    17d2:	9f 1f       	adc	r25, r31
    17d4:	08 95       	ret

000017d6 <strnlen>:
    17d6:	fc 01       	movw	r30, r24
    17d8:	61 50       	subi	r22, 0x01	; 1
    17da:	70 40       	sbci	r23, 0x00	; 0
    17dc:	01 90       	ld	r0, Z+
    17de:	01 10       	cpse	r0, r1
    17e0:	d8 f7       	brcc	.-10     	; 0x17d8 <strnlen+0x2>
    17e2:	80 95       	com	r24
    17e4:	90 95       	com	r25
    17e6:	8e 0f       	add	r24, r30
    17e8:	9f 1f       	adc	r25, r31
    17ea:	08 95       	ret

000017ec <fputc>:
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	8c 01       	movw	r16, r24
    17f6:	eb 01       	movw	r28, r22
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	81 ff       	sbrs	r24, 1
    17fc:	1b c0       	rjmp	.+54     	; 0x1834 <fputc+0x48>
    17fe:	82 ff       	sbrs	r24, 2
    1800:	0d c0       	rjmp	.+26     	; 0x181c <fputc+0x30>
    1802:	2e 81       	ldd	r18, Y+6	; 0x06
    1804:	3f 81       	ldd	r19, Y+7	; 0x07
    1806:	8c 81       	ldd	r24, Y+4	; 0x04
    1808:	9d 81       	ldd	r25, Y+5	; 0x05
    180a:	28 17       	cp	r18, r24
    180c:	39 07       	cpc	r19, r25
    180e:	64 f4       	brge	.+24     	; 0x1828 <fputc+0x3c>
    1810:	e8 81       	ld	r30, Y
    1812:	f9 81       	ldd	r31, Y+1	; 0x01
    1814:	01 93       	st	Z+, r16
    1816:	f9 83       	std	Y+1, r31	; 0x01
    1818:	e8 83       	st	Y, r30
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <fputc+0x3c>
    181c:	e8 85       	ldd	r30, Y+8	; 0x08
    181e:	f9 85       	ldd	r31, Y+9	; 0x09
    1820:	80 2f       	mov	r24, r16
    1822:	09 95       	icall
    1824:	89 2b       	or	r24, r25
    1826:	31 f4       	brne	.+12     	; 0x1834 <fputc+0x48>
    1828:	8e 81       	ldd	r24, Y+6	; 0x06
    182a:	9f 81       	ldd	r25, Y+7	; 0x07
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	9f 83       	std	Y+7, r25	; 0x07
    1830:	8e 83       	std	Y+6, r24	; 0x06
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <fputc+0x4c>
    1834:	0f ef       	ldi	r16, 0xFF	; 255
    1836:	1f ef       	ldi	r17, 0xFF	; 255
    1838:	c8 01       	movw	r24, r16
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	08 95       	ret

00001844 <__ultoa_invert>:
    1844:	fa 01       	movw	r30, r20
    1846:	aa 27       	eor	r26, r26
    1848:	28 30       	cpi	r18, 0x08	; 8
    184a:	51 f1       	breq	.+84     	; 0x18a0 <__ultoa_invert+0x5c>
    184c:	20 31       	cpi	r18, 0x10	; 16
    184e:	81 f1       	breq	.+96     	; 0x18b0 <__ultoa_invert+0x6c>
    1850:	e8 94       	clt
    1852:	6f 93       	push	r22
    1854:	6e 7f       	andi	r22, 0xFE	; 254
    1856:	6e 5f       	subi	r22, 0xFE	; 254
    1858:	7f 4f       	sbci	r23, 0xFF	; 255
    185a:	8f 4f       	sbci	r24, 0xFF	; 255
    185c:	9f 4f       	sbci	r25, 0xFF	; 255
    185e:	af 4f       	sbci	r26, 0xFF	; 255
    1860:	b1 e0       	ldi	r27, 0x01	; 1
    1862:	3e d0       	rcall	.+124    	; 0x18e0 <__ultoa_invert+0x9c>
    1864:	b4 e0       	ldi	r27, 0x04	; 4
    1866:	3c d0       	rcall	.+120    	; 0x18e0 <__ultoa_invert+0x9c>
    1868:	67 0f       	add	r22, r23
    186a:	78 1f       	adc	r23, r24
    186c:	89 1f       	adc	r24, r25
    186e:	9a 1f       	adc	r25, r26
    1870:	a1 1d       	adc	r26, r1
    1872:	68 0f       	add	r22, r24
    1874:	79 1f       	adc	r23, r25
    1876:	8a 1f       	adc	r24, r26
    1878:	91 1d       	adc	r25, r1
    187a:	a1 1d       	adc	r26, r1
    187c:	6a 0f       	add	r22, r26
    187e:	71 1d       	adc	r23, r1
    1880:	81 1d       	adc	r24, r1
    1882:	91 1d       	adc	r25, r1
    1884:	a1 1d       	adc	r26, r1
    1886:	20 d0       	rcall	.+64     	; 0x18c8 <__ultoa_invert+0x84>
    1888:	09 f4       	brne	.+2      	; 0x188c <__ultoa_invert+0x48>
    188a:	68 94       	set
    188c:	3f 91       	pop	r19
    188e:	2a e0       	ldi	r18, 0x0A	; 10
    1890:	26 9f       	mul	r18, r22
    1892:	11 24       	eor	r1, r1
    1894:	30 19       	sub	r19, r0
    1896:	30 5d       	subi	r19, 0xD0	; 208
    1898:	31 93       	st	Z+, r19
    189a:	de f6       	brtc	.-74     	; 0x1852 <__ultoa_invert+0xe>
    189c:	cf 01       	movw	r24, r30
    189e:	08 95       	ret
    18a0:	46 2f       	mov	r20, r22
    18a2:	47 70       	andi	r20, 0x07	; 7
    18a4:	40 5d       	subi	r20, 0xD0	; 208
    18a6:	41 93       	st	Z+, r20
    18a8:	b3 e0       	ldi	r27, 0x03	; 3
    18aa:	0f d0       	rcall	.+30     	; 0x18ca <__ultoa_invert+0x86>
    18ac:	c9 f7       	brne	.-14     	; 0x18a0 <__ultoa_invert+0x5c>
    18ae:	f6 cf       	rjmp	.-20     	; 0x189c <__ultoa_invert+0x58>
    18b0:	46 2f       	mov	r20, r22
    18b2:	4f 70       	andi	r20, 0x0F	; 15
    18b4:	40 5d       	subi	r20, 0xD0	; 208
    18b6:	4a 33       	cpi	r20, 0x3A	; 58
    18b8:	18 f0       	brcs	.+6      	; 0x18c0 <__ultoa_invert+0x7c>
    18ba:	49 5d       	subi	r20, 0xD9	; 217
    18bc:	31 fd       	sbrc	r19, 1
    18be:	40 52       	subi	r20, 0x20	; 32
    18c0:	41 93       	st	Z+, r20
    18c2:	02 d0       	rcall	.+4      	; 0x18c8 <__ultoa_invert+0x84>
    18c4:	a9 f7       	brne	.-22     	; 0x18b0 <__ultoa_invert+0x6c>
    18c6:	ea cf       	rjmp	.-44     	; 0x189c <__ultoa_invert+0x58>
    18c8:	b4 e0       	ldi	r27, 0x04	; 4
    18ca:	a6 95       	lsr	r26
    18cc:	97 95       	ror	r25
    18ce:	87 95       	ror	r24
    18d0:	77 95       	ror	r23
    18d2:	67 95       	ror	r22
    18d4:	ba 95       	dec	r27
    18d6:	c9 f7       	brne	.-14     	; 0x18ca <__ultoa_invert+0x86>
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	61 05       	cpc	r22, r1
    18dc:	71 05       	cpc	r23, r1
    18de:	08 95       	ret
    18e0:	9b 01       	movw	r18, r22
    18e2:	ac 01       	movw	r20, r24
    18e4:	0a 2e       	mov	r0, r26
    18e6:	06 94       	lsr	r0
    18e8:	57 95       	ror	r21
    18ea:	47 95       	ror	r20
    18ec:	37 95       	ror	r19
    18ee:	27 95       	ror	r18
    18f0:	ba 95       	dec	r27
    18f2:	c9 f7       	brne	.-14     	; 0x18e6 <__ultoa_invert+0xa2>
    18f4:	62 0f       	add	r22, r18
    18f6:	73 1f       	adc	r23, r19
    18f8:	84 1f       	adc	r24, r20
    18fa:	95 1f       	adc	r25, r21
    18fc:	a0 1d       	adc	r26, r0
    18fe:	08 95       	ret

00001900 <__divmodhi4>:
    1900:	97 fb       	bst	r25, 7
    1902:	09 2e       	mov	r0, r25
    1904:	07 26       	eor	r0, r23
    1906:	0a d0       	rcall	.+20     	; 0x191c <__divmodhi4_neg1>
    1908:	77 fd       	sbrc	r23, 7
    190a:	04 d0       	rcall	.+8      	; 0x1914 <__divmodhi4_neg2>
    190c:	0c d0       	rcall	.+24     	; 0x1926 <__udivmodhi4>
    190e:	06 d0       	rcall	.+12     	; 0x191c <__divmodhi4_neg1>
    1910:	00 20       	and	r0, r0
    1912:	1a f4       	brpl	.+6      	; 0x191a <__divmodhi4_exit>

00001914 <__divmodhi4_neg2>:
    1914:	70 95       	com	r23
    1916:	61 95       	neg	r22
    1918:	7f 4f       	sbci	r23, 0xFF	; 255

0000191a <__divmodhi4_exit>:
    191a:	08 95       	ret

0000191c <__divmodhi4_neg1>:
    191c:	f6 f7       	brtc	.-4      	; 0x191a <__divmodhi4_exit>
    191e:	90 95       	com	r25
    1920:	81 95       	neg	r24
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	08 95       	ret

00001926 <__udivmodhi4>:
    1926:	aa 1b       	sub	r26, r26
    1928:	bb 1b       	sub	r27, r27
    192a:	51 e1       	ldi	r21, 0x11	; 17
    192c:	07 c0       	rjmp	.+14     	; 0x193c <__udivmodhi4_ep>

0000192e <__udivmodhi4_loop>:
    192e:	aa 1f       	adc	r26, r26
    1930:	bb 1f       	adc	r27, r27
    1932:	a6 17       	cp	r26, r22
    1934:	b7 07       	cpc	r27, r23
    1936:	10 f0       	brcs	.+4      	; 0x193c <__udivmodhi4_ep>
    1938:	a6 1b       	sub	r26, r22
    193a:	b7 0b       	sbc	r27, r23

0000193c <__udivmodhi4_ep>:
    193c:	88 1f       	adc	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	5a 95       	dec	r21
    1942:	a9 f7       	brne	.-22     	; 0x192e <__udivmodhi4_loop>
    1944:	80 95       	com	r24
    1946:	90 95       	com	r25
    1948:	bc 01       	movw	r22, r24
    194a:	cd 01       	movw	r24, r26
    194c:	08 95       	ret

0000194e <__prologue_saves__>:
    194e:	2f 92       	push	r2
    1950:	3f 92       	push	r3
    1952:	4f 92       	push	r4
    1954:	5f 92       	push	r5
    1956:	6f 92       	push	r6
    1958:	7f 92       	push	r7
    195a:	8f 92       	push	r8
    195c:	9f 92       	push	r9
    195e:	af 92       	push	r10
    1960:	bf 92       	push	r11
    1962:	cf 92       	push	r12
    1964:	df 92       	push	r13
    1966:	ef 92       	push	r14
    1968:	ff 92       	push	r15
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	ca 1b       	sub	r28, r26
    1978:	db 0b       	sbc	r29, r27
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	09 94       	ijmp

00001986 <__epilogue_restores__>:
    1986:	2a 88       	ldd	r2, Y+18	; 0x12
    1988:	39 88       	ldd	r3, Y+17	; 0x11
    198a:	48 88       	ldd	r4, Y+16	; 0x10
    198c:	5f 84       	ldd	r5, Y+15	; 0x0f
    198e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1990:	7d 84       	ldd	r7, Y+13	; 0x0d
    1992:	8c 84       	ldd	r8, Y+12	; 0x0c
    1994:	9b 84       	ldd	r9, Y+11	; 0x0b
    1996:	aa 84       	ldd	r10, Y+10	; 0x0a
    1998:	b9 84       	ldd	r11, Y+9	; 0x09
    199a:	c8 84       	ldd	r12, Y+8	; 0x08
    199c:	df 80       	ldd	r13, Y+7	; 0x07
    199e:	ee 80       	ldd	r14, Y+6	; 0x06
    19a0:	fd 80       	ldd	r15, Y+5	; 0x05
    19a2:	0c 81       	ldd	r16, Y+4	; 0x04
    19a4:	1b 81       	ldd	r17, Y+3	; 0x03
    19a6:	aa 81       	ldd	r26, Y+2	; 0x02
    19a8:	b9 81       	ldd	r27, Y+1	; 0x01
    19aa:	ce 0f       	add	r28, r30
    19ac:	d1 1d       	adc	r29, r1
    19ae:	0f b6       	in	r0, 0x3f	; 63
    19b0:	f8 94       	cli
    19b2:	de bf       	out	0x3e, r29	; 62
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	cd bf       	out	0x3d, r28	; 61
    19b8:	ed 01       	movw	r28, r26
    19ba:	08 95       	ret

000019bc <_exit>:
    19bc:	f8 94       	cli

000019be <__stop_program>:
    19be:	ff cf       	rjmp	.-2      	; 0x19be <__stop_program>
