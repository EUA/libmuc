   1               		.file	"usart.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
 107               	usart0_putchar_direct:
   1:usart.c       **** /* usart.c
   2:usart.c       **** 	functions and definitions for usart control
   3:usart.c       **** */
   4:usart.c       **** 
   5:usart.c       **** #include "usart.h"
   6:usart.c       **** #include <stdio.h>
   7:usart.c       **** #include <avr/io.h>
   8:usart.c       **** #include <avr/power.h>
   9:usart.c       **** #include <avr/pgmspace.h>
  10:usart.c       **** #include <avr/interrupt.h>
  11:usart.c       **** #include <ctype.h>
  12:usart.c       **** #include "queue.h"
  13:usart.c       **** 
  14:usart.c       **** #define RX_BUFSIZE 128
  15:usart.c       **** 
  16:usart.c       **** queue_t tx_q;
  17:usart.c       **** 
  18:usart.c       **** static int usart0_putchar_direct(char c, FILE *stream);
  19:usart.c       **** static int usart0_putchar(char c, FILE *stream);
  20:usart.c       **** int usart0_getchar(FILE *stream);
  21:usart.c       **** 
  22:usart.c       **** static FILE usart0_stderr = FDEV_SETUP_STREAM(usart0_putchar_direct, NULL,_FDEV_SETUP_WRITE);
  23:usart.c       **** static FILE usart0_stdio = FDEV_SETUP_STREAM(usart0_putchar, usart0_getchar ,_FDEV_SETUP_RW);
  24:usart.c       **** 
  25:usart.c       **** static void enable_usart0_tx_inter(void) {
  26:usart.c       **** 	UCSR0B|=(1<<UDRIE0);
  27:usart.c       **** }
  28:usart.c       **** static void disable_usart0_tx_inter(void) {
  29:usart.c       **** 	UCSR0B&=(uint8_t)~(1<<UDRIE0);
  30:usart.c       **** }
  31:usart.c       **** 
  32:usart.c       **** static int usart0_putchar_direct(char c, FILE *stream) {
 109               	.LM0:
 110               	.LFBB1:
 111 0000 1F93      		push r17
 112               	/* prologue: function */
 113               	/* frame size = 0 */
 114 0002 182F      		mov r17,r24
  33:usart.c       **** 	if (c == '\n')
 116               	.LM1:
 117 0004 8A30      		cpi r24,lo8(10)
 118 0006 01F4      		brne .L4
  34:usart.c       **** 		usart0_putchar_direct('\r', stream);
 120               	.LM2:
 121 0008 8DE0      		ldi r24,lo8(13)
 122 000a 0E94 0000 		call usart0_putchar_direct
 123               	.L4:
  35:usart.c       **** 	loop_until_bit_is_set(UCSR0A, UDRE0);
 125               	.LM3:
 126 000e 8091 C000 		lds r24,192
 127 0012 85FF      		sbrs r24,5
 128 0014 00C0      		rjmp .L4
  36:usart.c       **** 	UDR0 = c;
 130               	.LM4:
 131 0016 1093 C600 		sts 198,r17
  37:usart.c       **** 	return 0;
  38:usart.c       **** }
 133               	.LM5:
 134 001a 80E0      		ldi r24,lo8(0)
 135 001c 90E0      		ldi r25,hi8(0)
 136               	/* epilogue start */
 137 001e 1F91      		pop r17
 138 0020 0895      		ret
 140               	.Lscope1:
 142               	.global	usart0_init
 144               	usart0_init:
  39:usart.c       **** 
  40:usart.c       **** int usart0_getchar(FILE *stream) {
  41:usart.c       **** 	uint8_t c;
  42:usart.c       **** 	char *cp, *cp2;
  43:usart.c       **** 	static char b[RX_BUFSIZE];
  44:usart.c       **** 	static char *rxp;
  45:usart.c       **** 	//if (UCSR0B&(1<<RXCIE0)) // Disable the interrupt while scanf is working.
  46:usart.c       **** 	//	UCSR0B &=(uint8_t)~(1<<RXCIE0);
  47:usart.c       **** 	
  48:usart.c       **** 	if (rxp == 0) {
  49:usart.c       **** 		for (cp = b;;) {
  50:usart.c       **** 			loop_until_bit_is_set(UCSR0A, RXC0);
  51:usart.c       **** 			if (UCSR0A & _BV(FE0))	return _FDEV_EOF;
  52:usart.c       **** 			if (UCSR0A & _BV(DOR0))	return _FDEV_ERR;
  53:usart.c       **** 			c = UDR0;
  54:usart.c       **** 			/* behaviour similar to Unix stty ICRNL */
  55:usart.c       **** 			if (c == '\r') c = '\n';
  56:usart.c       **** 			if (c == '\n') {
  57:usart.c       **** 				*cp = c;
  58:usart.c       **** 				usart0_putchar(c, stream);
  59:usart.c       **** 				rxp = b;
  60:usart.c       **** 			//	UCSR0B |=(1<<RXCIE0); //scanf done?
  61:usart.c       **** 				break;
  62:usart.c       **** 			}
  63:usart.c       **** 			else if (c == '\t') 	c = ' ';
  64:usart.c       **** 			
  65:usart.c       **** 			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') || c >= (uint8_t)'\xa0') {
  66:usart.c       **** 				if (cp == b + RX_BUFSIZE - 1)
  67:usart.c       **** 					usart0_putchar('\a', stream);
  68:usart.c       **** 				else {
  69:usart.c       **** 					*cp++ = c;
  70:usart.c       **** 					usart0_putchar(c, stream);
  71:usart.c       **** 				}
  72:usart.c       **** 				continue;
  73:usart.c       **** 			}
  74:usart.c       **** 				
  75:usart.c       **** 			switch (c) {
  76:usart.c       **** 			  case 'c' & 0x1f:
  77:usart.c       **** 				return -1;
  78:usart.c       **** 				
  79:usart.c       **** 			  case '\b':
  80:usart.c       **** 			  case '\x7f':
  81:usart.c       **** 				if (cp > b) {
  82:usart.c       **** 					usart0_putchar('\b', stream);
  83:usart.c       **** 					usart0_putchar(' ', stream);
  84:usart.c       **** 					usart0_putchar('\b', stream);
  85:usart.c       **** 					cp--;
  86:usart.c       **** 				}
  87:usart.c       **** 				break;
  88:usart.c       **** 				
  89:usart.c       **** 			  case 'r' & 0x1f:
  90:usart.c       **** 				usart0_putchar('\r', stream);
  91:usart.c       **** 				for (cp2 = b; cp2 < cp; cp2++)
  92:usart.c       **** 					usart0_putchar(*cp2, stream);
  93:usart.c       **** 				break;
  94:usart.c       **** 				
  95:usart.c       **** 			  case 'u' & 0x1f:
  96:usart.c       **** 				while (cp > b) {
  97:usart.c       **** 					usart0_putchar('\b', stream);
  98:usart.c       **** 					usart0_putchar(' ', stream);
  99:usart.c       **** 					usart0_putchar('\b', stream);
 100:usart.c       **** 					cp--;
 101:usart.c       **** 				}
 102:usart.c       **** 				break;
 103:usart.c       **** 				
 104:usart.c       **** 			  case 'w' & 0x1f:
 105:usart.c       **** 				while (cp > b && cp[-1] != ' ') {
 106:usart.c       **** 					usart0_putchar('\b', stream);
 107:usart.c       **** 					usart0_putchar(' ', stream);
 108:usart.c       **** 					usart0_putchar('\b', stream);
 109:usart.c       **** 					cp--;
 110:usart.c       **** 				}
 111:usart.c       **** 				break;
 112:usart.c       **** 			}
 113:usart.c       **** 		}
 114:usart.c       **** 	}
 115:usart.c       **** 	c = *rxp++;
 116:usart.c       **** 	if (c == '\n')	rxp = 0;
 117:usart.c       **** 	return c;
 118:usart.c       **** }
 119:usart.c       **** 
 120:usart.c       **** 
 121:usart.c       **** static int usart0_putchar(char c, FILE *stream) {
 122:usart.c       ****   if (c == '\n')
 123:usart.c       **** 	usart0_putchar('\r', stream);
 124:usart.c       **** 
 125:usart.c       ****   // Polled
 126:usart.c       **** //  loop_until_bit_is_set(UCSR0A, UDRE0);
 127:usart.c       **** //  UDR0 = c;
 128:usart.c       **** 
 129:usart.c       ****   //Queued
 130:usart.c       ****   if (q_full(&tx_q)) { // Hack around my stupidity.
 131:usart.c       **** 	#if DEBUG_L(2)
 132:usart.c       **** 	printf_P(PSTR("\n[warn] Had to force on USART ittr\n"));
 133:usart.c       **** 	#endif
 134:usart.c       **** 	enable_usart0_tx_inter();
 135:usart.c       **** 	sei();
 136:usart.c       ****   }
 137:usart.c       ****   while (q_full(&tx_q));
 138:usart.c       ****   disable_usart0_tx_inter();
 139:usart.c       ****   q_push(&tx_q,c);	
 140:usart.c       ****   enable_usart0_tx_inter();
 141:usart.c       **** 
 142:usart.c       ****   return 0;
 143:usart.c       **** }
 144:usart.c       **** 
 145:usart.c       **** /*
 146:usart.c       **** ISR(USART0_RX_vect) { 
 147:usart.c       **** 	char c = UDR0;
 148:usart.c       **** 	//q_push(rx_queue,c);
 149:usart.c       **** 	//if (c=='\n')
 150:usart.c       **** 	//	parse_rx();
 151:usart.c       **** 		
 152:usart.c       **** 	printf_P(PSTR("\nRX_vect got char: %c"),c);
 153:usart.c       **** 	if		(toupper(c)=='T')
 154:usart.c       **** 		c_mode=TEST;
 155:usart.c       **** 	else if	(toupper(c)=='F')
 156:usart.c       **** 		c_mode=FOLLOW;
 157:usart.c       **** 	else if	(toupper(c)=='W')
 158:usart.c       **** 		c_mode=WAIT;
 159:usart.c       **** 	printf_P(PSTR("\nMode now: %d\n"),c_mode);
 160:usart.c       **** }
 161:usart.c       **** */
 162:usart.c       **** 
 163:usart.c       **** ISR(USART0_UDRE_vect) {	
 164:usart.c       **** 	if (tx_q.ct>0) // !q_empty(&tx_q)
 165:usart.c       **** 		UDR0 = q_pop(&tx_q);
 166:usart.c       **** 	if (tx_q.ct==0)// q_empty(&tx_q)
 167:usart.c       **** 		disable_usart0_tx_inter();			
 168:usart.c       **** }
 169:usart.c       **** 
 170:usart.c       **** 
 171:usart.c       **** void usart0_init(void) {
 172:usart.c       **** 	power_usart0_enable();
 146               	.LM6:
 147               	.LFBB2:
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 173:usart.c       **** 	
 151               	.LM7:
 152 0022 E4E6      		ldi r30,lo8(100)
 153 0024 F0E0      		ldi r31,hi8(100)
 154 0026 8081      		ld r24,Z
 155 0028 8D7F      		andi r24,lo8(-3)
 156 002a 8083      		st Z,r24
 174:usart.c       **** 	q_init(&tx_q);	
 175:usart.c       **** 	
 158               	.LM8:
 159 002c 80E0      		ldi r24,lo8(tx_q)
 160 002e 90E0      		ldi r25,hi8(tx_q)
 161 0030 0E94 0000 		call q_init
 176:usart.c       **** 	/* Set baud rate (12bit) */
 177:usart.c       **** 	UBRR0 = UBRR_VALUE;
 178:usart.c       **** 	#if USE_2X
 163               	.LM9:
 164 0034 89E1      		ldi r24,lo8(25)
 165 0036 90E0      		ldi r25,hi8(25)
 166 0038 9093 C500 		sts (196)+1,r25
 167 003c 8093 C400 		sts 196,r24
 179:usart.c       **** 	UCSR0A |= (1 << U2X0);
 180:usart.c       **** 	#else
 181:usart.c       **** 	UCSR0A &=(uint8_t)~(1 << U2X0);
 182:usart.c       **** 	#endif
 169               	.LM10:
 170 0040 E0EC      		ldi r30,lo8(192)
 171 0042 F0E0      		ldi r31,hi8(192)
 172 0044 8081      		ld r24,Z
 173 0046 8D7F      		andi r24,lo8(-3)
 174 0048 8083      		st Z,r24
 183:usart.c       **** 	/* Double the uart clock */
 184:usart.c       **** 	//UCSR0A |=(1<<U2X0);
 185:usart.c       **** 	/* Enable receiver and transmitter */
 186:usart.c       **** 	UCSR0B = (1<<RXEN0)|(1<<TXEN0)	;
 187:usart.c       **** 	/* Enable r/t interupts, hangles input when used with some buffering functions */
 176               	.LM11:
 177 004a 88E1      		ldi r24,lo8(24)
 178 004c 8093 C100 		sts 193,r24
 188:usart.c       **** 	//UCSR0B |=(1<<RXCIE0);
 189:usart.c       **** 	//UCSR0B |=(1<<TXCIE0);
 190:usart.c       **** 	/* Set frame format: 8data, 1stop bit */
 191:usart.c       **** 	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
 192:usart.c       **** 	
 180               	.LM12:
 181 0050 86E0      		ldi r24,lo8(6)
 182 0052 8093 C200 		sts 194,r24
 193:usart.c       **** 	
 194:usart.c       **** 	stdout=stdin=&usart0_stdio;
 195:usart.c       **** 	stderr=&usart0_stderr;
 184               	.LM13:
 185 0056 80E0      		ldi r24,lo8(usart0_stdio)
 186 0058 90E0      		ldi r25,hi8(usart0_stdio)
 187 005a 9093 0000 		sts (__iob)+1,r25
 188 005e 8093 0000 		sts __iob,r24
 189 0062 9093 0000 		sts (__iob+2)+1,r25
 190 0066 8093 0000 		sts __iob+2,r24
 196:usart.c       **** 	fprintf_P(stderr,PSTR("\nusart: init usart0\t[done]"));
 192               	.LM14:
 193 006a 80E0      		ldi r24,lo8(usart0_stderr)
 194 006c 90E0      		ldi r25,hi8(usart0_stderr)
 195 006e 9093 0000 		sts (__iob+4)+1,r25
 196 0072 8093 0000 		sts __iob+4,r24
 197:usart.c       **** }
 198               	.LM15:
 199 0076 00D0      		rcall .
 200 0078 00D0      		rcall .
 201 007a EDB7      		in r30,__SP_L__
 202 007c FEB7      		in r31,__SP_H__
 203 007e 9283      		std Z+2,r25
 204 0080 8183      		std Z+1,r24
 205 0082 80E0      		ldi r24,lo8(__c.1669)
 206 0084 90E0      		ldi r25,hi8(__c.1669)
 207 0086 9483      		std Z+4,r25
 208 0088 8383      		std Z+3,r24
 209 008a 0E94 0000 		call fprintf_P
 210 008e 0F90      		pop __tmp_reg__
 211 0090 0F90      		pop __tmp_reg__
 212 0092 0F90      		pop __tmp_reg__
 213 0094 0F90      		pop __tmp_reg__
 214               	/* epilogue start */
 198:usart.c       **** void usart_init(void) {
 216               	.LM16:
 217 0096 0895      		ret
 219               	.Lscope2:
 221               	.global	usart_init
 223               	usart_init:
 199:usart.c       **** 	usart0_init();
 200:usart.c       **** }
 225               	.LM17:
 226               	.LFBB3:
 227               	/* prologue: function */
 228               	/* frame size = 0 */
 201:usart.c       **** ...
 230               	.LM18:
 231 0098 0E94 0000 		call usart0_init
 232               	/* epilogue start */
 234               	.LM19:
 235 009c 0895      		ret
 237               	.Lscope3:
 242               	usart0_putchar:
 244               	.LM20:
 245               	.LFBB4:
 246 009e 1F93      		push r17
 247               	/* prologue: function */
 248               	/* frame size = 0 */
 249 00a0 182F      		mov r17,r24
 251               	.LM21:
 252 00a2 8A30      		cpi r24,lo8(10)
 253 00a4 01F4      		brne .L11
 255               	.LM22:
 256 00a6 8DE0      		ldi r24,lo8(13)
 257 00a8 0E94 0000 		call usart0_putchar
 258               	.L11:
 260               	.LM23:
 261 00ac 80E0      		ldi r24,lo8(tx_q)
 262 00ae 90E0      		ldi r25,hi8(tx_q)
 263 00b0 0E94 0000 		call q_full
 264 00b4 8823      		tst r24
 265 00b6 01F0      		breq .L14
 267               	.LM24:
 268 00b8 00D0      		rcall .
 269 00ba 80E0      		ldi r24,lo8(__c.1648)
 270 00bc 90E0      		ldi r25,hi8(__c.1648)
 271 00be EDB7      		in r30,__SP_L__
 272 00c0 FEB7      		in r31,__SP_H__
 273 00c2 9283      		std Z+2,r25
 274 00c4 8183      		std Z+1,r24
 275 00c6 0E94 0000 		call printf_P
 276               	.LBB11:
 277               	.LBB12:
 279               	.LM25:
 280 00ca 8091 C100 		lds r24,193
 281 00ce 8062      		ori r24,lo8(32)
 282 00d0 8093 C100 		sts 193,r24
 283               	.LBE12:
 284               	.LBE11:
 286               	.LM26:
 287               	/* #APP */
 288               	 ;  135 "usart.c" 1
 289 00d4 7894      		sei
 290               	 ;  0 "" 2
 291               	/* #NOAPP */
 292 00d6 0F90      		pop __tmp_reg__
 293 00d8 0F90      		pop __tmp_reg__
 294               	.L14:
 296               	.LM27:
 297 00da 80E0      		ldi r24,lo8(tx_q)
 298 00dc 90E0      		ldi r25,hi8(tx_q)
 299 00de 0E94 0000 		call q_full
 300 00e2 8823      		tst r24
 301 00e4 01F4      		brne .L14
 302               	.LBB13:
 303               	.LBB14:
 305               	.LM28:
 306 00e6 8091 C100 		lds r24,193
 307 00ea 8F7D      		andi r24,lo8(-33)
 308 00ec 8093 C100 		sts 193,r24
 309               	.LBE14:
 310               	.LBE13:
 312               	.LM29:
 313 00f0 80E0      		ldi r24,lo8(tx_q)
 314 00f2 90E0      		ldi r25,hi8(tx_q)
 315 00f4 612F      		mov r22,r17
 316 00f6 0E94 0000 		call q_push
 317               	.LBB15:
 318               	.LBB16:
 320               	.LM30:
 321 00fa 8091 C100 		lds r24,193
 322 00fe 8062      		ori r24,lo8(32)
 323 0100 8093 C100 		sts 193,r24
 324               	.LBE16:
 325               	.LBE15:
 327               	.LM31:
 328 0104 80E0      		ldi r24,lo8(0)
 329 0106 90E0      		ldi r25,hi8(0)
 330               	/* epilogue start */
 331 0108 1F91      		pop r17
 332 010a 0895      		ret
 334               	.Lscope4:
 337               	.global	usart0_getchar
 339               	usart0_getchar:
 341               	.LM32:
 342               	.LFBB5:
 343 010c EF92      		push r14
 344 010e FF92      		push r15
 345 0110 0F93      		push r16
 346 0112 1F93      		push r17
 347 0114 CF93      		push r28
 348 0116 DF93      		push r29
 349               	/* prologue: function */
 350               	/* frame size = 0 */
 351 0118 7C01      		movw r14,r24
 353               	.LM33:
 354 011a 8091 0000 		lds r24,rxp.1599
 355 011e 9091 0000 		lds r25,(rxp.1599)+1
 356 0122 892B      		or r24,r25
 357 0124 01F0      		breq .+2
 358 0126 00C0      		rjmp .L17
 359 0128 00E0      		ldi r16,lo8(b.1598)
 360 012a 10E0      		ldi r17,hi8(b.1598)
 361               	.L42:
 363               	.LM34:
 364 012c 8091 C000 		lds r24,192
 365 0130 87FF      		sbrs r24,7
 366 0132 00C0      		rjmp .L42
 368               	.LM35:
 369 0134 8091 C000 		lds r24,192
 370 0138 84FF      		sbrs r24,4
 371 013a 00C0      		rjmp .L19
 372 013c 2EEF      		ldi r18,lo8(-2)
 373 013e 3FEF      		ldi r19,hi8(-2)
 374 0140 00C0      		rjmp .L20
 375               	.L19:
 377               	.LM36:
 378 0142 8091 C000 		lds r24,192
 379 0146 83FD      		sbrc r24,3
 380 0148 00C0      		rjmp .L21
 382               	.LM37:
 383 014a 9091 C600 		lds r25,198
 385               	.LM38:
 386 014e 9D30      		cpi r25,lo8(13)
 387 0150 01F0      		breq .L22
 389               	.LM39:
 390 0152 9A30      		cpi r25,lo8(10)
 391 0154 01F4      		brne .L23
 392               	.L22:
 394               	.LM40:
 395 0156 8AE0      		ldi r24,lo8(10)
 396 0158 F801      		movw r30,r16
 397 015a 8083      		st Z,r24
 399               	.LM41:
 400 015c B701      		movw r22,r14
 401 015e 0E94 0000 		call usart0_putchar
 403               	.LM42:
 404 0162 80E0      		ldi r24,lo8(b.1598)
 405 0164 90E0      		ldi r25,hi8(b.1598)
 406 0166 9093 0000 		sts (rxp.1599)+1,r25
 407 016a 8093 0000 		sts rxp.1599,r24
 408 016e 00C0      		rjmp .L17
 409               	.L23:
 411               	.LM43:
 412 0170 9930      		cpi r25,lo8(9)
 413 0172 01F4      		brne .L24
 414 0174 90E2      		ldi r25,lo8(32)
 415               	.L24:
 417               	.LM44:
 418 0176 892F      		mov r24,r25
 419 0178 8052      		subi r24,lo8(-(-32))
 420 017a 8F35      		cpi r24,lo8(95)
 421 017c 00F0      		brlo .L25
 422 017e 903A      		cpi r25,lo8(-96)
 423 0180 00F0      		brlo .L26
 424               	.L25:
 426               	.LM45:
 427 0182 F0E0      		ldi r31,hi8(b.1598+127)
 428 0184 0030      		cpi r16,lo8(b.1598+127)
 429 0186 1F07      		cpc r17,r31
 430 0188 01F4      		brne .L27
 432               	.LM46:
 433 018a 87E0      		ldi r24,lo8(7)
 434 018c 00C0      		rjmp .L43
 435               	.L27:
 437               	.LM47:
 438 018e F801      		movw r30,r16
 439 0190 9193      		st Z+,r25
 440 0192 8F01      		movw r16,r30
 442               	.LM48:
 443 0194 892F      		mov r24,r25
 444               	.L43:
 445 0196 B701      		movw r22,r14
 446 0198 0E94 0000 		call usart0_putchar
 447 019c 00C0      		rjmp .L42
 448               	.L26:
 450               	.LM49:
 451 019e 9330      		cpi r25,lo8(3)
 452 01a0 01F4      		brne .+2
 453 01a2 00C0      		rjmp .L21
 454 01a4 9830      		cpi r25,lo8(8)
 455 01a6 01F0      		breq .L28
 456 01a8 9231      		cpi r25,lo8(18)
 457 01aa 01F0      		breq .L29
 458 01ac 9531      		cpi r25,lo8(21)
 459 01ae 01F0      		breq .L40
 460 01b0 9731      		cpi r25,lo8(23)
 461 01b2 01F4      		brne .+2
 462 01b4 00C0      		rjmp .L41
 463 01b6 9F37      		cpi r25,lo8(127)
 464 01b8 01F0      		breq .+2
 465 01ba 00C0      		rjmp .L42
 466               	.L28:
 468               	.LM50:
 469 01bc F0E0      		ldi r31,hi8(b.1598)
 470 01be 0030      		cpi r16,lo8(b.1598)
 471 01c0 1F07      		cpc r17,r31
 472 01c2 01F0      		breq .+2
 473 01c4 00F4      		brsh .+2
 474 01c6 00C0      		rjmp .L42
 476               	.LM51:
 477 01c8 88E0      		ldi r24,lo8(8)
 478 01ca B701      		movw r22,r14
 479 01cc 0E94 0000 		call usart0_putchar
 481               	.LM52:
 482 01d0 80E2      		ldi r24,lo8(32)
 483 01d2 B701      		movw r22,r14
 484 01d4 0E94 0000 		call usart0_putchar
 486               	.LM53:
 487 01d8 88E0      		ldi r24,lo8(8)
 488 01da B701      		movw r22,r14
 489 01dc 0E94 0000 		call usart0_putchar
 491               	.LM54:
 492 01e0 0150      		subi r16,lo8(-(-1))
 493 01e2 1040      		sbci r17,hi8(-(-1))
 494 01e4 00C0      		rjmp .L42
 495               	.L29:
 497               	.LM55:
 498 01e6 8DE0      		ldi r24,lo8(13)
 499 01e8 B701      		movw r22,r14
 500 01ea 0E94 0000 		call usart0_putchar
 501 01ee C0E0      		ldi r28,lo8(b.1598)
 502 01f0 D0E0      		ldi r29,hi8(b.1598)
 503 01f2 00C0      		rjmp .L32
 504               	.L33:
 506               	.LM56:
 507 01f4 8991      		ld r24,Y+
 508 01f6 B701      		movw r22,r14
 509 01f8 0E94 0000 		call usart0_putchar
 510               	.L32:
 512               	.LM57:
 513 01fc C017      		cp r28,r16
 514 01fe D107      		cpc r29,r17
 515 0200 00F0      		brlo .L33
 516 0202 00C0      		rjmp .L42
 517               	.L34:
 519               	.LM58:
 520 0204 88E0      		ldi r24,lo8(8)
 521 0206 B701      		movw r22,r14
 522 0208 0E94 0000 		call usart0_putchar
 524               	.LM59:
 525 020c 80E2      		ldi r24,lo8(32)
 526 020e B701      		movw r22,r14
 527 0210 0E94 0000 		call usart0_putchar
 529               	.LM60:
 530 0214 88E0      		ldi r24,lo8(8)
 531 0216 B701      		movw r22,r14
 532 0218 0E94 0000 		call usart0_putchar
 534               	.LM61:
 535 021c 0150      		subi r16,lo8(-(-1))
 536 021e 1040      		sbci r17,hi8(-(-1))
 537               	.L40:
 539               	.LM62:
 540 0220 80E0      		ldi r24,hi8(b.1598)
 541 0222 0030      		cpi r16,lo8(b.1598)
 542 0224 1807      		cpc r17,r24
 543 0226 01F0      		breq .+2
 544 0228 00F4      		brsh .L34
 545 022a 00C0      		rjmp .L42
 546               	.L35:
 548               	.LM63:
 549 022c 88E0      		ldi r24,lo8(8)
 550 022e B701      		movw r22,r14
 551 0230 0E94 0000 		call usart0_putchar
 553               	.LM64:
 554 0234 80E2      		ldi r24,lo8(32)
 555 0236 B701      		movw r22,r14
 556 0238 0E94 0000 		call usart0_putchar
 558               	.LM65:
 559 023c 88E0      		ldi r24,lo8(8)
 560 023e B701      		movw r22,r14
 561 0240 0E94 0000 		call usart0_putchar
 562 0244 8E01      		movw r16,r28
 563               	.L41:
 565               	.LM66:
 566 0246 E0E0      		ldi r30,hi8(b.1598)
 567 0248 0030      		cpi r16,lo8(b.1598)
 568 024a 1E07      		cpc r17,r30
 569 024c 01F0      		breq .+2
 570 024e 00F4      		brsh .+2
 571 0250 00C0      		rjmp .L42
 572 0252 E801      		movw r28,r16
 573 0254 8A91      		ld r24,-Y
 574 0256 8032      		cpi r24,lo8(32)
 575 0258 01F4      		brne .L35
 576 025a 00C0      		rjmp .L42
 577               	.L17:
 579               	.LM67:
 580 025c E091 0000 		lds r30,rxp.1599
 581 0260 F091 0000 		lds r31,(rxp.1599)+1
 582 0264 8191      		ld r24,Z+
 583 0266 F093 0000 		sts (rxp.1599)+1,r31
 584 026a E093 0000 		sts rxp.1599,r30
 586               	.LM68:
 587 026e 8A30      		cpi r24,lo8(10)
 588 0270 01F4      		brne .L36
 589 0272 1092 0000 		sts (rxp.1599)+1,__zero_reg__
 590 0276 1092 0000 		sts rxp.1599,__zero_reg__
 591               	.L36:
 593               	.LM69:
 594 027a 282F      		mov r18,r24
 595 027c 30E0      		ldi r19,lo8(0)
 596 027e 00C0      		rjmp .L20
 597               	.L21:
 598 0280 2FEF      		ldi r18,lo8(-1)
 599 0282 3FEF      		ldi r19,hi8(-1)
 600               	.L20:
 602               	.LM70:
 603 0284 C901      		movw r24,r18
 604               	/* epilogue start */
 605 0286 DF91      		pop r29
 606 0288 CF91      		pop r28
 607 028a 1F91      		pop r17
 608 028c 0F91      		pop r16
 609 028e FF90      		pop r15
 610 0290 EF90      		pop r14
 611 0292 0895      		ret
 620               	.Lscope5:
 622               	.global	__vector_14
 624               	__vector_14:
 626               	.LM71:
 627               	.LFBB6:
 628 0294 1F92      		push __zero_reg__
 629 0296 0F92      		push r0
 630 0298 0FB6      		in r0,__SREG__
 631 029a 0F92      		push r0
 632 029c 1124      		clr __zero_reg__
 633 029e 2F93      		push r18
 634 02a0 3F93      		push r19
 635 02a2 4F93      		push r20
 636 02a4 5F93      		push r21
 637 02a6 6F93      		push r22
 638 02a8 7F93      		push r23
 639 02aa 8F93      		push r24
 640 02ac 9F93      		push r25
 641 02ae AF93      		push r26
 642 02b0 BF93      		push r27
 643 02b2 EF93      		push r30
 644 02b4 FF93      		push r31
 645               	/* prologue: Signal */
 646               	/* frame size = 0 */
 648               	.LM72:
 649 02b6 8091 0000 		lds r24,tx_q+34
 650 02ba 8823      		tst r24
 651 02bc 01F0      		breq .L45
 653               	.LM73:
 654 02be 80E0      		ldi r24,lo8(tx_q)
 655 02c0 90E0      		ldi r25,hi8(tx_q)
 656 02c2 0E94 0000 		call q_pop
 657 02c6 8093 C600 		sts 198,r24
 658               	.L45:
 660               	.LM74:
 661 02ca 8091 0000 		lds r24,tx_q+34
 662 02ce 8823      		tst r24
 663 02d0 01F4      		brne .L47
 664               	.LBB17:
 665               	.LBB18:
 667               	.LM75:
 668 02d2 8091 C100 		lds r24,193
 669 02d6 8F7D      		andi r24,lo8(-33)
 670 02d8 8093 C100 		sts 193,r24
 671               	.L47:
 672               	/* epilogue start */
 673               	.LBE18:
 674               	.LBE17:
 676               	.LM76:
 677 02dc FF91      		pop r31
 678 02de EF91      		pop r30
 679 02e0 BF91      		pop r27
 680 02e2 AF91      		pop r26
 681 02e4 9F91      		pop r25
 682 02e6 8F91      		pop r24
 683 02e8 7F91      		pop r23
 684 02ea 6F91      		pop r22
 685 02ec 5F91      		pop r21
 686 02ee 4F91      		pop r20
 687 02f0 3F91      		pop r19
 688 02f2 2F91      		pop r18
 689 02f4 0F90      		pop r0
 690 02f6 0FBE      		out __SREG__,r0
 691 02f8 0F90      		pop r0
 692 02fa 1F90      		pop __zero_reg__
 693 02fc 1895      		reti
 695               	.Lscope6:
 696               		.data
 699               	usart0_stdio:
 700 0000 0000 00   		.skip 3,0
 701 0003 03        		.byte	3
 702 0004 0000 0000 		.skip 4,0
 703 0008 0000      		.word	pm(usart0_putchar)
 704 000a 0000      		.word	pm(usart0_getchar)
 705 000c 0000      		.word	0
 708               	usart0_stderr:
 709 000e 0000 00   		.skip 3,0
 710 0011 02        		.byte	2
 711 0012 0000 0000 		.skip 4,0
 712 0016 0000      		.word	pm(usart0_putchar_direct)
 713 0018 0000      		.word	0
 714 001a 0000      		.word	0
 715               		.section	.progmem.data,"a",@progbits
 718               	__c.1669:
 719 0000 0A75 7361 		.string	"\nusart: init usart0\t[done]"
 719      7274 3A20 
 719      696E 6974 
 719      2075 7361 
 719      7274 3009 
 722               	__c.1648:
 723 001b 0A5B 7761 		.string	"\n[warn] Had to force on USART ittr\n"
 723      726E 5D20 
 723      4861 6420 
 723      746F 2066 
 723      6F72 6365 
 724               		.lcomm rxp.1599,2
 725               		.lcomm b.1598,128
 726               		.comm c_mode,2,1
 727               		.comm initial,1,1
 728               		.comm recieved,1,1
 729               		.comm tx_q,35,1
 740               		.text
 742               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart.c
     /tmp/ccw9wlFi.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccw9wlFi.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccw9wlFi.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccw9wlFi.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccw9wlFi.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccw9wlFi.s:107    .text:0000000000000000 usart0_putchar_direct
     /tmp/ccw9wlFi.s:144    .text:0000000000000022 usart0_init
                            *COM*:0000000000000023 tx_q
     /tmp/ccw9wlFi.s:699    .data:0000000000000000 usart0_stdio
     /tmp/ccw9wlFi.s:708    .data:000000000000000e usart0_stderr
     /tmp/ccw9wlFi.s:718    .progmem.data:0000000000000000 __c.1669
     /tmp/ccw9wlFi.s:223    .text:0000000000000098 usart_init
     /tmp/ccw9wlFi.s:242    .text:000000000000009e usart0_putchar
     /tmp/ccw9wlFi.s:722    .progmem.data:000000000000001b __c.1648
     /tmp/ccw9wlFi.s:339    .text:000000000000010c usart0_getchar
                             .bss:0000000000000000 rxp.1599
     /tmp/ccw9wlFi.s:724    .bss:0000000000000002 b.1598
     /tmp/ccw9wlFi.s:624    .text:0000000000000294 __vector_14
                            *COM*:0000000000000002 c_mode
                            *COM*:0000000000000001 initial
                            *COM*:0000000000000001 recieved

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
q_init
__iob
fprintf_P
q_full
printf_P
q_push
q_pop
